{"ast":null,"code":"// src/constants/financial.ts\nexport const TAG_CATEGORIES={'Food & Dining':{name:'Food & Dining',color:'bg-green-100 text-green-800',icon:'🍔',isSystemTag:true},Groceries:{name:'Groceries',color:'bg-emerald-100 text-emerald-800',icon:'🛒',parentCategory:'Food & Dining',isSystemTag:true},Transportation:{name:'Transportation',color:'bg-blue-100 text-blue-800',icon:'⛽',isSystemTag:true},Shopping:{name:'Shopping',color:'bg-purple-100 text-purple-800',icon:'🛍️',isSystemTag:true},Entertainment:{name:'Entertainment',color:'bg-pink-100 text-pink-800',icon:'🎬',isSystemTag:true},Utilities:{name:'Utilities',color:'bg-orange-100 text-orange-800',icon:'🏠',isSystemTag:true},Healthcare:{name:'Healthcare',color:'bg-red-100 text-red-800',icon:'🏥',isSystemTag:true},Business:{name:'Business',color:'bg-gray-100 text-gray-800',icon:'💼',isSystemTag:true},Income:{name:'Income',color:'bg-teal-100 text-teal-800',icon:'💰',isSystemTag:true},Travel:{name:'Travel',color:'bg-indigo-100 text-indigo-800',icon:'✈️',isSystemTag:true},Subscriptions:{name:'Subscriptions',color:'bg-yellow-100 text-yellow-800',icon:'📱',isSystemTag:true},Other:{name:'Other',color:'bg-slate-100 text-slate-800',icon:'📝',isSystemTag:true}};export const MERCHANT_PATTERNS={AMAZON:{cleanName:'Amazon',logo:'📦',suggestedCategory:'Shopping',confidence:0.95},EBAY:{cleanName:'eBay',logo:'🏷️',suggestedCategory:'Shopping',confidence:0.95},ETSY:{cleanName:'Etsy',logo:'🎨',suggestedCategory:'Shopping',confidence:0.95},STARBUCKS:{cleanName:'Starbucks',logo:'☕',suggestedCategory:'Food & Dining',confidence:0.95},MCDONALD:{cleanName:\"McDonald's\",logo:'🍟',suggestedCategory:'Food & Dining',confidence:0.95},SUBWAY:{cleanName:'Subway',logo:'🥪',suggestedCategory:'Food & Dining',confidence:0.95},CHIPOTLE:{cleanName:'Chipotle',logo:'🌯',suggestedCategory:'Food & Dining',confidence:0.95},DOORDASH:{cleanName:'DoorDash',logo:'🚚',suggestedCategory:'Food & Dining',confidence:0.95},'UBER EATS':{cleanName:'Uber Eats',logo:'🍽️',suggestedCategory:'Food & Dining',confidence:0.95},KROGER:{cleanName:'Kroger',logo:'🛒',suggestedCategory:'Groceries',confidence:0.95},WALMART:{cleanName:'Walmart',logo:'🏪',suggestedCategory:'Groceries',confidence:0.95},TARGET:{cleanName:'Target',logo:'🎯',suggestedCategory:'Shopping',confidence:0.95},COSTCO:{cleanName:'Costco',logo:'📦',suggestedCategory:'Groceries',confidence:0.95},'WHOLE FOODS':{cleanName:'Whole Foods',logo:'🥬',suggestedCategory:'Groceries',confidence:0.95},SHELL:{cleanName:'Shell',logo:'⛽',suggestedCategory:'Transportation',confidence:0.95},EXXON:{cleanName:'ExxonMobil',logo:'⛽',suggestedCategory:'Transportation',confidence:0.95},BP:{cleanName:'BP',logo:'⛽',suggestedCategory:'Transportation',confidence:0.95},UBER:{cleanName:'Uber',logo:'🚗',suggestedCategory:'Transportation',confidence:0.95},LYFT:{cleanName:'Lyft',logo:'🚙',suggestedCategory:'Transportation',confidence:0.95},NETFLIX:{cleanName:'Netflix',logo:'🎬',suggestedCategory:'Subscriptions',confidence:0.95},SPOTIFY:{cleanName:'Spotify',logo:'🎵',suggestedCategory:'Subscriptions',confidence:0.95},APPLE:{cleanName:'Apple',logo:'🍎',suggestedCategory:'Subscriptions',confidence:0.9},GOOGLE:{cleanName:'Google',logo:'🔍',suggestedCategory:'Subscriptions',confidence:0.85},MICROSOFT:{cleanName:'Microsoft',logo:'💻',suggestedCategory:'Subscriptions',confidence:0.9},VERIZON:{cleanName:'Verizon',logo:'📱',suggestedCategory:'Utilities',confidence:0.95},ATT:{cleanName:'AT&T',logo:'📱',suggestedCategory:'Utilities',confidence:0.95},COMCAST:{cleanName:'Comcast',logo:'📺',suggestedCategory:'Utilities',confidence:0.95},CVS:{cleanName:'CVS Pharmacy',logo:'💊',suggestedCategory:'Healthcare',confidence:0.95},WALGREENS:{cleanName:'Walgreens',logo:'💊',suggestedCategory:'Healthcare',confidence:0.95},PAYROLL:{cleanName:'Salary',logo:'💰',suggestedCategory:'Income',confidence:0.95},FREELANCE:{cleanName:'Freelance Payment',logo:'💼',suggestedCategory:'Income',confidence:0.9},DIVIDEND:{cleanName:'Investment Dividend',logo:'📈',suggestedCategory:'Income',confidence:0.95},INTEREST:{cleanName:'Interest Payment',logo:'🏦',suggestedCategory:'Income',confidence:0.95}};// Add some more business-focused merchant patterns\nexport const BUSINESS_MERCHANT_PATTERNS={'OFFICE DEPOT':{cleanName:'Office Depot',logo:'🖥️',suggestedCategory:'Business',confidence:0.95},ZOOM:{cleanName:'Zoom',logo:'📹',suggestedCategory:'Business',confidence:0.95},SLACK:{cleanName:'Slack',logo:'💬',suggestedCategory:'Business',confidence:0.95},AWS:{cleanName:'Amazon Web Services',logo:'☁️',suggestedCategory:'Business',confidence:0.95},GITHUB:{cleanName:'GitHub',logo:'👨‍💻',suggestedCategory:'Business',confidence:0.95},QUICKBOOKS:{cleanName:'QuickBooks',logo:'📊',suggestedCategory:'Business',confidence:0.95}};// Add loan payment merchant patterns\nexport const LOAN_MERCHANT_PATTERNS={'QUICKEN LOANS':{cleanName:'Quicken Loans',logo:'🏠',suggestedCategory:'Loan Payment',confidence:0.95},NELNET:{cleanName:'Nelnet',logo:'🎓',suggestedCategory:'Loan Payment',confidence:0.95},'SALLIE MAE':{cleanName:'Sallie Mae',logo:'🎓',suggestedCategory:'Loan Payment',confidence:0.95},'FEDLOAN SERVICING':{cleanName:'FedLoan Servicing',logo:'🎓',suggestedCategory:'Loan Payment',confidence:0.95},'GREAT LAKES':{cleanName:'Great Lakes',logo:'🎓',suggestedCategory:'Loan Payment',confidence:0.95}};// FIXED: Update the generateMockTransactions function in src/constants/financial.ts\nexport const generateMockTransactions=function(accountId){let count=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const merchants=Object.keys(MERCHANT_PATTERNS);const transactions=[];const today=new Date();for(let i=0;i<count;i++){const merchantKey=merchants[Math.floor(Math.random()*merchants.length)];const merchantInfo=MERCHANT_PATTERNS[merchantKey];const isIncome=Math.random()<0.2;// 20% chance of income\nconst amount=isIncome?Math.random()*2000+1000// Income: $1000-$3000\n:-(Math.random()*200+10);// Expense: $10-$210\n// FIX: Better date generation that ensures current month data\nlet transactionDate;if(i<count*0.7){// 70% of transactions in current month\ntransactionDate=new Date(today.getFullYear(),today.getMonth(),Math.floor(Math.random()*today.getDate())+1);}else{// 30% of transactions in past months (for historical data)\ntransactionDate=new Date(today);transactionDate.setDate(today.getDate()-Math.floor(Math.random()*60+30));// 30-90 days ago\n}transactions.push({id:`txn_${accountId}_${i}`,accountId,description:`${merchantKey} #${Math.floor(Math.random()*1000)}`,amount:Math.round(amount*100)/100,date:transactionDate.toISOString().split('T')[0],category:merchantInfo.suggestedCategory,tags:Math.random()>0.5?[merchantInfo.suggestedCategory]:[],pending:Math.random()<0.1,cleanMerchant:{...merchantInfo,original:`${merchantKey} #${Math.floor(Math.random()*1000)}`},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});}return transactions.sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());};// Enhanced mock data generation in src/constants/financial.ts\n// Add this new function for generating historical transactions\nexport const generateHistoricalTransactions=function(accountId){let monthsBack=arguments.length>1&&arguments[1]!==undefined?arguments[1]:12;let transactionsPerMonth=arguments.length>2&&arguments[2]!==undefined?arguments[2]:15;// Check if this is a loan account\nif(accountId.includes('mortgage')||accountId.includes('student_loan')){return generateLoanTransactions(accountId,monthsBack);}const merchants=Object.keys(MERCHANT_PATTERNS);const transactions=[];const today=new Date();// Generate transactions for each month going back\nfor(let monthOffset=0;monthOffset<monthsBack;monthOffset++){const targetDate=new Date(today.getFullYear(),today.getMonth()-monthOffset,1);const daysInMonth=new Date(targetDate.getFullYear(),targetDate.getMonth()+1,0).getDate();// Generate seasonal spending patterns\nconst seasonalMultiplier=getSeasonalMultiplier(targetDate.getMonth());const monthlyTransactionCount=Math.floor(transactionsPerMonth*seasonalMultiplier);for(let i=0;i<monthlyTransactionCount;i++){const merchantKey=merchants[Math.floor(Math.random()*merchants.length)];const merchantInfo=MERCHANT_PATTERNS[merchantKey];// More realistic income/expense patterns\nlet amount;if(merchantInfo.suggestedCategory==='Income'||Math.random()<0.15){// Income transactions (salary, freelance, etc.)\nif(merchantKey.includes('PAYROLL')){amount=3500+Math.random()*1500;// Salary: $3500-$5000\n}else if(merchantKey.includes('FREELANCE')){amount=500+Math.random()*2000;// Freelance: $500-$2500\n}else{amount=100+Math.random()*500;// Other income: $100-$600\n}}else{// Expense transactions with category-based amounts\namount=-getCategoryExpenseAmount(merchantInfo.suggestedCategory);}// Random day in the month\nconst dayOfMonth=Math.floor(Math.random()*daysInMonth)+1;const transactionDate=new Date(targetDate.getFullYear(),targetDate.getMonth(),dayOfMonth);transactions.push({id:`txn_${accountId}_${monthOffset}_${i}`,accountId,description:`${merchantKey} #${Math.floor(Math.random()*1000)}`,amount:Math.round(amount*100)/100,date:transactionDate.toISOString().split('T')[0],category:merchantInfo.suggestedCategory,tags:Math.random()>0.3?[merchantInfo.suggestedCategory]:[],// 70% tagged\npending:monthOffset===0&&Math.random()<0.1,// Only current month can be pending\ncleanMerchant:{...merchantInfo,original:`${merchantKey} #${Math.floor(Math.random()*1000)}`},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});}}return transactions.sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());};// Generate loan-specific transactions\nconst generateLoanTransactions=function(accountId){let monthsBack=arguments.length>1&&arguments[1]!==undefined?arguments[1]:12;const transactions=[];const today=new Date();// Determine loan type and payment amount\nlet loanMerchant;let monthlyPayment;if(accountId.includes('mortgage')){loanMerchant='QUICKEN LOANS';monthlyPayment=1850+Math.random()*200;// $1850-$2050 monthly mortgage payment\n}else if(accountId.includes('student_loan_1')){loanMerchant='NELNET';monthlyPayment=150+Math.random()*50;// $150-$200 monthly student loan payment\n}else{loanMerchant='SALLIE MAE';monthlyPayment=120+Math.random()*40;// $120-$160 monthly student loan payment\n}// Generate one payment per month\nfor(let monthOffset=0;monthOffset<monthsBack;monthOffset++){const targetDate=new Date(today.getFullYear(),today.getMonth()-monthOffset,1);// Payment is usually made between 1st and 15th of the month\nconst dayOfMonth=Math.floor(Math.random()*15)+1;const transactionDate=new Date(targetDate.getFullYear(),targetDate.getMonth(),dayOfMonth);// Small variation in payment amount\nconst paymentAmount=monthlyPayment+(Math.random()*20-10);// ±$10 variation\ntransactions.push({id:`txn_${accountId}_${monthOffset}`,accountId,description:`Monthly Payment #${Math.floor(Math.random()*1000)}`,amount:-Math.round(paymentAmount*100)/100,// Negative for payments\ndate:transactionDate.toISOString().split('T')[0],category:'Loan Payment',tags:['Loan Payment'],pending:monthOffset===0&&Math.random()<0.1,// Only current month can be pending\ncleanMerchant:{cleanName:loanMerchant,logo:accountId.includes('mortgage')?'🏠':'🎓',suggestedCategory:'Loan Payment',original:`Monthly Payment #${Math.floor(Math.random()*1000)}`,confidence:0.95},createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});}return transactions.sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime());};// Seasonal spending multipliers (higher in holiday seasons, etc.)\nconst getSeasonalMultiplier=month=>{const seasonalFactors={0:1.1,// January - New Year expenses\n1:0.9,// February - slower month\n2:1.0,// March - normal\n3:1.0,// April - normal\n4:1.1,// May - spring spending\n5:1.2,// June - vacation season\n6:1.2,// July - vacation season\n7:1.1,// August - back to school\n8:1.0,// September - normal\n9:1.0,// October - normal\n10:1.3,// November - Black Friday\n11:1.4// December - Holiday season\n};return seasonalFactors[month]||1.0;};// Category-based expense amounts for more realistic spending\nconst getCategoryExpenseAmount=category=>{const categoryAmounts={'Food & Dining':()=>15+Math.random()*85,// $15-$100\nGroceries:()=>50+Math.random()*150,// $50-$200\nTransportation:()=>25+Math.random()*75,// $25-$100\nShopping:()=>30+Math.random()*270,// $30-$300\nEntertainment:()=>20+Math.random()*80,// $20-$100\nUtilities:()=>80+Math.random()*120,// $80-$200\nHealthcare:()=>40+Math.random()*160,// $40-$200\nBusiness:()=>25+Math.random()*175,// $25-$200\nTravel:()=>100+Math.random()*400,// $100-$500\nSubscriptions:()=>10+Math.random()*40,// $10-$50\nOther:()=>20+Math.random()*80// $20-$100\n};const amountGenerator=categoryAmounts[category];return amountGenerator?amountGenerator():25+Math.random()*75;};// Update the MOCK_ACCOUNTS to use historical data\nexport const MOCK_ACCOUNTS=[{id:'acc_checking',name:'Primary Checking',type:'CHECKING',balance:2543.67,accountNumber:'****1234',bankName:'Chase Bank',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_checking',15,20)// 15 months, ~20 per month\n},{id:'acc_savings',name:'High Yield Savings',type:'SAVINGS',balance:12750.0,accountNumber:'****5678',bankName:'Ally Bank',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_savings',15,3)// 15 months, ~3 per month (savings has fewer transactions)\n},{id:'acc_credit',name:'Rewards Credit Card',type:'CREDIT',balance:-1247.82,accountNumber:'****9012',bankName:'Chase Bank',limit:5000,isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_credit',15,25)// 15 months, ~25 per month (credit cards used more)\n},{id:'acc_business',name:'Business Checking',type:'BUSINESS_CHECKING',balance:5420.33,accountNumber:'****3456',bankName:'Wells Fargo',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_business',12,12)// 12 months, ~12 per month\n},{id:'acc_home_value',name:'Home Value',type:'INVESTMENT',balance:425000.0,// Home value as asset\naccountNumber:'🏠',bankName:'Property Asset',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:[]// No transactions for home value\n},{id:'acc_mortgage',name:'Home Mortgage',type:'LOAN',balance:-285000.0,// Negative balance for loans\naccountNumber:'****7890',bankName:'Quicken Loans',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_mortgage',15,1)// 15 months, ~1 per month (monthly payments)\n},{id:'acc_student_loan_1',name:'Federal Student Loan',type:'LOAN',balance:-18500.0,// Negative balance for loans\naccountNumber:'****2345',bankName:'Nelnet',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_student_loan_1',15,1)// 15 months, ~1 per month (monthly payments)\n},{id:'acc_student_loan_2',name:'Private Student Loan',type:'LOAN',balance:-12500.0,// Negative balance for loans\naccountNumber:'****6789',bankName:'Sallie Mae',isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString(),transactions:generateHistoricalTransactions('acc_student_loan_2',15,1)// 15 months, ~1 per month (monthly payments)\n}];export const DEFAULT_PERIODS=['day','week','month','quarter','year','5year','custom'];export const VALIDATION_RULES={ACCOUNT_NAME:{MIN_LENGTH:2,MAX_LENGTH:50},TRANSACTION_DESCRIPTION:{MIN_LENGTH:1,MAX_LENGTH:255},TAG_NAME:{MIN_LENGTH:2,MAX_LENGTH:30,PATTERN:/^[a-zA-Z0-9\\s&-]+$/},AMOUNT:{MIN:-999999.99,MAX:999999.99}};export const ERROR_MESSAGES={BANK_CONNECTION_FAILED:'Unable to connect to your bank. Please check your credentials.',INVALID_CREDENTIALS:'Invalid username or password.',TRANSACTION_SYNC_ERROR:'Failed to sync transactions. Please try again.',ACCOUNT_NOT_FOUND:'Account not found.',INSUFFICIENT_PERMISSIONS:\"You don't have permission to perform this action.\",RATE_LIMIT_EXCEEDED:'Too many requests. Please wait and try again.',VALIDATION_ERROR:'Please check your input and try again.',NETWORK_ERROR:'Network error. Please check your connection.',UNKNOWN_ERROR:'An unexpected error occurred.'};","map":{"version":3,"names":["TAG_CATEGORIES","name","color","icon","isSystemTag","Groceries","parentCategory","Transportation","Shopping","Entertainment","Utilities","Healthcare","Business","Income","Travel","Subscriptions","Other","MERCHANT_PATTERNS","AMAZON","cleanName","logo","suggestedCategory","confidence","EBAY","ETSY","STARBUCKS","MCDONALD","SUBWAY","CHIPOTLE","DOORDASH","KROGER","WALMART","TARGET","COSTCO","SHELL","EXXON","BP","UBER","LYFT","NETFLIX","SPOTIFY","APPLE","GOOGLE","MICROSOFT","VERIZON","ATT","COMCAST","CVS","WALGREENS","PAYROLL","FREELANCE","DIVIDEND","INTEREST","BUSINESS_MERCHANT_PATTERNS","ZOOM","SLACK","AWS","GITHUB","QUICKBOOKS","LOAN_MERCHANT_PATTERNS","NELNET","generateMockTransactions","accountId","count","arguments","length","undefined","merchants","Object","keys","transactions","today","Date","i","merchantKey","Math","floor","random","merchantInfo","isIncome","amount","transactionDate","getFullYear","getMonth","getDate","setDate","push","id","description","round","date","toISOString","split","category","tags","pending","cleanMerchant","original","createdAt","updatedAt","sort","a","b","getTime","generateHistoricalTransactions","monthsBack","transactionsPerMonth","includes","generateLoanTransactions","monthOffset","targetDate","daysInMonth","seasonalMultiplier","getSeasonalMultiplier","monthlyTransactionCount","getCategoryExpenseAmount","dayOfMonth","loanMerchant","monthlyPayment","paymentAmount","month","seasonalFactors","categoryAmounts","Food & Dining","amountGenerator","MOCK_ACCOUNTS","type","balance","accountNumber","bankName","isActive","limit","DEFAULT_PERIODS","VALIDATION_RULES","ACCOUNT_NAME","MIN_LENGTH","MAX_LENGTH","TRANSACTION_DESCRIPTION","TAG_NAME","PATTERN","AMOUNT","MIN","MAX","ERROR_MESSAGES","BANK_CONNECTION_FAILED","INVALID_CREDENTIALS","TRANSACTION_SYNC_ERROR","ACCOUNT_NOT_FOUND","INSUFFICIENT_PERMISSIONS","RATE_LIMIT_EXCEEDED","VALIDATION_ERROR","NETWORK_ERROR","UNKNOWN_ERROR"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/constants/financial.ts"],"sourcesContent":["// src/constants/financial.ts\r\nimport {\r\n  TagCategory,\r\n  MerchantInfo,\r\n  Account,\r\n  Transaction,\r\n} from '../types/financial';\r\n\r\nexport const TAG_CATEGORIES: Record<string, TagCategory> = {\r\n  'Food & Dining': {\r\n    name: 'Food & Dining',\r\n    color: 'bg-green-100 text-green-800',\r\n    icon: '🍔',\r\n    isSystemTag: true,\r\n  },\r\n  Groceries: {\r\n    name: 'Groceries',\r\n    color: 'bg-emerald-100 text-emerald-800',\r\n    icon: '🛒',\r\n    parentCategory: 'Food & Dining',\r\n    isSystemTag: true,\r\n  },\r\n  Transportation: {\r\n    name: 'Transportation',\r\n    color: 'bg-blue-100 text-blue-800',\r\n    icon: '⛽',\r\n    isSystemTag: true,\r\n  },\r\n  Shopping: {\r\n    name: 'Shopping',\r\n    color: 'bg-purple-100 text-purple-800',\r\n    icon: '🛍️',\r\n    isSystemTag: true,\r\n  },\r\n  Entertainment: {\r\n    name: 'Entertainment',\r\n    color: 'bg-pink-100 text-pink-800',\r\n    icon: '🎬',\r\n    isSystemTag: true,\r\n  },\r\n  Utilities: {\r\n    name: 'Utilities',\r\n    color: 'bg-orange-100 text-orange-800',\r\n    icon: '🏠',\r\n    isSystemTag: true,\r\n  },\r\n  Healthcare: {\r\n    name: 'Healthcare',\r\n    color: 'bg-red-100 text-red-800',\r\n    icon: '🏥',\r\n    isSystemTag: true,\r\n  },\r\n  Business: {\r\n    name: 'Business',\r\n    color: 'bg-gray-100 text-gray-800',\r\n    icon: '💼',\r\n    isSystemTag: true,\r\n  },\r\n  Income: {\r\n    name: 'Income',\r\n    color: 'bg-teal-100 text-teal-800',\r\n    icon: '💰',\r\n    isSystemTag: true,\r\n  },\r\n  Travel: {\r\n    name: 'Travel',\r\n    color: 'bg-indigo-100 text-indigo-800',\r\n    icon: '✈️',\r\n    isSystemTag: true,\r\n  },\r\n  Subscriptions: {\r\n    name: 'Subscriptions',\r\n    color: 'bg-yellow-100 text-yellow-800',\r\n    icon: '📱',\r\n    isSystemTag: true,\r\n  },\r\n  Other: {\r\n    name: 'Other',\r\n    color: 'bg-slate-100 text-slate-800',\r\n    icon: '📝',\r\n    isSystemTag: true,\r\n  },\r\n};\r\n\r\nexport const MERCHANT_PATTERNS: Record<\r\n  string,\r\n  Omit<MerchantInfo, 'original'>\r\n> = {\r\n  AMAZON: {\r\n    cleanName: 'Amazon',\r\n    logo: '📦',\r\n    suggestedCategory: 'Shopping',\r\n    confidence: 0.95,\r\n  },\r\n  EBAY: {\r\n    cleanName: 'eBay',\r\n    logo: '🏷️',\r\n    suggestedCategory: 'Shopping',\r\n    confidence: 0.95,\r\n  },\r\n  ETSY: {\r\n    cleanName: 'Etsy',\r\n    logo: '🎨',\r\n    suggestedCategory: 'Shopping',\r\n    confidence: 0.95,\r\n  },\r\n  STARBUCKS: {\r\n    cleanName: 'Starbucks',\r\n    logo: '☕',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  MCDONALD: {\r\n    cleanName: \"McDonald's\",\r\n    logo: '🍟',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  SUBWAY: {\r\n    cleanName: 'Subway',\r\n    logo: '🥪',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  CHIPOTLE: {\r\n    cleanName: 'Chipotle',\r\n    logo: '🌯',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  DOORDASH: {\r\n    cleanName: 'DoorDash',\r\n    logo: '🚚',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  'UBER EATS': {\r\n    cleanName: 'Uber Eats',\r\n    logo: '🍽️',\r\n    suggestedCategory: 'Food & Dining',\r\n    confidence: 0.95,\r\n  },\r\n  KROGER: {\r\n    cleanName: 'Kroger',\r\n    logo: '🛒',\r\n    suggestedCategory: 'Groceries',\r\n    confidence: 0.95,\r\n  },\r\n  WALMART: {\r\n    cleanName: 'Walmart',\r\n    logo: '🏪',\r\n    suggestedCategory: 'Groceries',\r\n    confidence: 0.95,\r\n  },\r\n  TARGET: {\r\n    cleanName: 'Target',\r\n    logo: '🎯',\r\n    suggestedCategory: 'Shopping',\r\n    confidence: 0.95,\r\n  },\r\n  COSTCO: {\r\n    cleanName: 'Costco',\r\n    logo: '📦',\r\n    suggestedCategory: 'Groceries',\r\n    confidence: 0.95,\r\n  },\r\n  'WHOLE FOODS': {\r\n    cleanName: 'Whole Foods',\r\n    logo: '🥬',\r\n    suggestedCategory: 'Groceries',\r\n    confidence: 0.95,\r\n  },\r\n  SHELL: {\r\n    cleanName: 'Shell',\r\n    logo: '⛽',\r\n    suggestedCategory: 'Transportation',\r\n    confidence: 0.95,\r\n  },\r\n  EXXON: {\r\n    cleanName: 'ExxonMobil',\r\n    logo: '⛽',\r\n    suggestedCategory: 'Transportation',\r\n    confidence: 0.95,\r\n  },\r\n  BP: {\r\n    cleanName: 'BP',\r\n    logo: '⛽',\r\n    suggestedCategory: 'Transportation',\r\n    confidence: 0.95,\r\n  },\r\n  UBER: {\r\n    cleanName: 'Uber',\r\n    logo: '🚗',\r\n    suggestedCategory: 'Transportation',\r\n    confidence: 0.95,\r\n  },\r\n  LYFT: {\r\n    cleanName: 'Lyft',\r\n    logo: '🚙',\r\n    suggestedCategory: 'Transportation',\r\n    confidence: 0.95,\r\n  },\r\n  NETFLIX: {\r\n    cleanName: 'Netflix',\r\n    logo: '🎬',\r\n    suggestedCategory: 'Subscriptions',\r\n    confidence: 0.95,\r\n  },\r\n  SPOTIFY: {\r\n    cleanName: 'Spotify',\r\n    logo: '🎵',\r\n    suggestedCategory: 'Subscriptions',\r\n    confidence: 0.95,\r\n  },\r\n  APPLE: {\r\n    cleanName: 'Apple',\r\n    logo: '🍎',\r\n    suggestedCategory: 'Subscriptions',\r\n    confidence: 0.9,\r\n  },\r\n  GOOGLE: {\r\n    cleanName: 'Google',\r\n    logo: '🔍',\r\n    suggestedCategory: 'Subscriptions',\r\n    confidence: 0.85,\r\n  },\r\n  MICROSOFT: {\r\n    cleanName: 'Microsoft',\r\n    logo: '💻',\r\n    suggestedCategory: 'Subscriptions',\r\n    confidence: 0.9,\r\n  },\r\n  VERIZON: {\r\n    cleanName: 'Verizon',\r\n    logo: '📱',\r\n    suggestedCategory: 'Utilities',\r\n    confidence: 0.95,\r\n  },\r\n  ATT: {\r\n    cleanName: 'AT&T',\r\n    logo: '📱',\r\n    suggestedCategory: 'Utilities',\r\n    confidence: 0.95,\r\n  },\r\n  COMCAST: {\r\n    cleanName: 'Comcast',\r\n    logo: '📺',\r\n    suggestedCategory: 'Utilities',\r\n    confidence: 0.95,\r\n  },\r\n  CVS: {\r\n    cleanName: 'CVS Pharmacy',\r\n    logo: '💊',\r\n    suggestedCategory: 'Healthcare',\r\n    confidence: 0.95,\r\n  },\r\n  WALGREENS: {\r\n    cleanName: 'Walgreens',\r\n    logo: '💊',\r\n    suggestedCategory: 'Healthcare',\r\n    confidence: 0.95,\r\n  },\r\n  PAYROLL: {\r\n    cleanName: 'Salary',\r\n    logo: '💰',\r\n    suggestedCategory: 'Income',\r\n    confidence: 0.95,\r\n  },\r\n  FREELANCE: {\r\n    cleanName: 'Freelance Payment',\r\n    logo: '💼',\r\n    suggestedCategory: 'Income',\r\n    confidence: 0.9,\r\n  },\r\n  DIVIDEND: {\r\n    cleanName: 'Investment Dividend',\r\n    logo: '📈',\r\n    suggestedCategory: 'Income',\r\n    confidence: 0.95,\r\n  },\r\n  INTEREST: {\r\n    cleanName: 'Interest Payment',\r\n    logo: '🏦',\r\n    suggestedCategory: 'Income',\r\n    confidence: 0.95,\r\n  },\r\n};\r\n\r\n// Add some more business-focused merchant patterns\r\nexport const BUSINESS_MERCHANT_PATTERNS: Record<\r\n  string,\r\n  Omit<MerchantInfo, 'original'>\r\n> = {\r\n  'OFFICE DEPOT': {\r\n    cleanName: 'Office Depot',\r\n    logo: '🖥️',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n  ZOOM: {\r\n    cleanName: 'Zoom',\r\n    logo: '📹',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n  SLACK: {\r\n    cleanName: 'Slack',\r\n    logo: '💬',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n  AWS: {\r\n    cleanName: 'Amazon Web Services',\r\n    logo: '☁️',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n  GITHUB: {\r\n    cleanName: 'GitHub',\r\n    logo: '👨‍💻',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n  QUICKBOOKS: {\r\n    cleanName: 'QuickBooks',\r\n    logo: '📊',\r\n    suggestedCategory: 'Business',\r\n    confidence: 0.95,\r\n  },\r\n};\r\n\r\n// Add loan payment merchant patterns\r\nexport const LOAN_MERCHANT_PATTERNS: Record<\r\n  string,\r\n  Omit<MerchantInfo, 'original'>\r\n> = {\r\n  'QUICKEN LOANS': {\r\n    cleanName: 'Quicken Loans',\r\n    logo: '🏠',\r\n    suggestedCategory: 'Loan Payment',\r\n    confidence: 0.95,\r\n  },\r\n  NELNET: {\r\n    cleanName: 'Nelnet',\r\n    logo: '🎓',\r\n    suggestedCategory: 'Loan Payment',\r\n    confidence: 0.95,\r\n  },\r\n  'SALLIE MAE': {\r\n    cleanName: 'Sallie Mae',\r\n    logo: '🎓',\r\n    suggestedCategory: 'Loan Payment',\r\n    confidence: 0.95,\r\n  },\r\n  'FEDLOAN SERVICING': {\r\n    cleanName: 'FedLoan Servicing',\r\n    logo: '🎓',\r\n    suggestedCategory: 'Loan Payment',\r\n    confidence: 0.95,\r\n  },\r\n  'GREAT LAKES': {\r\n    cleanName: 'Great Lakes',\r\n    logo: '🎓',\r\n    suggestedCategory: 'Loan Payment',\r\n    confidence: 0.95,\r\n  },\r\n};\r\n\r\n// FIXED: Update the generateMockTransactions function in src/constants/financial.ts\r\n\r\nexport const generateMockTransactions = (\r\n  accountId: string,\r\n  count: number = 10\r\n): Transaction[] => {\r\n  const merchants = Object.keys(MERCHANT_PATTERNS);\r\n  const transactions: Transaction[] = [];\r\n  const today = new Date();\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\r\n    const merchantInfo = MERCHANT_PATTERNS[merchantKey];\r\n    const isIncome = Math.random() < 0.2; // 20% chance of income\r\n    const amount = isIncome\r\n      ? Math.random() * 2000 + 1000 // Income: $1000-$3000\r\n      : -(Math.random() * 200 + 10); // Expense: $10-$210\r\n\r\n    // FIX: Better date generation that ensures current month data\r\n    let transactionDate: Date;\r\n\r\n    if (i < count * 0.7) {\r\n      // 70% of transactions in current month\r\n      transactionDate = new Date(\r\n        today.getFullYear(),\r\n        today.getMonth(),\r\n        Math.floor(Math.random() * today.getDate()) + 1\r\n      );\r\n    } else {\r\n      // 30% of transactions in past months (for historical data)\r\n      transactionDate = new Date(today);\r\n      transactionDate.setDate(\r\n        today.getDate() - Math.floor(Math.random() * 60 + 30)\r\n      ); // 30-90 days ago\r\n    }\r\n\r\n    transactions.push({\r\n      id: `txn_${accountId}_${i}`,\r\n      accountId,\r\n      description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\r\n      amount: Math.round(amount * 100) / 100,\r\n      date: transactionDate.toISOString().split('T')[0],\r\n      category: merchantInfo.suggestedCategory,\r\n      tags: Math.random() > 0.5 ? [merchantInfo.suggestedCategory] : [],\r\n      pending: Math.random() < 0.1,\r\n      cleanMerchant: {\r\n        ...merchantInfo,\r\n        original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  return transactions.sort(\r\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\r\n  );\r\n};\r\n\r\n// Enhanced mock data generation in src/constants/financial.ts\r\n\r\n// Add this new function for generating historical transactions\r\nexport const generateHistoricalTransactions = (\r\n  accountId: string,\r\n  monthsBack: number = 12,\r\n  transactionsPerMonth: number = 15\r\n): Transaction[] => {\r\n  // Check if this is a loan account\r\n  if (accountId.includes('mortgage') || accountId.includes('student_loan')) {\r\n    return generateLoanTransactions(accountId, monthsBack);\r\n  }\r\n\r\n  const merchants = Object.keys(MERCHANT_PATTERNS);\r\n  const transactions: Transaction[] = [];\r\n  const today = new Date();\r\n\r\n  // Generate transactions for each month going back\r\n  for (let monthOffset = 0; monthOffset < monthsBack; monthOffset++) {\r\n    const targetDate = new Date(\r\n      today.getFullYear(),\r\n      today.getMonth() - monthOffset,\r\n      1\r\n    );\r\n    const daysInMonth = new Date(\r\n      targetDate.getFullYear(),\r\n      targetDate.getMonth() + 1,\r\n      0\r\n    ).getDate();\r\n\r\n    // Generate seasonal spending patterns\r\n    const seasonalMultiplier = getSeasonalMultiplier(targetDate.getMonth());\r\n    const monthlyTransactionCount = Math.floor(\r\n      transactionsPerMonth * seasonalMultiplier\r\n    );\r\n\r\n    for (let i = 0; i < monthlyTransactionCount; i++) {\r\n      const merchantKey =\r\n        merchants[Math.floor(Math.random() * merchants.length)];\r\n      const merchantInfo = MERCHANT_PATTERNS[merchantKey];\r\n\r\n      // More realistic income/expense patterns\r\n      let amount: number;\r\n\r\n      if (merchantInfo.suggestedCategory === 'Income' || Math.random() < 0.15) {\r\n        // Income transactions (salary, freelance, etc.)\r\n        if (merchantKey.includes('PAYROLL')) {\r\n          amount = 3500 + Math.random() * 1500; // Salary: $3500-$5000\r\n        } else if (merchantKey.includes('FREELANCE')) {\r\n          amount = 500 + Math.random() * 2000; // Freelance: $500-$2500\r\n        } else {\r\n          amount = 100 + Math.random() * 500; // Other income: $100-$600\r\n        }\r\n      } else {\r\n        // Expense transactions with category-based amounts\r\n        amount = -getCategoryExpenseAmount(merchantInfo.suggestedCategory);\r\n      }\r\n\r\n      // Random day in the month\r\n      const dayOfMonth = Math.floor(Math.random() * daysInMonth) + 1;\r\n      const transactionDate = new Date(\r\n        targetDate.getFullYear(),\r\n        targetDate.getMonth(),\r\n        dayOfMonth\r\n      );\r\n\r\n      transactions.push({\r\n        id: `txn_${accountId}_${monthOffset}_${i}`,\r\n        accountId,\r\n        description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\r\n        amount: Math.round(amount * 100) / 100,\r\n        date: transactionDate.toISOString().split('T')[0],\r\n        category: merchantInfo.suggestedCategory,\r\n        tags: Math.random() > 0.3 ? [merchantInfo.suggestedCategory] : [], // 70% tagged\r\n        pending: monthOffset === 0 && Math.random() < 0.1, // Only current month can be pending\r\n        cleanMerchant: {\r\n          ...merchantInfo,\r\n          original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\r\n        },\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    }\r\n  }\r\n\r\n  return transactions.sort(\r\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\r\n  );\r\n};\r\n\r\n// Generate loan-specific transactions\r\nconst generateLoanTransactions = (\r\n  accountId: string,\r\n  monthsBack: number = 12\r\n): Transaction[] => {\r\n  const transactions: Transaction[] = [];\r\n  const today = new Date();\r\n\r\n  // Determine loan type and payment amount\r\n  let loanMerchant: string;\r\n  let monthlyPayment: number;\r\n\r\n  if (accountId.includes('mortgage')) {\r\n    loanMerchant = 'QUICKEN LOANS';\r\n    monthlyPayment = 1850 + Math.random() * 200; // $1850-$2050 monthly mortgage payment\r\n  } else if (accountId.includes('student_loan_1')) {\r\n    loanMerchant = 'NELNET';\r\n    monthlyPayment = 150 + Math.random() * 50; // $150-$200 monthly student loan payment\r\n  } else {\r\n    loanMerchant = 'SALLIE MAE';\r\n    monthlyPayment = 120 + Math.random() * 40; // $120-$160 monthly student loan payment\r\n  }\r\n\r\n  // Generate one payment per month\r\n  for (let monthOffset = 0; monthOffset < monthsBack; monthOffset++) {\r\n    const targetDate = new Date(\r\n      today.getFullYear(),\r\n      today.getMonth() - monthOffset,\r\n      1\r\n    );\r\n    // Payment is usually made between 1st and 15th of the month\r\n    const dayOfMonth = Math.floor(Math.random() * 15) + 1;\r\n    const transactionDate = new Date(\r\n      targetDate.getFullYear(),\r\n      targetDate.getMonth(),\r\n      dayOfMonth\r\n    );\r\n\r\n    // Small variation in payment amount\r\n    const paymentAmount = monthlyPayment + (Math.random() * 20 - 10); // ±$10 variation\r\n\r\n    transactions.push({\r\n      id: `txn_${accountId}_${monthOffset}`,\r\n      accountId,\r\n      description: `Monthly Payment #${Math.floor(Math.random() * 1000)}`,\r\n      amount: -Math.round(paymentAmount * 100) / 100, // Negative for payments\r\n      date: transactionDate.toISOString().split('T')[0],\r\n      category: 'Loan Payment',\r\n      tags: ['Loan Payment'],\r\n      pending: monthOffset === 0 && Math.random() < 0.1, // Only current month can be pending\r\n      cleanMerchant: {\r\n        cleanName: loanMerchant,\r\n        logo: accountId.includes('mortgage') ? '🏠' : '🎓',\r\n        suggestedCategory: 'Loan Payment',\r\n        original: `Monthly Payment #${Math.floor(Math.random() * 1000)}`,\r\n        confidence: 0.95,\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    });\r\n  }\r\n\r\n  return transactions.sort(\r\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\r\n  );\r\n};\r\n\r\n// Seasonal spending multipliers (higher in holiday seasons, etc.)\r\nconst getSeasonalMultiplier = (month: number): number => {\r\n  const seasonalFactors = {\r\n    0: 1.1, // January - New Year expenses\r\n    1: 0.9, // February - slower month\r\n    2: 1.0, // March - normal\r\n    3: 1.0, // April - normal\r\n    4: 1.1, // May - spring spending\r\n    5: 1.2, // June - vacation season\r\n    6: 1.2, // July - vacation season\r\n    7: 1.1, // August - back to school\r\n    8: 1.0, // September - normal\r\n    9: 1.0, // October - normal\r\n    10: 1.3, // November - Black Friday\r\n    11: 1.4, // December - Holiday season\r\n  };\r\n  return seasonalFactors[month as keyof typeof seasonalFactors] || 1.0;\r\n};\r\n\r\n// Category-based expense amounts for more realistic spending\r\nconst getCategoryExpenseAmount = (category: string): number => {\r\n  const categoryAmounts = {\r\n    'Food & Dining': () => 15 + Math.random() * 85, // $15-$100\r\n    Groceries: () => 50 + Math.random() * 150, // $50-$200\r\n    Transportation: () => 25 + Math.random() * 75, // $25-$100\r\n    Shopping: () => 30 + Math.random() * 270, // $30-$300\r\n    Entertainment: () => 20 + Math.random() * 80, // $20-$100\r\n    Utilities: () => 80 + Math.random() * 120, // $80-$200\r\n    Healthcare: () => 40 + Math.random() * 160, // $40-$200\r\n    Business: () => 25 + Math.random() * 175, // $25-$200\r\n    Travel: () => 100 + Math.random() * 400, // $100-$500\r\n    Subscriptions: () => 10 + Math.random() * 40, // $10-$50\r\n    Other: () => 20 + Math.random() * 80, // $20-$100\r\n  };\r\n\r\n  const amountGenerator =\r\n    categoryAmounts[category as keyof typeof categoryAmounts];\r\n  return amountGenerator ? amountGenerator() : 25 + Math.random() * 75;\r\n};\r\n\r\n// Update the MOCK_ACCOUNTS to use historical data\r\nexport const MOCK_ACCOUNTS: Account[] = [\r\n  {\r\n    id: 'acc_checking',\r\n    name: 'Primary Checking',\r\n    type: 'CHECKING',\r\n    balance: 2543.67,\r\n    accountNumber: '****1234',\r\n    bankName: 'Chase Bank',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_checking', 15, 20), // 15 months, ~20 per month\r\n  },\r\n  {\r\n    id: 'acc_savings',\r\n    name: 'High Yield Savings',\r\n    type: 'SAVINGS',\r\n    balance: 12750.0,\r\n    accountNumber: '****5678',\r\n    bankName: 'Ally Bank',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_savings', 15, 3), // 15 months, ~3 per month (savings has fewer transactions)\r\n  },\r\n  {\r\n    id: 'acc_credit',\r\n    name: 'Rewards Credit Card',\r\n    type: 'CREDIT',\r\n    balance: -1247.82,\r\n    accountNumber: '****9012',\r\n    bankName: 'Chase Bank',\r\n    limit: 5000,\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_credit', 15, 25), // 15 months, ~25 per month (credit cards used more)\r\n  },\r\n  {\r\n    id: 'acc_business',\r\n    name: 'Business Checking',\r\n    type: 'BUSINESS_CHECKING',\r\n    balance: 5420.33,\r\n    accountNumber: '****3456',\r\n    bankName: 'Wells Fargo',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_business', 12, 12), // 12 months, ~12 per month\r\n  },\r\n  {\r\n    id: 'acc_home_value',\r\n    name: 'Home Value',\r\n    type: 'INVESTMENT',\r\n    balance: 425000.0, // Home value as asset\r\n    accountNumber: '🏠',\r\n    bankName: 'Property Asset',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: [], // No transactions for home value\r\n  },\r\n  {\r\n    id: 'acc_mortgage',\r\n    name: 'Home Mortgage',\r\n    type: 'LOAN',\r\n    balance: -285000.0, // Negative balance for loans\r\n    accountNumber: '****7890',\r\n    bankName: 'Quicken Loans',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_mortgage', 15, 1), // 15 months, ~1 per month (monthly payments)\r\n  },\r\n  {\r\n    id: 'acc_student_loan_1',\r\n    name: 'Federal Student Loan',\r\n    type: 'LOAN',\r\n    balance: -18500.0, // Negative balance for loans\r\n    accountNumber: '****2345',\r\n    bankName: 'Nelnet',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_student_loan_1', 15, 1), // 15 months, ~1 per month (monthly payments)\r\n  },\r\n  {\r\n    id: 'acc_student_loan_2',\r\n    name: 'Private Student Loan',\r\n    type: 'LOAN',\r\n    balance: -12500.0, // Negative balance for loans\r\n    accountNumber: '****6789',\r\n    bankName: 'Sallie Mae',\r\n    isActive: true,\r\n    createdAt: new Date().toISOString(),\r\n    updatedAt: new Date().toISOString(),\r\n    transactions: generateHistoricalTransactions('acc_student_loan_2', 15, 1), // 15 months, ~1 per month (monthly payments)\r\n  },\r\n];\r\n\r\nexport const DEFAULT_PERIODS = [\r\n  'day',\r\n  'week',\r\n  'month',\r\n  'quarter',\r\n  'year',\r\n  '5year',\r\n  'custom',\r\n] as const;\r\n\r\nexport const VALIDATION_RULES = {\r\n  ACCOUNT_NAME: {\r\n    MIN_LENGTH: 2,\r\n    MAX_LENGTH: 50,\r\n  },\r\n  TRANSACTION_DESCRIPTION: {\r\n    MIN_LENGTH: 1,\r\n    MAX_LENGTH: 255,\r\n  },\r\n  TAG_NAME: {\r\n    MIN_LENGTH: 2,\r\n    MAX_LENGTH: 30,\r\n    PATTERN: /^[a-zA-Z0-9\\s&-]+$/,\r\n  },\r\n  AMOUNT: {\r\n    MIN: -999999.99,\r\n    MAX: 999999.99,\r\n  },\r\n};\r\n\r\nexport const ERROR_MESSAGES = {\r\n  BANK_CONNECTION_FAILED:\r\n    'Unable to connect to your bank. Please check your credentials.',\r\n  INVALID_CREDENTIALS: 'Invalid username or password.',\r\n  TRANSACTION_SYNC_ERROR: 'Failed to sync transactions. Please try again.',\r\n  ACCOUNT_NOT_FOUND: 'Account not found.',\r\n  INSUFFICIENT_PERMISSIONS: \"You don't have permission to perform this action.\",\r\n  RATE_LIMIT_EXCEEDED: 'Too many requests. Please wait and try again.',\r\n  VALIDATION_ERROR: 'Please check your input and try again.',\r\n  NETWORK_ERROR: 'Network error. Please check your connection.',\r\n  UNKNOWN_ERROR: 'An unexpected error occurred.',\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}