{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dliz1\\\\Desktop\\\\FinanceApp\\\\src\\\\contexts\\\\FinancialContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useMemo } from 'react';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc'\n};\nconst financialReducer = (state, action) => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SELECT_ACCOUNT':\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case 'CHANGE_SCREEN':\n      return {\n        ...state,\n        currentScreen: action.payload\n      };\n    case 'CHANGE_PERIOD':\n      return {\n        ...state,\n        selectedPeriod: action.payload\n      };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions;\n          return {\n            ...account,\n            transactions: (_account$transactions = account.transactions) === null || _account$transactions === void 0 ? void 0 : _account$transactions.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n        } : txn)\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions2;\n          return {\n            ...account,\n            transactions: (_account$transactions2 = account.transactions) === null || _account$transactions2 === void 0 ? void 0 : _account$transactions2.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: txn.tags.filter(tag => tag !== action.payload.tag)\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: txn.tags.filter(tag => tag !== action.payload.tag)\n        } : txn)\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\n      };\n    case 'APPLY_FILTERS':\n      return {\n        ...state,\n        filters: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst FinancialContext = /*#__PURE__*/createContext(null);\nexport const FinancialProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n  const totalBalance = useMemo(() => state.accounts.reduce((sum, account) => sum + account.balance, 0), [state.accounts]);\n  const summary = useMemo(() => {\n    const today = new Date();\n    let startDate;\n    let periodLabel;\n\n    // Calculate period boundaries based on selectedPeriod\n    switch (state.selectedPeriod) {\n      case 'day':\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        periodLabel = 'daily';\n        break;\n      case 'week':\n        const dayOfWeek = today.getDay();\n        const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract);\n        periodLabel = 'weekly';\n        break;\n      case 'month':\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        periodLabel = 'monthly';\n        break;\n      case 'quarter':\n        const currentQuarter = Math.floor(today.getMonth() / 3);\n        startDate = new Date(today.getFullYear(), currentQuarter * 3, 1);\n        periodLabel = 'quarterly';\n        break;\n      case 'year':\n        startDate = new Date(today.getFullYear(), 0, 1);\n        periodLabel = 'yearly';\n        break;\n      case '5year':\n        startDate = new Date(today.getFullYear() - 5, 0, 1);\n        periodLabel = '5-year';\n        break;\n      default:\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        periodLabel = 'monthly';\n    }\n    const endDate = new Date(); // Today\n\n    // Filter transactions for the selected period\n    const periodTransactions = state.transactions.filter(txn => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= startDate && txnDate <= endDate;\n    });\n    console.log(`=== ${periodLabel.toUpperCase()} SUMMARY ===`);\n    console.log(`Period: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);\n    console.log(`Transactions found: ${periodTransactions.length}`);\n    const periodIncome = periodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const periodExpenses = Math.abs(periodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    console.log(`${periodLabel} income:`, periodIncome);\n    console.log(`${periodLabel} expenses:`, periodExpenses);\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n\n    // Calculate previous period for comparison\n    let prevStartDate;\n    switch (state.selectedPeriod) {\n      case 'month':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        break;\n      case 'quarter':\n        const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\n        prevStartDate = prevQuarter >= 0 ? new Date(today.getFullYear(), prevQuarter * 3, 1) : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\n        break;\n      case 'year':\n        prevStartDate = new Date(today.getFullYear() - 1, 0, 1);\n        break;\n      default:\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    }\n    const prevEndDate = new Date(startDate.getTime() - 1); // Day before current period starts\n\n    const prevPeriodTransactions = state.transactions.filter(txn => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= prevStartDate && txnDate <= prevEndDate;\n    });\n    const prevPeriodIncome = prevPeriodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const prevPeriodExpenses = Math.abs(prevPeriodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(periodIncome * 100) / 100,\n      monthlyExpenses: Math.round(periodExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\n      savingsRate: Math.max(0, savingsRate),\n      // Add comparison data for trends\n      previousPeriodIncome: prevPeriodIncome,\n      previousPeriodExpenses: prevPeriodExpenses,\n      periodLabel\n    };\n  }, [state.transactions, totalBalance, state.selectedPeriod]);\n  const selectAccount = account => {\n    dispatch({\n      type: 'SELECT_ACCOUNT',\n      payload: account\n    });\n  };\n  const changeScreen = screen => {\n    dispatch({\n      type: 'CHANGE_SCREEN',\n      payload: screen\n    });\n  };\n  const changePeriod = period => {\n    dispatch({\n      type: 'CHANGE_PERIOD',\n      payload: period\n    });\n  };\n  const addTag = (transactionId, tag) => {\n    dispatch({\n      type: 'ADD_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const removeTag = (transactionId, tag) => {\n    dispatch({\n      type: 'REMOVE_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const applyFilters = filters => {\n    dispatch({\n      type: 'APPLY_FILTERS',\n      payload: filters\n    });\n  };\n  const viewAccountDetail = account => {\n    dispatch({\n      type: 'VIEW_ACCOUNT_DETAIL',\n      payload: account\n    });\n  };\n  const value = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail\n  };\n  return /*#__PURE__*/_jsxDEV(FinancialContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialProvider, \"0Uc9UIncPtM2fI2N139/k5FoVOI=\");\n_c = FinancialProvider;\nexport const useFinancial = () => {\n  _s2();\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n_s2(useFinancial, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FinancialProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","MOCK_ACCOUNTS","jsxDEV","_jsxDEV","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","financialReducer","state","action","type","payload","map","account","_account$transactions","txn","id","transactionId","tags","Array","from","Set","tag","_account$transactions2","filter","FinancialContext","FinancialProvider","children","_s","dispatch","totalBalance","reduce","sum","balance","summary","today","Date","startDate","periodLabel","getFullYear","getMonth","getDate","dayOfWeek","getDay","daysToSubtract","currentQuarter","Math","floor","endDate","periodTransactions","txnDate","date","console","log","toUpperCase","toISOString","split","length","periodIncome","amount","periodExpenses","abs","savingsRate","prevStartDate","prevQuarter","prevEndDate","getTime","prevPeriodTransactions","prevPeriodIncome","prevPeriodExpenses","monthlyIncome","round","monthlyExpenses","netWorth","debtToIncomeRatio","max","previousPeriodIncome","previousPeriodExpenses","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","viewAccountDetail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFinancial","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useMemo } from 'react';\nimport {\n  FinancialState,\n  FinancialAction,\n  Account,\n  FilterOptions,\n  TimePeriod,\n  FinancialSummary,\n} from '../types/financial';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\n\nconst initialState: FinancialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap((acc) => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc',\n};\n\nconst financialReducer = (\n  state: FinancialState,\n  action: FinancialAction\n): FinancialState => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SELECT_ACCOUNT':\n      return { ...state, selectedAccount: action.payload };\n    case 'CHANGE_SCREEN':\n      return { ...state, currentScreen: action.payload };\n    case 'CHANGE_PERIOD':\n      return { ...state, selectedPeriod: action.payload };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n              }\n            : txn\n        ),\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n              }\n            : txn\n        ),\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [\n          ...state.transactions,\n          ...(action.payload.transactions || []),\n        ],\n      };\n    case 'APPLY_FILTERS':\n      return { ...state, filters: action.payload };\n    default:\n      return state;\n  }\n};\n\ninterface FinancialContextType {\n  state: FinancialState;\n  dispatch: React.Dispatch<FinancialAction>;\n  totalBalance: number;\n  summary: FinancialSummary;\n  selectAccount: (account: Account | null) => void;\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\n  changePeriod: (period: TimePeriod) => void;\n  addTag: (transactionId: string, tag: string) => void;\n  removeTag: (transactionId: string, tag: string) => void;\n  applyFilters: (filters: FilterOptions) => void;\n  viewAccountDetail: (account: Account) => void;\n}\n\nconst FinancialContext = createContext<FinancialContextType | null>(null);\n\nexport const FinancialProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n\n  const totalBalance = useMemo(\n    () => state.accounts.reduce((sum, account) => sum + account.balance, 0),\n    [state.accounts]\n  );\n\n  const summary = useMemo((): FinancialSummary => {\n    const today = new Date();\n    let startDate: Date;\n    let periodLabel: string;\n\n    // Calculate period boundaries based on selectedPeriod\n    switch (state.selectedPeriod) {\n      case 'day':\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        periodLabel = 'daily';\n        break;\n      case 'week':\n        const dayOfWeek = today.getDay();\n        const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract);\n        periodLabel = 'weekly';\n        break;\n      case 'month':\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        periodLabel = 'monthly';\n        break;\n      case 'quarter':\n        const currentQuarter = Math.floor(today.getMonth() / 3);\n        startDate = new Date(today.getFullYear(), currentQuarter * 3, 1);\n        periodLabel = 'quarterly';\n        break;\n      case 'year':\n        startDate = new Date(today.getFullYear(), 0, 1);\n        periodLabel = 'yearly';\n        break;\n      case '5year':\n        startDate = new Date(today.getFullYear() - 5, 0, 1);\n        periodLabel = '5-year';\n        break;\n      default:\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        periodLabel = 'monthly';\n    }\n\n    const endDate = new Date(); // Today\n    \n    // Filter transactions for the selected period\n    const periodTransactions = state.transactions.filter((txn) => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= startDate && txnDate <= endDate;\n    });\n\n    console.log(`=== ${periodLabel.toUpperCase()} SUMMARY ===`);\n    console.log(`Period: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);\n    console.log(`Transactions found: ${periodTransactions.length}`);\n\n    const periodIncome = periodTransactions\n      .filter((txn) => txn.amount > 0)\n      .reduce((sum, txn) => sum + txn.amount, 0);\n\n    const periodExpenses = Math.abs(\n      periodTransactions\n        .filter((txn) => txn.amount < 0)\n        .reduce((sum, txn) => sum + txn.amount, 0)\n    );\n\n    console.log(`${periodLabel} income:`, periodIncome);\n    console.log(`${periodLabel} expenses:`, periodExpenses);\n\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n\n    // Calculate previous period for comparison\n    let prevStartDate: Date;\n    switch (state.selectedPeriod) {\n      case 'month':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        break;\n      case 'quarter':\n        const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\n        prevStartDate = prevQuarter >= 0 \n          ? new Date(today.getFullYear(), prevQuarter * 3, 1)\n          : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\n        break;\n      case 'year':\n        prevStartDate = new Date(today.getFullYear() - 1, 0, 1);\n        break;\n      default:\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    }\n\n    const prevEndDate = new Date(startDate.getTime() - 1); // Day before current period starts\n    \n    const prevPeriodTransactions = state.transactions.filter((txn) => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= prevStartDate && txnDate <= prevEndDate;\n    });\n\n    const prevPeriodIncome = prevPeriodTransactions\n      .filter((txn) => txn.amount > 0)\n      .reduce((sum, txn) => sum + txn.amount, 0);\n\n    const prevPeriodExpenses = Math.abs(\n      prevPeriodTransactions\n        .filter((txn) => txn.amount < 0)\n        .reduce((sum, txn) => sum + txn.amount, 0)\n    );\n\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(periodIncome * 100) / 100,\n      monthlyExpenses: Math.round(periodExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\n      savingsRate: Math.max(0, savingsRate),\n      // Add comparison data for trends\n      previousPeriodIncome: prevPeriodIncome,\n      previousPeriodExpenses: prevPeriodExpenses,\n      periodLabel,\n    };\n  }, [state.transactions, totalBalance, state.selectedPeriod]);\n\n  const selectAccount = (account: Account | null) => {\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\n  };\n\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\n  };\n\n  const changePeriod = (period: TimePeriod) => {\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\n  };\n\n  const addTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\n  };\n\n  const removeTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\n  };\n\n  const applyFilters = (filters: FilterOptions) => {\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\n  };\n\n  const viewAccountDetail = (account: Account) => {\n    dispatch({ type: 'VIEW_ACCOUNT_DETAIL', payload: account });\n  };\n\n  const value: FinancialContextType = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail,\n  };\n\n  return (\n    <FinancialContext.Provider value={value}>\n      {children}\n    </FinancialContext.Provider>\n  );\n};\n\nexport const useFinancial = (): FinancialContextType => {\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}