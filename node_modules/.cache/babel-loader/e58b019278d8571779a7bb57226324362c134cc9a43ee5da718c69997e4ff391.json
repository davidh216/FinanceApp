{"ast":null,"code":"// src/constants/financial.ts\n\nexport const TAG_CATEGORIES = {\n  'Food & Dining': {\n    name: 'Food & Dining',\n    color: 'bg-green-100 text-green-800',\n    icon: '🍔',\n    isSystemTag: true\n  },\n  Groceries: {\n    name: 'Groceries',\n    color: 'bg-emerald-100 text-emerald-800',\n    icon: '🛒',\n    parentCategory: 'Food & Dining',\n    isSystemTag: true\n  },\n  Transportation: {\n    name: 'Transportation',\n    color: 'bg-blue-100 text-blue-800',\n    icon: '⛽',\n    isSystemTag: true\n  },\n  Shopping: {\n    name: 'Shopping',\n    color: 'bg-purple-100 text-purple-800',\n    icon: '🛍️',\n    isSystemTag: true\n  },\n  Entertainment: {\n    name: 'Entertainment',\n    color: 'bg-pink-100 text-pink-800',\n    icon: '🎬',\n    isSystemTag: true\n  },\n  Utilities: {\n    name: 'Utilities',\n    color: 'bg-orange-100 text-orange-800',\n    icon: '🏠',\n    isSystemTag: true\n  },\n  Healthcare: {\n    name: 'Healthcare',\n    color: 'bg-red-100 text-red-800',\n    icon: '🏥',\n    isSystemTag: true\n  },\n  Business: {\n    name: 'Business',\n    color: 'bg-gray-100 text-gray-800',\n    icon: '💼',\n    isSystemTag: true\n  },\n  Income: {\n    name: 'Income',\n    color: 'bg-teal-100 text-teal-800',\n    icon: '💰',\n    isSystemTag: true\n  },\n  Travel: {\n    name: 'Travel',\n    color: 'bg-indigo-100 text-indigo-800',\n    icon: '✈️',\n    isSystemTag: true\n  },\n  Subscriptions: {\n    name: 'Subscriptions',\n    color: 'bg-yellow-100 text-yellow-800',\n    icon: '📱',\n    isSystemTag: true\n  },\n  Other: {\n    name: 'Other',\n    color: 'bg-slate-100 text-slate-800',\n    icon: '📝',\n    isSystemTag: true\n  }\n};\nexport const MERCHANT_PATTERNS = {\n  AMAZON: {\n    cleanName: 'Amazon',\n    logo: '📦',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  EBAY: {\n    cleanName: 'eBay',\n    logo: '🏷️',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  ETSY: {\n    cleanName: 'Etsy',\n    logo: '🎨',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  STARBUCKS: {\n    cleanName: 'Starbucks',\n    logo: '☕',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  MCDONALD: {\n    cleanName: \"McDonald's\",\n    logo: '🍟',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  SUBWAY: {\n    cleanName: 'Subway',\n    logo: '🥪',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  CHIPOTLE: {\n    cleanName: 'Chipotle',\n    logo: '🌯',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  DOORDASH: {\n    cleanName: 'DoorDash',\n    logo: '🚚',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  'UBER EATS': {\n    cleanName: 'Uber Eats',\n    logo: '🍽️',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  KROGER: {\n    cleanName: 'Kroger',\n    logo: '🛒',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  WALMART: {\n    cleanName: 'Walmart',\n    logo: '🏪',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  TARGET: {\n    cleanName: 'Target',\n    logo: '🎯',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  COSTCO: {\n    cleanName: 'Costco',\n    logo: '📦',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  'WHOLE FOODS': {\n    cleanName: 'Whole Foods',\n    logo: '🥬',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  SHELL: {\n    cleanName: 'Shell',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  EXXON: {\n    cleanName: 'ExxonMobil',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  BP: {\n    cleanName: 'BP',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  UBER: {\n    cleanName: 'Uber',\n    logo: '🚗',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  LYFT: {\n    cleanName: 'Lyft',\n    logo: '🚙',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  NETFLIX: {\n    cleanName: 'Netflix',\n    logo: '🎬',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95\n  },\n  SPOTIFY: {\n    cleanName: 'Spotify',\n    logo: '🎵',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95\n  },\n  APPLE: {\n    cleanName: 'Apple',\n    logo: '🍎',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9\n  },\n  GOOGLE: {\n    cleanName: 'Google',\n    logo: '🔍',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.85\n  },\n  MICROSOFT: {\n    cleanName: 'Microsoft',\n    logo: '💻',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9\n  },\n  VERIZON: {\n    cleanName: 'Verizon',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  ATT: {\n    cleanName: 'AT&T',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  COMCAST: {\n    cleanName: 'Comcast',\n    logo: '📺',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  CVS: {\n    cleanName: 'CVS Pharmacy',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95\n  },\n  WALGREENS: {\n    cleanName: 'Walgreens',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95\n  },\n  PAYROLL: {\n    cleanName: 'Salary',\n    logo: '💰',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  },\n  FREELANCE: {\n    cleanName: 'Freelance Payment',\n    logo: '💼',\n    suggestedCategory: 'Income',\n    confidence: 0.9\n  },\n  DIVIDEND: {\n    cleanName: 'Investment Dividend',\n    logo: '📈',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  },\n  INTEREST: {\n    cleanName: 'Interest Payment',\n    logo: '🏦',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  }\n};\n\n// Mock data generator\nexport const generateMockTransactions = (accountId, count = 10) => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions = [];\n  for (let i = 0; i < count; i++) {\n    const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n    const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n    const isIncome = Math.random() < 0.2; // 20% chance of income\n    const amount = isIncome ? Math.random() * 2000 + 1000 // Income: $1000-$3000\n    : -(Math.random() * 200 + 10); // Expense: $10-$210\n\n    const date = new Date();\n    date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n    transactions.push({\n      id: `txn_${accountId}_${i}`,\n      accountId,\n      description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      amount: Math.round(amount * 100) / 100,\n      date: date.toISOString().split('T')[0],\n      category: merchantInfo.suggestedCategory,\n      tags: Math.random() > 0.5 ? [merchantInfo.suggestedCategory] : [],\n      pending: Math.random() < 0.1,\n      cleanMerchant: {\n        ...merchantInfo,\n        original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    });\n  }\n  return transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\nexport const MOCK_ACCOUNTS = [{\n  id: 'acc_checking',\n  name: 'Primary Checking',\n  type: 'CHECKING',\n  balance: 2543.67,\n  accountNumber: '****1234',\n  bankName: 'Chase Bank',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateMockTransactions('acc_checking', 15)\n}, {\n  id: 'acc_savings',\n  name: 'High Yield Savings',\n  type: 'SAVINGS',\n  balance: 12750.0,\n  accountNumber: '****5678',\n  bankName: 'Ally Bank',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateMockTransactions('acc_savings', 5)\n}, {\n  id: 'acc_credit',\n  name: 'Rewards Credit Card',\n  type: 'CREDIT',\n  balance: -1247.82,\n  accountNumber: '****9012',\n  bankName: 'Chase Bank',\n  limit: 5000,\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateMockTransactions('acc_credit', 12)\n}];\nexport const DEFAULT_PERIODS = ['month', 'quarter', 'year'];\nexport const VALIDATION_RULES = {\n  ACCOUNT_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 50\n  },\n  TRANSACTION_DESCRIPTION: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 255\n  },\n  TAG_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 30,\n    PATTERN: /^[a-zA-Z0-9\\s&-]+$/\n  },\n  AMOUNT: {\n    MIN: -999999.99,\n    MAX: 999999.99\n  }\n};\nexport const ERROR_MESSAGES = {\n  BANK_CONNECTION_FAILED: 'Unable to connect to your bank. Please check your credentials.',\n  INVALID_CREDENTIALS: 'Invalid username or password.',\n  TRANSACTION_SYNC_ERROR: 'Failed to sync transactions. Please try again.',\n  ACCOUNT_NOT_FOUND: 'Account not found.',\n  INSUFFICIENT_PERMISSIONS: \"You don't have permission to perform this action.\",\n  RATE_LIMIT_EXCEEDED: 'Too many requests. Please wait and try again.',\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.'\n};","map":{"version":3,"names":["TAG_CATEGORIES","name","color","icon","isSystemTag","Groceries","parentCategory","Transportation","Shopping","Entertainment","Utilities","Healthcare","Business","Income","Travel","Subscriptions","Other","MERCHANT_PATTERNS","AMAZON","cleanName","logo","suggestedCategory","confidence","EBAY","ETSY","STARBUCKS","MCDONALD","SUBWAY","CHIPOTLE","DOORDASH","KROGER","WALMART","TARGET","COSTCO","SHELL","EXXON","BP","UBER","LYFT","NETFLIX","SPOTIFY","APPLE","GOOGLE","MICROSOFT","VERIZON","ATT","COMCAST","CVS","WALGREENS","PAYROLL","FREELANCE","DIVIDEND","INTEREST","generateMockTransactions","accountId","count","merchants","Object","keys","transactions","i","merchantKey","Math","floor","random","length","merchantInfo","isIncome","amount","date","Date","setDate","getDate","push","id","description","round","toISOString","split","category","tags","pending","cleanMerchant","original","createdAt","updatedAt","sort","a","b","getTime","MOCK_ACCOUNTS","type","balance","accountNumber","bankName","isActive","limit","DEFAULT_PERIODS","VALIDATION_RULES","ACCOUNT_NAME","MIN_LENGTH","MAX_LENGTH","TRANSACTION_DESCRIPTION","TAG_NAME","PATTERN","AMOUNT","MIN","MAX","ERROR_MESSAGES","BANK_CONNECTION_FAILED","INVALID_CREDENTIALS","TRANSACTION_SYNC_ERROR","ACCOUNT_NOT_FOUND","INSUFFICIENT_PERMISSIONS","RATE_LIMIT_EXCEEDED","VALIDATION_ERROR","NETWORK_ERROR","UNKNOWN_ERROR"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/constants/financial.ts"],"sourcesContent":["// src/constants/financial.ts\nimport {\n  TagCategory,\n  MerchantInfo,\n  Account,\n  Transaction,\n} from '../types/financial';\n\nexport const TAG_CATEGORIES: Record<string, TagCategory> = {\n  'Food & Dining': {\n    name: 'Food & Dining',\n    color: 'bg-green-100 text-green-800',\n    icon: '🍔',\n    isSystemTag: true,\n  },\n  Groceries: {\n    name: 'Groceries',\n    color: 'bg-emerald-100 text-emerald-800',\n    icon: '🛒',\n    parentCategory: 'Food & Dining',\n    isSystemTag: true,\n  },\n  Transportation: {\n    name: 'Transportation',\n    color: 'bg-blue-100 text-blue-800',\n    icon: '⛽',\n    isSystemTag: true,\n  },\n  Shopping: {\n    name: 'Shopping',\n    color: 'bg-purple-100 text-purple-800',\n    icon: '🛍️',\n    isSystemTag: true,\n  },\n  Entertainment: {\n    name: 'Entertainment',\n    color: 'bg-pink-100 text-pink-800',\n    icon: '🎬',\n    isSystemTag: true,\n  },\n  Utilities: {\n    name: 'Utilities',\n    color: 'bg-orange-100 text-orange-800',\n    icon: '🏠',\n    isSystemTag: true,\n  },\n  Healthcare: {\n    name: 'Healthcare',\n    color: 'bg-red-100 text-red-800',\n    icon: '🏥',\n    isSystemTag: true,\n  },\n  Business: {\n    name: 'Business',\n    color: 'bg-gray-100 text-gray-800',\n    icon: '💼',\n    isSystemTag: true,\n  },\n  Income: {\n    name: 'Income',\n    color: 'bg-teal-100 text-teal-800',\n    icon: '💰',\n    isSystemTag: true,\n  },\n  Travel: {\n    name: 'Travel',\n    color: 'bg-indigo-100 text-indigo-800',\n    icon: '✈️',\n    isSystemTag: true,\n  },\n  Subscriptions: {\n    name: 'Subscriptions',\n    color: 'bg-yellow-100 text-yellow-800',\n    icon: '📱',\n    isSystemTag: true,\n  },\n  Other: {\n    name: 'Other',\n    color: 'bg-slate-100 text-slate-800',\n    icon: '📝',\n    isSystemTag: true,\n  },\n};\n\nexport const MERCHANT_PATTERNS: Record<\n  string,\n  Omit<MerchantInfo, 'original'>\n> = {\n  AMAZON: {\n    cleanName: 'Amazon',\n    logo: '📦',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  EBAY: {\n    cleanName: 'eBay',\n    logo: '🏷️',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  ETSY: {\n    cleanName: 'Etsy',\n    logo: '🎨',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  STARBUCKS: {\n    cleanName: 'Starbucks',\n    logo: '☕',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  MCDONALD: {\n    cleanName: \"McDonald's\",\n    logo: '🍟',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  SUBWAY: {\n    cleanName: 'Subway',\n    logo: '🥪',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  CHIPOTLE: {\n    cleanName: 'Chipotle',\n    logo: '🌯',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  DOORDASH: {\n    cleanName: 'DoorDash',\n    logo: '🚚',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  'UBER EATS': {\n    cleanName: 'Uber Eats',\n    logo: '🍽️',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  KROGER: {\n    cleanName: 'Kroger',\n    logo: '🛒',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  WALMART: {\n    cleanName: 'Walmart',\n    logo: '🏪',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  TARGET: {\n    cleanName: 'Target',\n    logo: '🎯',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  COSTCO: {\n    cleanName: 'Costco',\n    logo: '📦',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  'WHOLE FOODS': {\n    cleanName: 'Whole Foods',\n    logo: '🥬',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  SHELL: {\n    cleanName: 'Shell',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  EXXON: {\n    cleanName: 'ExxonMobil',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  BP: {\n    cleanName: 'BP',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  UBER: {\n    cleanName: 'Uber',\n    logo: '🚗',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  LYFT: {\n    cleanName: 'Lyft',\n    logo: '🚙',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  NETFLIX: {\n    cleanName: 'Netflix',\n    logo: '🎬',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95,\n  },\n  SPOTIFY: {\n    cleanName: 'Spotify',\n    logo: '🎵',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95,\n  },\n  APPLE: {\n    cleanName: 'Apple',\n    logo: '🍎',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9,\n  },\n  GOOGLE: {\n    cleanName: 'Google',\n    logo: '🔍',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.85,\n  },\n  MICROSOFT: {\n    cleanName: 'Microsoft',\n    logo: '💻',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9,\n  },\n  VERIZON: {\n    cleanName: 'Verizon',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  ATT: {\n    cleanName: 'AT&T',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  COMCAST: {\n    cleanName: 'Comcast',\n    logo: '📺',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  CVS: {\n    cleanName: 'CVS Pharmacy',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95,\n  },\n  WALGREENS: {\n    cleanName: 'Walgreens',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95,\n  },\n  PAYROLL: {\n    cleanName: 'Salary',\n    logo: '💰',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n  FREELANCE: {\n    cleanName: 'Freelance Payment',\n    logo: '💼',\n    suggestedCategory: 'Income',\n    confidence: 0.9,\n  },\n  DIVIDEND: {\n    cleanName: 'Investment Dividend',\n    logo: '📈',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n  INTEREST: {\n    cleanName: 'Interest Payment',\n    logo: '🏦',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n};\n\n// Mock data generator\nexport const generateMockTransactions = (\n  accountId: string,\n  count: number = 10\n): Transaction[] => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions: Transaction[] = [];\n\n  for (let i = 0; i < count; i++) {\n    const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n    const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n    const isIncome = Math.random() < 0.2; // 20% chance of income\n    const amount = isIncome\n      ? Math.random() * 2000 + 1000 // Income: $1000-$3000\n      : -(Math.random() * 200 + 10); // Expense: $10-$210\n\n    const date = new Date();\n    date.setDate(date.getDate() - Math.floor(Math.random() * 30));\n\n    transactions.push({\n      id: `txn_${accountId}_${i}`,\n      accountId,\n      description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      amount: Math.round(amount * 100) / 100,\n      date: date.toISOString().split('T')[0],\n      category: merchantInfo.suggestedCategory,\n      tags: Math.random() > 0.5 ? [merchantInfo.suggestedCategory] : [],\n      pending: Math.random() < 0.1,\n      cleanMerchant: {\n        ...merchantInfo,\n        original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    });\n  }\n\n  return transactions.sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n};\n\nexport const MOCK_ACCOUNTS: Account[] = [\n  {\n    id: 'acc_checking',\n    name: 'Primary Checking',\n    type: 'CHECKING',\n    balance: 2543.67,\n    accountNumber: '****1234',\n    bankName: 'Chase Bank',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateMockTransactions('acc_checking', 15),\n  },\n  {\n    id: 'acc_savings',\n    name: 'High Yield Savings',\n    type: 'SAVINGS',\n    balance: 12750.0,\n    accountNumber: '****5678',\n    bankName: 'Ally Bank',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateMockTransactions('acc_savings', 5),\n  },\n  {\n    id: 'acc_credit',\n    name: 'Rewards Credit Card',\n    type: 'CREDIT',\n    balance: -1247.82,\n    accountNumber: '****9012',\n    bankName: 'Chase Bank',\n    limit: 5000,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateMockTransactions('acc_credit', 12),\n  },\n];\n\nexport const DEFAULT_PERIODS = ['month', 'quarter', 'year'] as const;\n\nexport const VALIDATION_RULES = {\n  ACCOUNT_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 50,\n  },\n  TRANSACTION_DESCRIPTION: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 255,\n  },\n  TAG_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 30,\n    PATTERN: /^[a-zA-Z0-9\\s&-]+$/,\n  },\n  AMOUNT: {\n    MIN: -999999.99,\n    MAX: 999999.99,\n  },\n};\n\nexport const ERROR_MESSAGES = {\n  BANK_CONNECTION_FAILED:\n    'Unable to connect to your bank. Please check your credentials.',\n  INVALID_CREDENTIALS: 'Invalid username or password.',\n  TRANSACTION_SYNC_ERROR: 'Failed to sync transactions. Please try again.',\n  ACCOUNT_NOT_FOUND: 'Account not found.',\n  INSUFFICIENT_PERMISSIONS: \"You don't have permission to perform this action.\",\n  RATE_LIMIT_EXCEEDED: 'Too many requests. Please wait and try again.',\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.',\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}