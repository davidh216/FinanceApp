{"ast":null,"code":"import{format,subDays,subWeeks,subMonths,subQuarters,subYears,startOfDay,endOfDay,startOfWeek,endOfWeek,startOfMonth,endOfMonth,startOfQuarter,endOfQuarter,startOfYear,endOfYear}from'date-fns';// Color palette for charts\nexport const CHART_COLORS={primary:'#3B82F6',secondary:'#10B981',accent:'#F59E0B',danger:'#EF4444',warning:'#F97316',info:'#06B6D4',success:'#22C55E',purple:'#8B5CF6',pink:'#EC4899',gray:'#6B7280',lightGray:'#E5E7EB',darkGray:'#374151',// Additional colors for charts\nblue:'#3B82F6',red:'#EF4444',orange:'#F97316',green:'#22C55E'};// Generate gradient colors for charts\nexport const generateGradientColors=function(baseColor){let opacity=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0.1;return`${baseColor}${Math.floor(opacity*255).toString(16).padStart(2,'0')}`;};// Process transactions for balance trend chart\nexport const processBalanceTrendData=function(transactions,accounts,period){let dataPoints=arguments.length>3&&arguments[3]!==undefined?arguments[3]:12;const dataPointsArray=[];const totalBalance=accounts.reduce((sum,account)=>sum+account.balance,0);// Get date range based on period\nconst endDate=new Date();let startDate;switch(period){case'day':startDate=subDays(endDate,dataPoints-1);break;case'week':startDate=subWeeks(endDate,dataPoints-1);break;case'month':startDate=subMonths(endDate,dataPoints-1);break;case'quarter':startDate=subQuarters(endDate,dataPoints-1);break;case'year':startDate=subYears(endDate,dataPoints-1);break;default:startDate=subMonths(endDate,dataPoints-1);}// Generate data points\nfor(let i=0;i<dataPoints;i++){let currentDate;// Calculate the correct date based on period\nswitch(period){case'day':currentDate=new Date(startDate);currentDate.setDate(startDate.getDate()+i);break;case'week':currentDate=new Date(startDate);currentDate.setDate(startDate.getDate()+i*7);break;case'month':currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i);break;case'quarter':currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i*3);break;case'year':currentDate=new Date(startDate);currentDate.setFullYear(startDate.getFullYear()+i);break;default:currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i);}// Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\nconst balanceChange=transactions.filter(t=>new Date(t.date)<=currentDate).reduce((sum,t)=>sum+t.amount,0);const balance=totalBalance+balanceChange;dataPointsArray.push({label:format(currentDate,getDateFormat(period)),value:balance,date:currentDate.toISOString()});}return dataPointsArray;};// Process transactions for income vs expenses chart\nexport const processIncomeExpenseData=function(transactions,period){let dataPoints=arguments.length>2&&arguments[2]!==undefined?arguments[2]:12;const incomeData=[];const expenseData=[];const endDate=new Date();let startDate;switch(period){case'day':startDate=subDays(endDate,dataPoints-1);break;case'week':startDate=subWeeks(endDate,dataPoints-1);break;case'month':startDate=subMonths(endDate,dataPoints-1);break;case'quarter':startDate=subQuarters(endDate,dataPoints-1);break;case'year':startDate=subYears(endDate,dataPoints-1);break;default:startDate=subMonths(endDate,dataPoints-1);}for(let i=0;i<dataPoints;i++){let currentDate;// Calculate the correct date based on period\nswitch(period){case'day':currentDate=new Date(startDate);currentDate.setDate(startDate.getDate()+i);break;case'week':currentDate=new Date(startDate);currentDate.setDate(startDate.getDate()+i*7);break;case'month':currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i);break;case'quarter':currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i*3);break;case'year':currentDate=new Date(startDate);currentDate.setFullYear(startDate.getFullYear()+i);break;default:currentDate=new Date(startDate);currentDate.setMonth(startDate.getMonth()+i);}const periodStart=getPeriodStart(currentDate,period);const periodEnd=getPeriodEnd(currentDate,period);const periodTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return transactionDate>=periodStart&&transactionDate<=periodEnd;});const income=periodTransactions.filter(t=>t.amount>0).reduce((sum,t)=>sum+t.amount,0);const expenses=Math.abs(periodTransactions.filter(t=>t.amount<0).reduce((sum,t)=>sum+t.amount,0));incomeData.push({label:format(currentDate,getDateFormat(period)),value:income,date:currentDate.toISOString()});expenseData.push({label:format(currentDate,getDateFormat(period)),value:expenses,date:currentDate.toISOString()});}return{income:incomeData,expenses:expenseData};};// Process transactions for category spending breakdown\nexport const processCategorySpendingData=(transactions,period)=>{const categoryMap=new Map();// Get date range based on period - same logic as other charts\nconst endDate=new Date();let startDate;switch(period){case'day':startDate=subDays(endDate,30);// Last 30 days for daily view\nbreak;case'week':startDate=subWeeks(endDate,12);// Last 12 weeks\nbreak;case'month':startDate=subMonths(endDate,12);// Last 12 months\nbreak;case'quarter':startDate=subQuarters(endDate,4);// Last 4 quarters\nbreak;case'year':startDate=subYears(endDate,5);// Last 5 years\nbreak;default:startDate=subMonths(endDate,12);}// Filter transactions for the period\nconst periodTransactions=transactions.filter(t=>{const transactionDate=new Date(t.date);return transactionDate>=startDate&&transactionDate<=endDate&&t.amount<0;});// Group by category\nperiodTransactions.forEach(transaction=>{const category=transaction.category||'Uncategorized';const amount=Math.abs(transaction.amount);categoryMap.set(category,(categoryMap.get(category)||0)+amount);});// Convert to chart data points\nconst dataPoints=Array.from(categoryMap.entries()).map(_ref=>{let[category,amount]=_ref;return{label:category,value:amount,date:new Date().toISOString()};}).sort((a,b)=>b.value-a.value).slice(0,8);// Top 8 categories\nreturn dataPoints;};// Process data for savings rate progress chart\nexport const processSavingsRateData=(summary,period)=>{const currentSavingsRate=summary.savingsRate*100;const targetSavingsRate=20;// 20% target\nreturn[{label:'Current',value:currentSavingsRate,date:new Date().toISOString()},{label:'Target',value:targetSavingsRate,date:new Date().toISOString()}];};// Helper functions\nconst getDateFormat=period=>{switch(period){case'day':return'MMM dd';case'week':return'MMM dd';case'month':return'MMM yyyy';case'quarter':return'Qo yyyy';case'year':return'yyyy';default:return'MMM dd';}};const getPeriodStart=(date,period)=>{switch(period){case'day':return startOfDay(date);case'week':return startOfWeek(date);case'month':return startOfMonth(date);case'quarter':return startOfQuarter(date);case'year':return startOfYear(date);default:return startOfMonth(date);}};const getPeriodEnd=(date,period)=>{switch(period){case'day':return endOfDay(date);case'week':return endOfWeek(date);case'month':return endOfMonth(date);case'quarter':return endOfQuarter(date);case'year':return endOfYear(date);default:return endOfMonth(date);}};// Default chart options\nexport const getDefaultChartOptions=type=>{const baseOptions={responsive:true,maintainAspectRatio:false,plugins:{legend:{position:'bottom',labels:{usePointStyle:true,padding:20,font:{size:12}}},tooltip:{backgroundColor:'rgba(0, 0, 0, 0.8)',titleColor:'#fff',bodyColor:'#fff',borderColor:'rgba(255, 255, 255, 0.1)',borderWidth:1,cornerRadius:8,displayColors:true,callbacks:{label:function(context){const label=context.dataset.label||'';const value=context.parsed.y||context.parsed;return`${label}: $${value.toLocaleString()}`;}}}}};switch(type){case'line':return{...baseOptions,scales:{x:{grid:{display:false},ticks:{maxRotation:45}},y:{beginAtZero:true,grid:{color:'rgba(0, 0, 0, 0.1)'},ticks:{callback:function(value){return'$'+value.toLocaleString();}}}},elements:{point:{radius:4,hoverRadius:6},line:{tension:0.4}}};case'bar':return{...baseOptions,scales:{x:{grid:{display:false}},y:{beginAtZero:true,grid:{color:'rgba(0, 0, 0, 0.1)'},ticks:{callback:function(value){return'$'+value.toLocaleString();}}}}};case'doughnut':case'pie':return{...baseOptions,cutout:type==='doughnut'?'60%':undefined,plugins:{...baseOptions.plugins,legend:{...baseOptions.plugins.legend,position:'right'}}};default:return baseOptions;}};","map":{"version":3,"names":["format","subDays","subWeeks","subMonths","subQuarters","subYears","startOfDay","endOfDay","startOfWeek","endOfWeek","startOfMonth","endOfMonth","startOfQuarter","endOfQuarter","startOfYear","endOfYear","CHART_COLORS","primary","secondary","accent","danger","warning","info","success","purple","pink","gray","lightGray","darkGray","blue","red","orange","green","generateGradientColors","baseColor","opacity","arguments","length","undefined","Math","floor","toString","padStart","processBalanceTrendData","transactions","accounts","period","dataPoints","dataPointsArray","totalBalance","reduce","sum","account","balance","endDate","Date","startDate","i","currentDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","balanceChange","filter","t","date","amount","push","label","getDateFormat","value","toISOString","processIncomeExpenseData","incomeData","expenseData","periodStart","getPeriodStart","periodEnd","getPeriodEnd","periodTransactions","transactionDate","income","expenses","abs","processCategorySpendingData","categoryMap","Map","forEach","transaction","category","set","get","Array","from","entries","map","_ref","sort","a","b","slice","processSavingsRateData","summary","currentSavingsRate","savingsRate","targetSavingsRate","getDefaultChartOptions","type","baseOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","usePointStyle","padding","font","size","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","cornerRadius","displayColors","callbacks","context","dataset","parsed","y","toLocaleString","scales","x","grid","display","ticks","maxRotation","beginAtZero","color","callback","elements","point","radius","hoverRadius","line","tension","cutout"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/chartUtils.ts"],"sourcesContent":["import { Transaction, Account, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { format, subDays, subWeeks, subMonths, subQuarters, subYears, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, startOfQuarter, endOfQuarter, startOfYear, endOfYear } from 'date-fns';\r\n\r\nexport interface ChartDataPoint {\r\n  label: string;\r\n  value: number;\r\n  date: string;\r\n}\r\n\r\nexport interface ChartDataset {\r\n  label: string;\r\n  data: number[];\r\n  backgroundColor?: string | string[];\r\n  borderColor?: string | string[];\r\n  borderWidth?: number;\r\n  fill?: boolean;\r\n  tension?: number;\r\n}\r\n\r\nexport interface ChartConfig {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: ChartDataset[];\r\n  };\r\n  options: any;\r\n}\r\n\r\n// Color palette for charts\r\nexport const CHART_COLORS = {\r\n  primary: '#3B82F6',\r\n  secondary: '#10B981',\r\n  accent: '#F59E0B',\r\n  danger: '#EF4444',\r\n  warning: '#F97316',\r\n  info: '#06B6D4',\r\n  success: '#22C55E',\r\n  purple: '#8B5CF6',\r\n  pink: '#EC4899',\r\n  gray: '#6B7280',\r\n  lightGray: '#E5E7EB',\r\n  darkGray: '#374151',\r\n  // Additional colors for charts\r\n  blue: '#3B82F6',\r\n  red: '#EF4444',\r\n  orange: '#F97316',\r\n  green: '#22C55E',\r\n};\r\n\r\n// Generate gradient colors for charts\r\nexport const generateGradientColors = (baseColor: string, opacity: number = 0.1): string => {\r\n  return `${baseColor}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// Process transactions for balance trend chart\r\nexport const processBalanceTrendData = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): ChartDataPoint[] => {\r\n  const dataPointsArray: ChartDataPoint[] = [];\r\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n  \r\n  // Get date range based on period\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    // Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\r\n    const balanceChange = transactions\r\n      .filter(t => new Date(t.date) <= currentDate)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const balance = totalBalance + balanceChange;\r\n    \r\n    dataPointsArray.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: balance,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return dataPointsArray;\r\n};\r\n\r\n// Process transactions for income vs expenses chart\r\nexport const processIncomeExpenseData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): { income: ChartDataPoint[], expenses: ChartDataPoint[] } => {\r\n  const incomeData: ChartDataPoint[] = [];\r\n  const expenseData: ChartDataPoint[] = [];\r\n  \r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    const periodStart = getPeriodStart(currentDate, period);\r\n    const periodEnd = getPeriodEnd(currentDate, period);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.date);\r\n      return transactionDate >= periodStart && transactionDate <= periodEnd;\r\n    });\r\n    \r\n    const income = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const expenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    incomeData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: income,\r\n      date: currentDate.toISOString(),\r\n    });\r\n    \r\n    expenseData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: expenses,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return { income: incomeData, expenses: expenseData };\r\n};\r\n\r\n// Process transactions for category spending breakdown\r\nexport const processCategorySpendingData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const categoryMap = new Map<string, number>();\r\n  \r\n  // Get date range based on period - same logic as other charts\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, 30); // Last 30 days for daily view\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, 12); // Last 12 weeks\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, 12); // Last 12 months\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, 4); // Last 4 quarters\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, 5); // Last 5 years\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, 12);\r\n  }\r\n\r\n  // Filter transactions for the period\r\n  const periodTransactions = transactions.filter(t => {\r\n    const transactionDate = new Date(t.date);\r\n    return transactionDate >= startDate && transactionDate <= endDate && t.amount < 0;\r\n  });\r\n\r\n  // Group by category\r\n  periodTransactions.forEach(transaction => {\r\n    const category = transaction.category || 'Uncategorized';\r\n    const amount = Math.abs(transaction.amount);\r\n    categoryMap.set(category, (categoryMap.get(category) || 0) + amount);\r\n  });\r\n\r\n  // Convert to chart data points\r\n  const dataPoints: ChartDataPoint[] = Array.from(categoryMap.entries())\r\n    .map(([category, amount]) => ({\r\n      label: category,\r\n      value: amount,\r\n      date: new Date().toISOString(),\r\n    }))\r\n    .sort((a, b) => b.value - a.value)\r\n    .slice(0, 8); // Top 8 categories\r\n\r\n  return dataPoints;\r\n};\r\n\r\n// Process data for savings rate progress chart\r\nexport const processSavingsRateData = (\r\n  summary: FinancialSummary,\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const currentSavingsRate = summary.savingsRate * 100;\r\n  const targetSavingsRate = 20; // 20% target\r\n  \r\n  return [\r\n    {\r\n      label: 'Current',\r\n      value: currentSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n    {\r\n      label: 'Target',\r\n      value: targetSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n  ];\r\n};\r\n\r\n// Helper functions\r\nconst getDateFormat = (period: TimePeriod): string => {\r\n  switch (period) {\r\n    case 'day':\r\n      return 'MMM dd';\r\n    case 'week':\r\n      return 'MMM dd';\r\n    case 'month':\r\n      return 'MMM yyyy';\r\n    case 'quarter':\r\n      return 'Qo yyyy';\r\n    case 'year':\r\n      return 'yyyy';\r\n    default:\r\n      return 'MMM dd';\r\n  }\r\n};\r\n\r\nconst getPeriodStart = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return startOfDay(date);\r\n    case 'week':\r\n      return startOfWeek(date);\r\n    case 'month':\r\n      return startOfMonth(date);\r\n    case 'quarter':\r\n      return startOfQuarter(date);\r\n    case 'year':\r\n      return startOfYear(date);\r\n    default:\r\n      return startOfMonth(date);\r\n  }\r\n};\r\n\r\nconst getPeriodEnd = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return endOfDay(date);\r\n    case 'week':\r\n      return endOfWeek(date);\r\n    case 'month':\r\n      return endOfMonth(date);\r\n    case 'quarter':\r\n      return endOfQuarter(date);\r\n    case 'year':\r\n      return endOfYear(date);\r\n    default:\r\n      return endOfMonth(date);\r\n  }\r\n};\r\n\r\n// Default chart options\r\nexport const getDefaultChartOptions = (type: 'line' | 'bar' | 'doughnut' | 'pie') => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(255, 255, 255, 0.1)',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y || context.parsed;\r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  switch (type) {\r\n    case 'line':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 4,\r\n            hoverRadius: 6,\r\n          },\r\n          line: {\r\n            tension: 0.4,\r\n          },\r\n        },\r\n      };\r\n    case 'bar':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'doughnut':\r\n    case 'pie':\r\n      return {\r\n        ...baseOptions,\r\n        cutout: type === 'doughnut' ? '60%' : undefined,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            ...baseOptions.plugins.legend,\r\n            position: 'right' as const,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}