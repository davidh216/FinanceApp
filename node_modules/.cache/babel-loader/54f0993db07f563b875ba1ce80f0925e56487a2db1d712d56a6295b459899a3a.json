{"ast":null,"code":"import React,{createContext,useContext,useReducer,useMemo,useState}from'react';import{MOCK_ACCOUNTS}from'../constants/financial';import{calculateFinancialSummary}from'../utils/periodCalculations';import{updateTransactionTagsInAccounts,updateTransactionTagsInArray}from'../utils/transactionUtils';import{jsx as _jsx}from\"react/jsx-runtime\";const initialState={accounts:MOCK_ACCOUNTS,transactions:MOCK_ACCOUNTS.flatMap(acc=>acc.transactions||[]),selectedAccount:null,currentScreen:'dashboard',selectedPeriod:'month',isLoading:false,error:null,filters:{},sortBy:'date-desc'};const financialReducer=(state,action)=>{switch(action.type){case'VIEW_ACCOUNT_DETAIL':return{...state,selectedAccount:action.payload,currentScreen:'account-detail'};case'SET_LOADING':return{...state,isLoading:action.payload};case'SET_ERROR':return{...state,error:action.payload};case'SELECT_ACCOUNT':return{...state,selectedAccount:action.payload};case'CHANGE_SCREEN':return{...state,currentScreen:action.payload};case'CHANGE_PERIOD':return{...state,selectedPeriod:action.payload};case'ADD_TAG':return{...state,accounts:updateTransactionTagsInAccounts(state.accounts,action.payload.transactionId,action.payload.tag,'add'),transactions:updateTransactionTagsInArray(state.transactions,action.payload.transactionId,action.payload.tag,'add')};case'REMOVE_TAG':return{...state,accounts:updateTransactionTagsInAccounts(state.accounts,action.payload.transactionId,action.payload.tag,'remove'),transactions:updateTransactionTagsInArray(state.transactions,action.payload.transactionId,action.payload.tag,'remove')};case'CONNECT_ACCOUNT':return{...state,accounts:[...state.accounts,action.payload],transactions:[...state.transactions,...(action.payload.transactions||[])]};case'APPLY_FILTERS':return{...state,filters:action.payload};case'SET_CUSTOM_DATE_RANGE':return{...state,selectedPeriod:'custom',customDateRange:action.payload};default:return state;}};const FinancialContext=/*#__PURE__*/createContext(null);export const FinancialProvider=_ref=>{let{children,initialState:customInitialState}=_ref;const[state,dispatch]=useReducer(financialReducer,customInitialState||initialState);const[isPrivacyMode,setIsPrivacyMode]=useState(false);const[accountFilter,setAccountFilter]=useState('personal');const totalBalance=useMemo(()=>state.accounts.reduce((sum,account)=>sum+account.balance,0),[state.accounts]);const summary=useMemo(()=>{return calculateFinancialSummary(state.transactions,state.selectedPeriod,state.customDateRange,totalBalance);},[state.transactions,totalBalance,state.selectedPeriod,state.customDateRange]);const selectAccount=account=>{dispatch({type:'SELECT_ACCOUNT',payload:account});};const changeScreen=screen=>{dispatch({type:'CHANGE_SCREEN',payload:screen});};const changePeriod=period=>{dispatch({type:'CHANGE_PERIOD',payload:period});};const addTag=(transactionId,tag)=>{dispatch({type:'ADD_TAG',payload:{transactionId,tag}});};const removeTag=(transactionId,tag)=>{dispatch({type:'REMOVE_TAG',payload:{transactionId,tag}});};const applyFilters=filters=>{dispatch({type:'APPLY_FILTERS',payload:filters});};const viewAccountDetail=account=>{dispatch({type:'VIEW_ACCOUNT_DETAIL',payload:account});};const setCustomDateRange=(startDate,endDate,label)=>{dispatch({type:'SET_CUSTOM_DATE_RANGE',payload:{startDate,endDate,label:label||'Custom Range'}});};const togglePrivacyMode=()=>{setIsPrivacyMode(!isPrivacyMode);};const value={state,dispatch,totalBalance,summary,selectAccount,changeScreen,changePeriod,addTag,removeTag,applyFilters,viewAccountDetail,setCustomDateRange,isPrivacyMode,togglePrivacyMode,accountFilter,setAccountFilter};return/*#__PURE__*/_jsx(FinancialContext.Provider,{value:value,children:children});};export const useFinancial=()=>{const context=useContext(FinancialContext);if(!context){throw new Error('useFinancial must be used within a FinancialProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","useState","MOCK_ACCOUNTS","calculateFinancialSummary","updateTransactionTagsInAccounts","updateTransactionTagsInArray","jsx","_jsx","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","financialReducer","state","action","type","payload","transactionId","tag","customDateRange","FinancialContext","FinancialProvider","_ref","children","customInitialState","dispatch","isPrivacyMode","setIsPrivacyMode","accountFilter","setAccountFilter","totalBalance","reduce","sum","account","balance","summary","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","viewAccountDetail","setCustomDateRange","startDate","endDate","label","togglePrivacyMode","value","Provider","useFinancial","context","Error"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useReducer,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  FinancialState,\r\n  FinancialAction,\r\n  Account,\r\n  FilterOptions,\r\n  TimePeriod,\r\n  FinancialSummary,\r\n} from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\nimport { calculateFinancialSummary } from '../utils/periodCalculations';\r\nimport { updateTransactionTagsInAccounts, updateTransactionTagsInArray } from '../utils/transactionUtils';\r\n\r\nconst initialState: FinancialState = {\r\n  accounts: MOCK_ACCOUNTS,\r\n  transactions: MOCK_ACCOUNTS.flatMap((acc) => acc.transactions || []),\r\n  selectedAccount: null,\r\n  currentScreen: 'dashboard',\r\n  selectedPeriod: 'month',\r\n  isLoading: false,\r\n  error: null,\r\n  filters: {},\r\n  sortBy: 'date-desc',\r\n};\r\n\r\nconst financialReducer = (\r\n  state: FinancialState,\r\n  action: FinancialAction\r\n): FinancialState => {\r\n  switch (action.type) {\r\n    case 'VIEW_ACCOUNT_DETAIL':\r\n      return {\r\n        ...state,\r\n        selectedAccount: action.payload,\r\n        currentScreen: 'account-detail',\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SELECT_ACCOUNT':\r\n      return { ...state, selectedAccount: action.payload };\r\n    case 'CHANGE_SCREEN':\r\n      return { ...state, currentScreen: action.payload };\r\n    case 'CHANGE_PERIOD':\r\n      return { ...state, selectedPeriod: action.payload };\r\n    case 'ADD_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'add'),\r\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'add'),\r\n      };\r\n    case 'REMOVE_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'remove'),\r\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'remove'),\r\n      };\r\n    case 'CONNECT_ACCOUNT':\r\n      return {\r\n        ...state,\r\n        accounts: [...state.accounts, action.payload],\r\n        transactions: [\r\n          ...state.transactions,\r\n          ...(action.payload.transactions || []),\r\n        ],\r\n      };\r\n    case 'APPLY_FILTERS':\r\n      return { ...state, filters: action.payload };\r\n    case 'SET_CUSTOM_DATE_RANGE':\r\n      return {\r\n        ...state,\r\n        selectedPeriod: 'custom',\r\n        customDateRange: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface FinancialContextType {\r\n  state: FinancialState;\r\n  dispatch: React.Dispatch<FinancialAction>;\r\n  totalBalance: number;\r\n  summary: FinancialSummary;\r\n  selectAccount: (account: Account | null) => void;\r\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\r\n  changePeriod: (period: TimePeriod) => void;\r\n  addTag: (transactionId: string, tag: string) => void;\r\n  removeTag: (transactionId: string, tag: string) => void;\r\n  applyFilters: (filters: FilterOptions) => void;\r\n  viewAccountDetail: (account: Account) => void;\r\n  setCustomDateRange: (\r\n    startDate: string,\r\n    endDate: string,\r\n    label?: string\r\n  ) => void;\r\n  isPrivacyMode: boolean;\r\n  togglePrivacyMode: () => void;\r\n  accountFilter: 'both' | 'personal' | 'business';\r\n  setAccountFilter: (filter: 'both' | 'personal' | 'business') => void;\r\n}\r\n\r\nconst FinancialContext = createContext<FinancialContextType | null>(null);\r\n\r\ninterface FinancialProviderProps {\r\n  children: React.ReactNode;\r\n  initialState?: FinancialState;\r\n}\r\n\r\nexport const FinancialProvider: React.FC<FinancialProviderProps> = ({\r\n  children,\r\n  initialState: customInitialState,\r\n}) => {\r\n  const [state, dispatch] = useReducer(financialReducer, customInitialState || initialState);\r\n  const [isPrivacyMode, setIsPrivacyMode] = useState(false);\r\n  const [accountFilter, setAccountFilter] = useState<\r\n    'both' | 'personal' | 'business'\r\n  >('personal');\r\n\r\n  const totalBalance = useMemo(\r\n    () => state.accounts.reduce((sum, account) => sum + account.balance, 0),\r\n    [state.accounts]\r\n  );\r\n\r\n  const summary = useMemo((): FinancialSummary => {\r\n    return calculateFinancialSummary(\r\n      state.transactions,\r\n      state.selectedPeriod,\r\n      state.customDateRange,\r\n      totalBalance\r\n    );\r\n  }, [\r\n    state.transactions,\r\n    totalBalance,\r\n    state.selectedPeriod,\r\n    state.customDateRange,\r\n  ]);\r\n\r\n  const selectAccount = (account: Account | null) => {\r\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\r\n  };\r\n\r\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\r\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\r\n  };\r\n\r\n  const changePeriod = (period: TimePeriod) => {\r\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\r\n  };\r\n\r\n  const addTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const removeTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const applyFilters = (filters: FilterOptions) => {\r\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\r\n  };\r\n\r\n  const viewAccountDetail = (account: Account) => {\r\n    dispatch({ type: 'VIEW_ACCOUNT_DETAIL', payload: account });\r\n  };\r\n\r\n  const setCustomDateRange = (\r\n    startDate: string,\r\n    endDate: string,\r\n    label?: string\r\n  ) => {\r\n    dispatch({\r\n      type: 'SET_CUSTOM_DATE_RANGE',\r\n      payload: {\r\n        startDate,\r\n        endDate,\r\n        label: label || 'Custom Range',\r\n      },\r\n    });\r\n  };\r\n\r\n  const togglePrivacyMode = () => {\r\n    setIsPrivacyMode(!isPrivacyMode);\r\n  };\r\n\r\n  const value: FinancialContextType = {\r\n    state,\r\n    dispatch,\r\n    totalBalance,\r\n    summary,\r\n    selectAccount,\r\n    changeScreen,\r\n    changePeriod,\r\n    addTag,\r\n    removeTag,\r\n    applyFilters,\r\n    viewAccountDetail,\r\n    setCustomDateRange,\r\n    isPrivacyMode,\r\n    togglePrivacyMode,\r\n    accountFilter,\r\n    setAccountFilter,\r\n  };\r\n\r\n  return (\r\n    <FinancialContext.Provider value={value}>\r\n      {children}\r\n    </FinancialContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useFinancial = (): FinancialContextType => {\r\n  const context = useContext(FinancialContext);\r\n  if (!context) {\r\n    throw new Error('useFinancial must be used within a FinancialProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}