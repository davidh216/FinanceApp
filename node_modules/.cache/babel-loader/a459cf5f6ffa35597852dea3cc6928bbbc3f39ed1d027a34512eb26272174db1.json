{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dliz1\\\\Desktop\\\\FinanceApp\\\\src\\\\contexts\\\\FinancialContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useMemo, useState } from 'react';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc'\n};\n\n// Add account filter state\nconst [accountFilter, setAccountFilter] = useState('both');\nconst financialReducer = (state, action) => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SELECT_ACCOUNT':\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case 'CHANGE_SCREEN':\n      return {\n        ...state,\n        currentScreen: action.payload\n      };\n    case 'CHANGE_PERIOD':\n      return {\n        ...state,\n        selectedPeriod: action.payload\n      };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions;\n          return {\n            ...account,\n            transactions: (_account$transactions = account.transactions) === null || _account$transactions === void 0 ? void 0 : _account$transactions.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n        } : txn)\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions2;\n          return {\n            ...account,\n            transactions: (_account$transactions2 = account.transactions) === null || _account$transactions2 === void 0 ? void 0 : _account$transactions2.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: txn.tags.filter(tag => tag !== action.payload.tag)\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: txn.tags.filter(tag => tag !== action.payload.tag)\n        } : txn)\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\n      };\n    case 'APPLY_FILTERS':\n      return {\n        ...state,\n        filters: action.payload\n      };\n    case 'SET_CUSTOM_DATE_RANGE':\n      return {\n        ...state,\n        selectedPeriod: 'custom',\n        customDateRange: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst FinancialContext = /*#__PURE__*/createContext(null);\nexport const FinancialProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n  const [isPrivacyMode, setIsPrivacyMode] = useState(false);\n  const totalBalance = useMemo(() => state.accounts.reduce((sum, account) => sum + account.balance, 0), [state.accounts]);\n  const summary = useMemo(() => {\n    const today = new Date();\n    let startDate;\n    let endDate;\n    let periodLabel;\n\n    // Calculate period boundaries based on selectedPeriod\n    switch (state.selectedPeriod) {\n      case 'day':\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        endDate = new Date(); // Today\n        periodLabel = 'daily';\n        break;\n      case 'week':\n        const dayOfWeek = today.getDay();\n        const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract);\n        endDate = new Date(); // Today\n        periodLabel = 'weekly';\n        break;\n      case 'month':\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        endDate = new Date(); // Today\n        periodLabel = 'monthly';\n        break;\n      case 'quarter':\n        const currentQuarter = Math.floor(today.getMonth() / 3);\n        startDate = new Date(today.getFullYear(), currentQuarter * 3, 1);\n        endDate = new Date(); // Today\n        periodLabel = 'quarterly';\n        break;\n      case 'year':\n        startDate = new Date(today.getFullYear(), 0, 1);\n        endDate = new Date(); // Today\n        periodLabel = 'yearly';\n        break;\n      case '5year':\n        startDate = new Date(today.getFullYear() - 5, 0, 1);\n        endDate = new Date(); // Today\n        periodLabel = '5-year';\n        break;\n      case 'custom':\n        if (state.customDateRange) {\n          startDate = new Date(state.customDateRange.startDate);\n          endDate = new Date(state.customDateRange.endDate);\n          periodLabel = state.customDateRange.label || 'custom';\n        } else {\n          startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n          endDate = new Date(); // Today\n          periodLabel = 'monthly';\n        }\n        break;\n      default:\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        endDate = new Date(); // Today\n        periodLabel = 'monthly';\n    }\n\n    // Filter transactions for the selected period\n    const periodTransactions = state.transactions.filter(txn => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= startDate && txnDate <= endDate;\n    });\n    console.log(`=== ${periodLabel.toUpperCase()} SUMMARY ===`);\n    console.log(`Period: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);\n    console.log(`Transactions found: ${periodTransactions.length}`);\n    const periodIncome = periodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const periodExpenses = Math.abs(periodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    console.log(`${periodLabel} income:`, periodIncome);\n    console.log(`${periodLabel} expenses:`, periodExpenses);\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n\n    // Calculate previous period for comparison\n    let prevStartDate;\n    switch (state.selectedPeriod) {\n      case 'day':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\n        break;\n      case 'week':\n        const prevWeekDaysToSubtract = (today.getDay() === 0 ? 6 : today.getDay() - 1) + 7;\n        prevStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - prevWeekDaysToSubtract);\n        break;\n      case 'month':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        break;\n      case 'quarter':\n        const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\n        prevStartDate = prevQuarter >= 0 ? new Date(today.getFullYear(), prevQuarter * 3, 1) : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\n        break;\n      case 'year':\n        prevStartDate = new Date(today.getFullYear() - 1, 0, 1);\n        break;\n      case '5year':\n        prevStartDate = new Date(today.getFullYear() - 10, 0, 1);\n        break;\n      default:\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    }\n    const prevEndDate = new Date(startDate.getTime() - 1); // Day before current period starts\n\n    const prevPeriodTransactions = state.transactions.filter(txn => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= prevStartDate && txnDate <= prevEndDate;\n    });\n    const prevPeriodIncome = prevPeriodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const prevPeriodExpenses = Math.abs(prevPeriodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(periodIncome * 100) / 100,\n      monthlyExpenses: Math.round(periodExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\n      savingsRate: Math.max(0, savingsRate),\n      // Add comparison data for trends\n      previousPeriodIncome: prevPeriodIncome,\n      previousPeriodExpenses: prevPeriodExpenses,\n      periodLabel\n    };\n  }, [state.transactions, totalBalance, state.selectedPeriod]);\n  const selectAccount = account => {\n    dispatch({\n      type: 'SELECT_ACCOUNT',\n      payload: account\n    });\n  };\n  const changeScreen = screen => {\n    dispatch({\n      type: 'CHANGE_SCREEN',\n      payload: screen\n    });\n  };\n  const changePeriod = period => {\n    dispatch({\n      type: 'CHANGE_PERIOD',\n      payload: period\n    });\n  };\n  const addTag = (transactionId, tag) => {\n    dispatch({\n      type: 'ADD_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const removeTag = (transactionId, tag) => {\n    dispatch({\n      type: 'REMOVE_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const applyFilters = filters => {\n    dispatch({\n      type: 'APPLY_FILTERS',\n      payload: filters\n    });\n  };\n  const viewAccountDetail = account => {\n    dispatch({\n      type: 'VIEW_ACCOUNT_DETAIL',\n      payload: account\n    });\n  };\n  const setCustomDateRange = (startDate, endDate, label) => {\n    dispatch({\n      type: 'SET_CUSTOM_DATE_RANGE',\n      payload: {\n        startDate,\n        endDate,\n        label: label || 'Custom Range'\n      }\n    });\n  };\n  const togglePrivacyMode = () => {\n    setIsPrivacyMode(!isPrivacyMode);\n  };\n  const value = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail,\n    setCustomDateRange,\n    isPrivacyMode,\n    togglePrivacyMode\n  };\n  return /*#__PURE__*/_jsxDEV(FinancialContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialProvider, \"kMFMAWTM0rd03P6WWbDneOmSzqY=\");\n_c = FinancialProvider;\nexport const useFinancial = () => {\n  _s2();\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n_s2(useFinancial, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FinancialProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","useState","MOCK_ACCOUNTS","jsxDEV","_jsxDEV","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","accountFilter","setAccountFilter","financialReducer","state","action","type","payload","map","account","_account$transactions","txn","id","transactionId","tags","Array","from","Set","tag","_account$transactions2","filter","customDateRange","FinancialContext","FinancialProvider","children","_s","dispatch","isPrivacyMode","setIsPrivacyMode","totalBalance","reduce","sum","balance","summary","today","Date","startDate","endDate","periodLabel","getFullYear","getMonth","getDate","dayOfWeek","getDay","daysToSubtract","currentQuarter","Math","floor","label","periodTransactions","txnDate","date","console","log","toUpperCase","toISOString","split","length","periodIncome","amount","periodExpenses","abs","savingsRate","prevStartDate","prevWeekDaysToSubtract","prevQuarter","prevEndDate","getTime","prevPeriodTransactions","prevPeriodIncome","prevPeriodExpenses","monthlyIncome","round","monthlyExpenses","netWorth","debtToIncomeRatio","max","previousPeriodIncome","previousPeriodExpenses","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","viewAccountDetail","setCustomDateRange","togglePrivacyMode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFinancial","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useState } from 'react';\nimport {\n  FinancialState,\n  FinancialAction,\n  Account,\n  FilterOptions,\n  TimePeriod,\n  FinancialSummary,\n} from '../types/financial';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\n\nconst initialState: FinancialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap((acc) => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc',\n};\n\n// Add account filter state\nconst [accountFilter, setAccountFilter] = useState<'both' | 'personal' | 'business'>('both');\n\nconst financialReducer = (\n  state: FinancialState,\n  action: FinancialAction\n): FinancialState => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SELECT_ACCOUNT':\n      return { ...state, selectedAccount: action.payload };\n    case 'CHANGE_SCREEN':\n      return { ...state, currentScreen: action.payload };\n    case 'CHANGE_PERIOD':\n      return { ...state, selectedPeriod: action.payload };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n              }\n            : txn\n        ),\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n              }\n            : txn\n        ),\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [\n          ...state.transactions,\n          ...(action.payload.transactions || []),\n        ],\n      };\n    case 'APPLY_FILTERS':\n      return { ...state, filters: action.payload };\n    case 'SET_CUSTOM_DATE_RANGE':\n      return { \n        ...state, \n        selectedPeriod: 'custom',\n        customDateRange: action.payload \n      };\n    default:\n      return state;\n  }\n};\n\ninterface FinancialContextType {\n  state: FinancialState;\n  dispatch: React.Dispatch<FinancialAction>;\n  totalBalance: number;\n  summary: FinancialSummary;\n  selectAccount: (account: Account | null) => void;\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\n  changePeriod: (period: TimePeriod) => void;\n  addTag: (transactionId: string, tag: string) => void;\n  removeTag: (transactionId: string, tag: string) => void;\n  applyFilters: (filters: FilterOptions) => void;\n  viewAccountDetail: (account: Account) => void;\n  setCustomDateRange: (startDate: string, endDate: string, label?: string) => void;\n  isPrivacyMode: boolean;\n  togglePrivacyMode: () => void;\n}\n\nconst FinancialContext = createContext<FinancialContextType | null>(null);\n\nexport const FinancialProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n  const [isPrivacyMode, setIsPrivacyMode] = useState(false);\n\n  const totalBalance = useMemo(\n    () => state.accounts.reduce((sum, account) => sum + account.balance, 0),\n    [state.accounts]\n  );\n\n  const summary = useMemo((): FinancialSummary => {\n    const today = new Date();\n    let startDate: Date;\n    let endDate: Date;\n    let periodLabel: string;\n\n    // Calculate period boundaries based on selectedPeriod\n    switch (state.selectedPeriod) {\n      case 'day':\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n        endDate = new Date(); // Today\n        periodLabel = 'daily';\n        break;\n      case 'week':\n        const dayOfWeek = today.getDay();\n        const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\n        startDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract);\n        endDate = new Date(); // Today\n        periodLabel = 'weekly';\n        break;\n      case 'month':\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        endDate = new Date(); // Today\n        periodLabel = 'monthly';\n        break;\n      case 'quarter':\n        const currentQuarter = Math.floor(today.getMonth() / 3);\n        startDate = new Date(today.getFullYear(), currentQuarter * 3, 1);\n        endDate = new Date(); // Today\n        periodLabel = 'quarterly';\n        break;\n      case 'year':\n        startDate = new Date(today.getFullYear(), 0, 1);\n        endDate = new Date(); // Today\n        periodLabel = 'yearly';\n        break;\n      case '5year':\n        startDate = new Date(today.getFullYear() - 5, 0, 1);\n        endDate = new Date(); // Today\n        periodLabel = '5-year';\n        break;\n      case 'custom':\n        if (state.customDateRange) {\n          startDate = new Date(state.customDateRange.startDate);\n          endDate = new Date(state.customDateRange.endDate);\n          periodLabel = state.customDateRange.label || 'custom';\n        } else {\n          startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n          endDate = new Date(); // Today\n          periodLabel = 'monthly';\n        }\n        break;\n      default:\n        startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        endDate = new Date(); // Today\n        periodLabel = 'monthly';\n    }\n    \n    // Filter transactions for the selected period\n    const periodTransactions = state.transactions.filter((txn) => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= startDate && txnDate <= endDate;\n    });\n\n    console.log(`=== ${periodLabel.toUpperCase()} SUMMARY ===`);\n    console.log(`Period: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);\n    console.log(`Transactions found: ${periodTransactions.length}`);\n\n    const periodIncome = periodTransactions\n      .filter((txn) => txn.amount > 0)\n      .reduce((sum, txn) => sum + txn.amount, 0);\n\n    const periodExpenses = Math.abs(\n      periodTransactions\n        .filter((txn) => txn.amount < 0)\n        .reduce((sum, txn) => sum + txn.amount, 0)\n    );\n\n    console.log(`${periodLabel} income:`, periodIncome);\n    console.log(`${periodLabel} expenses:`, periodExpenses);\n\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n\n    // Calculate previous period for comparison\n    let prevStartDate: Date;\n    switch (state.selectedPeriod) {\n      case 'day':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1);\n        break;\n      case 'week':\n        const prevWeekDaysToSubtract = (today.getDay() === 0 ? 6 : today.getDay() - 1) + 7;\n        prevStartDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - prevWeekDaysToSubtract);\n        break;\n      case 'month':\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n        break;\n      case 'quarter':\n        const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\n        prevStartDate = prevQuarter >= 0 \n          ? new Date(today.getFullYear(), prevQuarter * 3, 1)\n          : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\n        break;\n      case 'year':\n        prevStartDate = new Date(today.getFullYear() - 1, 0, 1);\n        break;\n      case '5year':\n        prevStartDate = new Date(today.getFullYear() - 10, 0, 1);\n        break;\n      default:\n        prevStartDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    }\n\n    const prevEndDate = new Date(startDate.getTime() - 1); // Day before current period starts\n    \n    const prevPeriodTransactions = state.transactions.filter((txn) => {\n      const txnDate = new Date(txn.date);\n      return txnDate >= prevStartDate && txnDate <= prevEndDate;\n    });\n\n    const prevPeriodIncome = prevPeriodTransactions\n      .filter((txn) => txn.amount > 0)\n      .reduce((sum, txn) => sum + txn.amount, 0);\n\n    const prevPeriodExpenses = Math.abs(\n      prevPeriodTransactions\n        .filter((txn) => txn.amount < 0)\n        .reduce((sum, txn) => sum + txn.amount, 0)\n    );\n\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(periodIncome * 100) / 100,\n      monthlyExpenses: Math.round(periodExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\n      savingsRate: Math.max(0, savingsRate),\n      // Add comparison data for trends\n      previousPeriodIncome: prevPeriodIncome,\n      previousPeriodExpenses: prevPeriodExpenses,\n      periodLabel,\n    };\n  }, [state.transactions, totalBalance, state.selectedPeriod]);\n\n  const selectAccount = (account: Account | null) => {\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\n  };\n\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\n  };\n\n  const changePeriod = (period: TimePeriod) => {\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\n  };\n\n  const addTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\n  };\n\n  const removeTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\n  };\n\n  const applyFilters = (filters: FilterOptions) => {\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\n  };\n\n  const viewAccountDetail = (account: Account) => {\n    dispatch({ type: 'VIEW_ACCOUNT_DETAIL', payload: account });\n  };\n\n    const setCustomDateRange = (startDate: string, endDate: string, label?: string) => {\n    dispatch({\n      type: 'SET_CUSTOM_DATE_RANGE',\n      payload: {\n        startDate,\n        endDate,\n        label: label || 'Custom Range'\n      }\n    });\n  };\n\n  const togglePrivacyMode = () => {\n    setIsPrivacyMode(!isPrivacyMode);\n  };\n\n  const value: FinancialContextType = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail,\n    setCustomDateRange,\n    isPrivacyMode,\n    togglePrivacyMode,\n  };\n\n  return (\n    <FinancialContext.Provider value={value}>\n      {children}\n    </FinancialContext.Provider>\n  );\n};\n\nexport const useFinancial = (): FinancialContextType => {\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}