{"ast":null,"code":"import{useState,useEffect,useCallback,useMemo}from'react';import{createBudgetService}from'../services/budgetService';import{useAuth}from'../contexts/AuthContext';export const useBudget=function(){let config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const{currentUser}=useAuth();const[budgets,setBudgets]=useState([]);const[budgetSummary,setBudgetSummary]=useState(null);const[selectedBudget,setSelectedBudget]=useState(null);const[isLoading,setIsLoading]=useState(false);const[isCreating,setIsCreating]=useState(false);const[isUpdating,setIsUpdating]=useState(false);const[isDeleting,setIsDeleting]=useState(false);const[error,setError]=useState(null);// Create budget service instance\nconst budgetService=useMemo(()=>{var _config$useMockData;// Check if we're in demo mode\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';// Use demo user ID if in demo mode, otherwise require current user\nconst userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(!userId)return null;const serviceConfig={useMockData:(_config$useMockData=config.useMockData)!==null&&_config$useMockData!==void 0?_config$useMockData:true// Default to mock data for development\n};return createBudgetService(serviceConfig,userId);},[currentUser===null||currentUser===void 0?void 0:currentUser.id,config.useMockData]);// Load budgets on mount and when user changes\nuseEffect(()=>{if(!budgetService)return;// Check if we're in demo mode\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';// Use demo user ID if in demo mode, otherwise require current user\nconst userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(!userId)return;const loadBudgets=async()=>{setIsLoading(true);setError(null);try{const[budgetsData,summaryData]=await Promise.all([budgetService.getBudgets(userId),budgetService.getBudgetSummary(userId)]);setBudgets(budgetsData);setBudgetSummary(summaryData);}catch(err){setError(err instanceof Error?err.message:'Failed to load budgets');}finally{setIsLoading(false);}};loadBudgets();// Subscribe to real-time updates\nconst unsubscribe=budgetService.subscribeToBudgets(userId,updatedBudgets=>{setBudgets(updatedBudgets);});return unsubscribe;},[budgetService,currentUser===null||currentUser===void 0?void 0:currentUser.id]);// Budget operations\nconst createBudget=useCallback(async budgetData=>{if(!budgetService){throw new Error('Budget service not available');}setIsCreating(true);setError(null);try{const newBudget=await budgetService.createBudget(budgetData);// Update local state\nsetBudgets(prev=>[...prev,newBudget]);// Refresh summary\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';const userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(userId){const summary=await budgetService.getBudgetSummary(userId);setBudgetSummary(summary);}return newBudget;}catch(err){const errorMessage=err instanceof Error?err.message:'Failed to create budget';setError(errorMessage);throw new Error(errorMessage);}finally{setIsCreating(false);}},[budgetService,currentUser===null||currentUser===void 0?void 0:currentUser.id]);const updateBudget=useCallback(async(id,updates)=>{if(!budgetService){throw new Error('Budget service not available');}setIsUpdating(true);setError(null);try{const updatedBudget=await budgetService.updateBudget(id,updates);// Update local state\nsetBudgets(prev=>prev.map(budget=>budget.id===id?updatedBudget:budget));// Update selected budget if it's the one being updated\nif((selectedBudget===null||selectedBudget===void 0?void 0:selectedBudget.id)===id){setSelectedBudget(updatedBudget);}// Refresh summary\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';const userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(userId){const summary=await budgetService.getBudgetSummary(userId);setBudgetSummary(summary);}return updatedBudget;}catch(err){const errorMessage=err instanceof Error?err.message:'Failed to update budget';setError(errorMessage);throw new Error(errorMessage);}finally{setIsUpdating(false);}},[budgetService,currentUser===null||currentUser===void 0?void 0:currentUser.id,selectedBudget]);const deleteBudget=useCallback(async id=>{if(!budgetService){throw new Error('Budget service not available');}setIsDeleting(true);setError(null);try{const success=await budgetService.deleteBudget(id);if(success){// Update local state\nsetBudgets(prev=>prev.filter(budget=>budget.id!==id));// Clear selected budget if it's the one being deleted\nif((selectedBudget===null||selectedBudget===void 0?void 0:selectedBudget.id)===id){setSelectedBudget(null);}// Refresh summary\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';const userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(userId){const summary=await budgetService.getBudgetSummary(userId);setBudgetSummary(summary);}}return success;}catch(err){const errorMessage=err instanceof Error?err.message:'Failed to delete budget';setError(errorMessage);throw new Error(errorMessage);}finally{setIsDeleting(false);}},[budgetService,currentUser===null||currentUser===void 0?void 0:currentUser.id,selectedBudget]);const selectBudget=useCallback(budget=>{setSelectedBudget(budget);},[]);// Budget progress operations\nconst getBudgetProgress=useCallback(async budgetId=>{if(!budgetService){throw new Error('Budget service not available');}return await budgetService.getBudgetProgress(budgetId);},[budgetService]);const calculateBudgetSpending=useCallback(async(budgetId,transactions)=>{if(!budgetService){throw new Error('Budget service not available');}return await budgetService.calculateBudgetSpending(budgetId,transactions);},[budgetService]);// Budget alert operations\nconst createBudgetAlert=useCallback(async(budgetId,alert)=>{if(!budgetService){throw new Error('Budget service not available');}return await budgetService.createBudgetAlert(budgetId,alert);},[budgetService]);const getBudgetAlerts=useCallback(async budgetId=>{if(!budgetService){throw new Error('Budget service not available');}return await budgetService.getBudgetAlerts(budgetId);},[budgetService]);const updateBudgetAlert=useCallback(async(alertId,updates)=>{if(!budgetService){throw new Error('Budget service not available');}return await budgetService.updateBudgetAlert(alertId,updates);},[budgetService]);// Utility functions\nconst refreshBudgets=useCallback(async()=>{if(!budgetService)return;// Check if we're in demo mode\nconst isDemoMode=localStorage.getItem('financeapp-demo-mode')==='true'||new URLSearchParams(window.location.search).get('demo')==='true';// Use demo user ID if in demo mode, otherwise require current user\nconst userId=isDemoMode?'demo-user':currentUser===null||currentUser===void 0?void 0:currentUser.id;if(!userId)return;setIsLoading(true);setError(null);try{const[budgetsData,summaryData]=await Promise.all([budgetService.getBudgets(userId),budgetService.getBudgetSummary(userId)]);setBudgets(budgetsData);setBudgetSummary(summaryData);}catch(err){setError(err instanceof Error?err.message:'Failed to refresh budgets');}finally{setIsLoading(false);}},[budgetService,currentUser===null||currentUser===void 0?void 0:currentUser.id]);const clearError=useCallback(()=>{setError(null);},[]);return{// Budget data\nbudgets,budgetSummary,selectedBudget,// Loading states\nisLoading,isCreating,isUpdating,isDeleting,// Error states\nerror,// Budget operations\ncreateBudget,updateBudget,deleteBudget,selectBudget,// Budget progress\ngetBudgetProgress,calculateBudgetSpending,// Budget alerts\ncreateBudgetAlert,getBudgetAlerts,updateBudgetAlert,// Utility functions\nrefreshBudgets,clearError};};","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","createBudgetService","useAuth","useBudget","config","arguments","length","undefined","currentUser","budgets","setBudgets","budgetSummary","setBudgetSummary","selectedBudget","setSelectedBudget","isLoading","setIsLoading","isCreating","setIsCreating","isUpdating","setIsUpdating","isDeleting","setIsDeleting","error","setError","budgetService","_config$useMockData","isDemoMode","localStorage","getItem","URLSearchParams","window","location","search","get","userId","id","serviceConfig","useMockData","loadBudgets","budgetsData","summaryData","Promise","all","getBudgets","getBudgetSummary","err","Error","message","unsubscribe","subscribeToBudgets","updatedBudgets","createBudget","budgetData","newBudget","prev","summary","errorMessage","updateBudget","updates","updatedBudget","map","budget","deleteBudget","success","filter","selectBudget","getBudgetProgress","budgetId","calculateBudgetSpending","transactions","createBudgetAlert","alert","getBudgetAlerts","updateBudgetAlert","alertId","refreshBudgets","clearError"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/hooks/useBudget.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { createBudgetService, BudgetServiceConfig } from '../services/budgetService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface UseBudgetConfig {\r\n  useMockData?: boolean;\r\n}\r\n\r\ninterface UseBudgetReturn {\r\n  // Budget data\r\n  budgets: Budget[];\r\n  budgetSummary: BudgetSummary | null;\r\n  selectedBudget: Budget | null;\r\n  \r\n  // Loading states\r\n  isLoading: boolean;\r\n  isCreating: boolean;\r\n  isUpdating: boolean;\r\n  isDeleting: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  \r\n  // Budget operations\r\n  createBudget: (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => Promise<Budget>;\r\n  updateBudget: (id: string, updates: Partial<Budget>) => Promise<Budget>;\r\n  deleteBudget: (id: string) => Promise<boolean>;\r\n  selectBudget: (budget: Budget | null) => void;\r\n  \r\n  // Budget progress\r\n  getBudgetProgress: (budgetId: string) => Promise<BudgetProgress>;\r\n  calculateBudgetSpending: (budgetId: string, transactions: any[]) => Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert: (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => Promise<BudgetAlert>;\r\n  getBudgetAlerts: (budgetId: string) => Promise<BudgetAlert[]>;\r\n  updateBudgetAlert: (alertId: string, updates: Partial<BudgetAlert>) => Promise<BudgetAlert>;\r\n  \r\n  // Utility functions\r\n  refreshBudgets: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useBudget = (config: UseBudgetConfig = {}): UseBudgetReturn => {\r\n  const { currentUser } = useAuth();\r\n  const [budgets, setBudgets] = useState<Budget[]>([]);\r\n  const [budgetSummary, setBudgetSummary] = useState<BudgetSummary | null>(null);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Create budget service instance\r\n  const budgetService = useMemo(() => {\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return null;\r\n    \r\n    const serviceConfig: BudgetServiceConfig = {\r\n      useMockData: config.useMockData ?? true, // Default to mock data for development\r\n    };\r\n    \r\n    return createBudgetService(serviceConfig, userId);\r\n  }, [currentUser?.id, config.useMockData]);\r\n\r\n  // Load budgets on mount and when user changes\r\n  useEffect(() => {\r\n    if (!budgetService) return;\r\n\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return;\r\n\r\n    const loadBudgets = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const [budgetsData, summaryData] = await Promise.all([\r\n          budgetService.getBudgets(userId),\r\n          budgetService.getBudgetSummary(userId),\r\n        ]);\r\n        \r\n        setBudgets(budgetsData);\r\n        setBudgetSummary(summaryData);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to load budgets');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBudgets();\r\n\r\n    // Subscribe to real-time updates\r\n    const unsubscribe = budgetService.subscribeToBudgets(userId, (updatedBudgets) => {\r\n      setBudgets(updatedBudgets);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  // Budget operations\r\n  const createBudget = useCallback(async (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsCreating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newBudget = await budgetService.createBudget(budgetData);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => [...prev, newBudget]);\r\n      \r\n      // Refresh summary\r\n      const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                        new URLSearchParams(window.location.search).get('demo') === 'true';\r\n      const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n      \r\n      if (userId) {\r\n        const summary = await budgetService.getBudgetSummary(userId);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return newBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsCreating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const updateBudget = useCallback(async (id: string, updates: Partial<Budget>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsUpdating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const updatedBudget = await budgetService.updateBudget(id, updates);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => prev.map(budget => \r\n        budget.id === id ? updatedBudget : budget\r\n      ));\r\n      \r\n      // Update selected budget if it's the one being updated\r\n      if (selectedBudget?.id === id) {\r\n        setSelectedBudget(updatedBudget);\r\n      }\r\n      \r\n      // Refresh summary\r\n      const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                        new URLSearchParams(window.location.search).get('demo') === 'true';\r\n      const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n      \r\n      if (userId) {\r\n        const summary = await budgetService.getBudgetSummary(userId);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return updatedBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const deleteBudget = useCallback(async (id: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const success = await budgetService.deleteBudget(id);\r\n      \r\n      if (success) {\r\n        // Update local state\r\n        setBudgets(prev => prev.filter(budget => budget.id !== id));\r\n        \r\n        // Clear selected budget if it's the one being deleted\r\n        if (selectedBudget?.id === id) {\r\n          setSelectedBudget(null);\r\n        }\r\n        \r\n        // Refresh summary\r\n        const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                          new URLSearchParams(window.location.search).get('demo') === 'true';\r\n        const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n        \r\n        if (userId) {\r\n          const summary = await budgetService.getBudgetSummary(userId);\r\n          setBudgetSummary(summary);\r\n        }\r\n      }\r\n      \r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const selectBudget = useCallback((budget: Budget | null) => {\r\n    setSelectedBudget(budget);\r\n  }, []);\r\n\r\n  // Budget progress operations\r\n  const getBudgetProgress = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetProgress(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const calculateBudgetSpending = useCallback(async (budgetId: string, transactions: any[]) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.calculateBudgetSpending(budgetId, transactions);\r\n  }, [budgetService]);\r\n\r\n  // Budget alert operations\r\n  const createBudgetAlert = useCallback(async (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.createBudgetAlert(budgetId, alert);\r\n  }, [budgetService]);\r\n\r\n  const getBudgetAlerts = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetAlerts(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const updateBudgetAlert = useCallback(async (alertId: string, updates: Partial<BudgetAlert>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.updateBudgetAlert(alertId, updates);\r\n  }, [budgetService]);\r\n\r\n  // Utility functions\r\n  const refreshBudgets = useCallback(async () => {\r\n    if (!budgetService) return;\r\n\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [budgetsData, summaryData] = await Promise.all([\r\n        budgetService.getBudgets(userId),\r\n        budgetService.getBudgetSummary(userId),\r\n      ]);\r\n      \r\n      setBudgets(budgetsData);\r\n      setBudgetSummary(summaryData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to refresh budgets');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // Budget data\r\n    budgets,\r\n    budgetSummary,\r\n    selectedBudget,\r\n    \r\n    // Loading states\r\n    isLoading,\r\n    isCreating,\r\n    isUpdating,\r\n    isDeleting,\r\n    \r\n    // Error states\r\n    error,\r\n    \r\n    // Budget operations\r\n    createBudget,\r\n    updateBudget,\r\n    deleteBudget,\r\n    selectBudget,\r\n    \r\n    // Budget progress\r\n    getBudgetProgress,\r\n    calculateBudgetSpending,\r\n    \r\n    // Budget alerts\r\n    createBudgetAlert,\r\n    getBudgetAlerts,\r\n    updateBudgetAlert,\r\n    \r\n    // Utility functions\r\n    refreshBudgets,\r\n    clearError,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}