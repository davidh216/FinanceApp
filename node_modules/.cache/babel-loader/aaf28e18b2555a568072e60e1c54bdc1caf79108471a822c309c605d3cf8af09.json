{"ast":null,"code":"/**\r\n * Calculate period boundaries based on the selected period and optional custom date range\r\n */\nexport const calculatePeriodBoundaries = (period, customRange) => {\n  const today = new Date();\n  switch (period) {\n    case 'day':\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate()),\n        endDate: today,\n        periodLabel: 'daily'\n      };\n    case 'week':\n      const dayOfWeek = today.getDay();\n      const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract),\n        endDate: today,\n        periodLabel: 'weekly'\n      };\n    case 'month':\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\n        endDate: today,\n        periodLabel: 'monthly'\n      };\n    case 'quarter':\n      const currentQuarter = Math.floor(today.getMonth() / 3);\n      return {\n        startDate: new Date(today.getFullYear(), currentQuarter * 3, 1),\n        endDate: today,\n        periodLabel: 'quarterly'\n      };\n    case 'year':\n      return {\n        startDate: new Date(today.getFullYear(), 0, 1),\n        endDate: today,\n        periodLabel: 'yearly'\n      };\n    case '5year':\n      return {\n        startDate: new Date(today.getFullYear() - 5, 0, 1),\n        endDate: today,\n        periodLabel: '5-year'\n      };\n    case 'custom':\n      if (customRange) {\n        return {\n          startDate: new Date(customRange.startDate),\n          endDate: new Date(customRange.endDate),\n          periodLabel: customRange.label || 'custom'\n        };\n      }\n      // fallback to month\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\n        endDate: today,\n        periodLabel: 'monthly'\n      };\n    default:\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\n        endDate: today,\n        periodLabel: 'monthly'\n      };\n  }\n};\n\n/**\r\n * Calculate previous period boundaries for comparison\r\n */\nexport const calculatePreviousPeriodBoundaries = (period, currentStartDate) => {\n  const today = new Date();\n  switch (period) {\n    case 'day':\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    case 'week':\n      const prevWeekDaysToSubtract = (today.getDay() === 0 ? 6 : today.getDay() - 1) + 7;\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - prevWeekDaysToSubtract),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    case 'month':\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    case 'quarter':\n      const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\n      const prevQuarterStart = prevQuarter >= 0 ? new Date(today.getFullYear(), prevQuarter * 3, 1) : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\n      return {\n        startDate: prevQuarterStart,\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    case 'year':\n      return {\n        startDate: new Date(today.getFullYear() - 1, 0, 1),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    case '5year':\n      return {\n        startDate: new Date(today.getFullYear() - 10, 0, 1),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n    default:\n      return {\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\n        endDate: new Date(currentStartDate.getTime() - 1)\n      };\n  }\n};\n\n/**\r\n * Filter transactions for a specific date range\r\n */\nexport const filterTransactionsByDateRange = (transactions, startDate, endDate) => {\n  return transactions.filter(txn => {\n    const txnDate = new Date(txn.date);\n    return txnDate >= startDate && txnDate <= endDate;\n  });\n};\n\n/**\r\n * Calculate financial summary for a given period\r\n */\nexport const calculateFinancialSummary = (transactions, period, customRange, totalBalance = 0) => {\n  const {\n    startDate,\n    endDate,\n    periodLabel\n  } = calculatePeriodBoundaries(period, customRange);\n  const periodTransactions = filterTransactionsByDateRange(transactions, startDate, endDate);\n  const periodIncome = periodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n  const periodExpenses = Math.abs(periodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n  const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n\n  // Calculate previous period for comparison\n  const {\n    startDate: prevStartDate,\n    endDate: prevEndDate\n  } = calculatePreviousPeriodBoundaries(period, startDate);\n  const prevPeriodTransactions = filterTransactionsByDateRange(transactions, prevStartDate, prevEndDate);\n  const prevPeriodIncome = prevPeriodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n  const prevPeriodExpenses = Math.abs(prevPeriodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n  return {\n    totalBalance,\n    monthlyIncome: Math.round(periodIncome * 100) / 100,\n    monthlyExpenses: Math.round(periodExpenses * 100) / 100,\n    netWorth: totalBalance,\n    debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\n    savingsRate: Math.max(0, savingsRate),\n    previousPeriodIncome: prevPeriodIncome,\n    previousPeriodExpenses: prevPeriodExpenses,\n    periodLabel\n  };\n};\n\n/**\r\n * Generate trend data for charts based on selected period\r\n */\nexport const generateTrendData = (transactions, period, dataPoints = 30) => {\n  const today = new Date();\n  const balanceTrend = [];\n  const incomeTrend = [];\n  const expenseTrend = [];\n  const savingsTrend = [];\n\n  // Determine interval based on period\n  let intervalDays;\n  switch (period) {\n    case 'day':\n      intervalDays = 1 / 24; // Hourly\n      break;\n    case 'week':\n      intervalDays = 1; // Daily\n      break;\n    case 'month':\n      intervalDays = 1; // Daily\n      break;\n    case 'quarter':\n      intervalDays = 7; // Weekly\n      break;\n    case 'year':\n      intervalDays = 30; // Monthly\n      break;\n    case '5year':\n      intervalDays = 30; // Monthly\n      break;\n    default:\n      intervalDays = 1;\n  }\n\n  // Generate trend data for each data point\n  for (let i = dataPoints - 1; i >= 0; i--) {\n    const targetDate = new Date(today);\n    targetDate.setDate(today.getDate() - i * intervalDays);\n    const startDate = new Date(targetDate);\n    startDate.setDate(targetDate.getDate() - intervalDays);\n    const periodTransactions = filterTransactionsByDateRange(transactions, startDate, targetDate);\n\n    // Calculate balance at this point\n    const transactionsUpToDate = filterTransactionsByDateRange(transactions, new Date(0), targetDate);\n    const balanceAtDate = transactionsUpToDate.reduce((sum, txn) => sum + txn.amount, 0);\n    balanceTrend.push(Math.max(0, balanceAtDate));\n\n    // Calculate income for this period\n    const periodIncome = periodTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    incomeTrend.push(periodIncome);\n\n    // Calculate expenses for this period\n    const periodExpenses = Math.abs(periodTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    expenseTrend.push(periodExpenses);\n\n    // Calculate savings rate for this period\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\n    savingsTrend.push(Math.max(0, savingsRate * 100)); // Convert to percentage\n  }\n  return {\n    balance: balanceTrend,\n    income: incomeTrend,\n    expenses: expenseTrend,\n    savings: savingsTrend\n  };\n};","map":{"version":3,"names":["calculatePeriodBoundaries","period","customRange","today","Date","startDate","getFullYear","getMonth","getDate","endDate","periodLabel","dayOfWeek","getDay","daysToSubtract","currentQuarter","Math","floor","label","calculatePreviousPeriodBoundaries","currentStartDate","getTime","prevWeekDaysToSubtract","prevQuarter","prevQuarterStart","filterTransactionsByDateRange","transactions","filter","txn","txnDate","date","calculateFinancialSummary","totalBalance","periodTransactions","periodIncome","amount","reduce","sum","periodExpenses","abs","savingsRate","prevStartDate","prevEndDate","prevPeriodTransactions","prevPeriodIncome","prevPeriodExpenses","monthlyIncome","round","monthlyExpenses","netWorth","debtToIncomeRatio","max","previousPeriodIncome","previousPeriodExpenses","generateTrendData","dataPoints","balanceTrend","incomeTrend","expenseTrend","savingsTrend","intervalDays","i","targetDate","setDate","transactionsUpToDate","balanceAtDate","push","balance","income","expenses","savings"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/periodCalculations.ts"],"sourcesContent":["import { TimePeriod, CustomDateRange, Transaction, FinancialSummary } from '../types/financial';\r\n\r\n/**\r\n * Calculate period boundaries based on the selected period and optional custom date range\r\n */\r\nexport const calculatePeriodBoundaries = (\r\n  period: TimePeriod, \r\n  customRange?: CustomDateRange\r\n): { startDate: Date; endDate: Date; periodLabel: string } => {\r\n  const today = new Date();\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate()),\r\n        endDate: today,\r\n        periodLabel: 'daily'\r\n      };\r\n    case 'week':\r\n      const dayOfWeek = today.getDay();\r\n      const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract),\r\n        endDate: today,\r\n        periodLabel: 'weekly'\r\n      };\r\n    case 'month':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n    case 'quarter':\r\n      const currentQuarter = Math.floor(today.getMonth() / 3);\r\n      return {\r\n        startDate: new Date(today.getFullYear(), currentQuarter * 3, 1),\r\n        endDate: today,\r\n        periodLabel: 'quarterly'\r\n      };\r\n    case 'year':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), 0, 1),\r\n        endDate: today,\r\n        periodLabel: 'yearly'\r\n      };\r\n    case '5year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 5, 0, 1),\r\n        endDate: today,\r\n        periodLabel: '5-year'\r\n      };\r\n    case 'custom':\r\n      if (customRange) {\r\n        return {\r\n          startDate: new Date(customRange.startDate),\r\n          endDate: new Date(customRange.endDate),\r\n          periodLabel: customRange.label || 'custom'\r\n        };\r\n      }\r\n      // fallback to month\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n    default:\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate previous period boundaries for comparison\r\n */\r\nexport const calculatePreviousPeriodBoundaries = (\r\n  period: TimePeriod,\r\n  currentStartDate: Date\r\n): { startDate: Date; endDate: Date } => {\r\n  const today = new Date();\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'week':\r\n      const prevWeekDaysToSubtract = (today.getDay() === 0 ? 6 : today.getDay() - 1) + 7;\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - prevWeekDaysToSubtract),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'month':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'quarter':\r\n      const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\r\n      const prevQuarterStart = prevQuarter >= 0\r\n        ? new Date(today.getFullYear(), prevQuarter * 3, 1)\r\n        : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\r\n      return {\r\n        startDate: prevQuarterStart,\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 1, 0, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case '5year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 10, 0, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    default:\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n  }\r\n};\r\n\r\n/**\r\n * Filter transactions for a specific date range\r\n */\r\nexport const filterTransactionsByDateRange = (\r\n  transactions: Transaction[],\r\n  startDate: Date,\r\n  endDate: Date\r\n): Transaction[] => {\r\n  return transactions.filter(txn => {\r\n    const txnDate = new Date(txn.date);\r\n    return txnDate >= startDate && txnDate <= endDate;\r\n  });\r\n};\r\n\r\n/**\r\n * Calculate financial summary for a given period\r\n */\r\nexport const calculateFinancialSummary = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  customRange?: CustomDateRange,\r\n  totalBalance: number = 0\r\n): FinancialSummary => {\r\n  const { startDate, endDate, periodLabel } = calculatePeriodBoundaries(period, customRange);\r\n  \r\n  const periodTransactions = filterTransactionsByDateRange(transactions, startDate, endDate);\r\n\r\n  const periodIncome = periodTransactions\r\n    .filter(txn => txn.amount > 0)\r\n    .reduce((sum, txn) => sum + txn.amount, 0);\r\n\r\n  const periodExpenses = Math.abs(\r\n    periodTransactions\r\n      .filter(txn => txn.amount < 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0)\r\n  );\r\n\r\n  const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\r\n\r\n  // Calculate previous period for comparison\r\n  const { startDate: prevStartDate, endDate: prevEndDate } = calculatePreviousPeriodBoundaries(period, startDate);\r\n  const prevPeriodTransactions = filterTransactionsByDateRange(transactions, prevStartDate, prevEndDate);\r\n\r\n  const prevPeriodIncome = prevPeriodTransactions\r\n    .filter(txn => txn.amount > 0)\r\n    .reduce((sum, txn) => sum + txn.amount, 0);\r\n\r\n  const prevPeriodExpenses = Math.abs(\r\n    prevPeriodTransactions\r\n      .filter(txn => txn.amount < 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0)\r\n  );\r\n\r\n  return {\r\n    totalBalance,\r\n    monthlyIncome: Math.round(periodIncome * 100) / 100,\r\n    monthlyExpenses: Math.round(periodExpenses * 100) / 100,\r\n    netWorth: totalBalance,\r\n    debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\r\n    savingsRate: Math.max(0, savingsRate),\r\n    previousPeriodIncome: prevPeriodIncome,\r\n    previousPeriodExpenses: prevPeriodExpenses,\r\n    periodLabel,\r\n  };\r\n};\r\n\r\n/**\r\n * Generate trend data for charts based on selected period\r\n */\r\nexport const generateTrendData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 30\r\n): {\r\n  balance: number[];\r\n  income: number[];\r\n  expenses: number[];\r\n  savings: number[];\r\n} => {\r\n  const today = new Date();\r\n  const balanceTrend: number[] = [];\r\n  const incomeTrend: number[] = [];\r\n  const expenseTrend: number[] = [];\r\n  const savingsTrend: number[] = [];\r\n\r\n  // Determine interval based on period\r\n  let intervalDays: number;\r\n  switch (period) {\r\n    case 'day':\r\n      intervalDays = 1 / 24; // Hourly\r\n      break;\r\n    case 'week':\r\n      intervalDays = 1; // Daily\r\n      break;\r\n    case 'month':\r\n      intervalDays = 1; // Daily\r\n      break;\r\n    case 'quarter':\r\n      intervalDays = 7; // Weekly\r\n      break;\r\n    case 'year':\r\n      intervalDays = 30; // Monthly\r\n      break;\r\n    case '5year':\r\n      intervalDays = 30; // Monthly\r\n      break;\r\n    default:\r\n      intervalDays = 1;\r\n  }\r\n\r\n  // Generate trend data for each data point\r\n  for (let i = dataPoints - 1; i >= 0; i--) {\r\n    const targetDate = new Date(today);\r\n    targetDate.setDate(today.getDate() - i * intervalDays);\r\n\r\n    const startDate = new Date(targetDate);\r\n    startDate.setDate(targetDate.getDate() - intervalDays);\r\n\r\n    const periodTransactions = filterTransactionsByDateRange(transactions, startDate, targetDate);\r\n\r\n    // Calculate balance at this point\r\n    const transactionsUpToDate = filterTransactionsByDateRange(transactions, new Date(0), targetDate);\r\n    const balanceAtDate = transactionsUpToDate.reduce((sum, txn) => sum + txn.amount, 0);\r\n    balanceTrend.push(Math.max(0, balanceAtDate));\r\n\r\n    // Calculate income for this period\r\n    const periodIncome = periodTransactions\r\n      .filter(txn => txn.amount > 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0);\r\n    incomeTrend.push(periodIncome);\r\n\r\n    // Calculate expenses for this period\r\n    const periodExpenses = Math.abs(\r\n      periodTransactions\r\n        .filter(txn => txn.amount < 0)\r\n        .reduce((sum, txn) => sum + txn.amount, 0)\r\n    );\r\n    expenseTrend.push(periodExpenses);\r\n\r\n    // Calculate savings rate for this period\r\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\r\n    savingsTrend.push(Math.max(0, savingsRate * 100)); // Convert to percentage\r\n  }\r\n\r\n  return {\r\n    balance: balanceTrend,\r\n    income: incomeTrend,\r\n    expenses: expenseTrend,\r\n    savings: savingsTrend,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}