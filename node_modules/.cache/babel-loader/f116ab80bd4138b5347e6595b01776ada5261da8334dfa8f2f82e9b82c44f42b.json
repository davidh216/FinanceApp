{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { createBudgetService } from '../services/budgetService';\nimport { useAuth } from '../contexts/AuthContext';\nexport const useBudget = (config = {}) => {\n  _s();\n  const {\n    currentUser\n  } = useAuth();\n  const [budgets, setBudgets] = useState([]);\n  const [budgetSummary, setBudgetSummary] = useState(null);\n  const [selectedBudget, setSelectedBudget] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Create budget service instance\n  const budgetService = useMemo(() => {\n    var _config$useMockData;\n    if (!(currentUser !== null && currentUser !== void 0 && currentUser.id)) return null;\n    const serviceConfig = {\n      useMockData: (_config$useMockData = config.useMockData) !== null && _config$useMockData !== void 0 ? _config$useMockData : true // Default to mock data for development\n    };\n    return createBudgetService(serviceConfig, currentUser.id);\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, config.useMockData]);\n\n  // Load budgets on mount and when user changes\n  useEffect(() => {\n    if (!budgetService || !(currentUser !== null && currentUser !== void 0 && currentUser.id)) return;\n    const loadBudgets = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const [budgetsData, summaryData] = await Promise.all([budgetService.getBudgets(currentUser.id), budgetService.getBudgetSummary(currentUser.id)]);\n        setBudgets(budgetsData);\n        setBudgetSummary(summaryData);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load budgets');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadBudgets();\n\n    // Subscribe to real-time updates\n    const unsubscribe = budgetService.subscribeToBudgets(currentUser.id, updatedBudgets => {\n      setBudgets(updatedBudgets);\n    });\n    return unsubscribe;\n  }, [budgetService, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n\n  // Budget operations\n  const createBudget = useCallback(async budgetData => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    setIsCreating(true);\n    setError(null);\n    try {\n      const newBudget = await budgetService.createBudget(budgetData);\n\n      // Update local state\n      setBudgets(prev => [...prev, newBudget]);\n\n      // Refresh summary\n      if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\n        setBudgetSummary(summary);\n      }\n      return newBudget;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create budget';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsCreating(false);\n    }\n  }, [budgetService, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const updateBudget = useCallback(async (id, updates) => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    setIsUpdating(true);\n    setError(null);\n    try {\n      const updatedBudget = await budgetService.updateBudget(id, updates);\n\n      // Update local state\n      setBudgets(prev => prev.map(budget => budget.id === id ? updatedBudget : budget));\n\n      // Update selected budget if it's the one being updated\n      if ((selectedBudget === null || selectedBudget === void 0 ? void 0 : selectedBudget.id) === id) {\n        setSelectedBudget(updatedBudget);\n      }\n\n      // Refresh summary\n      if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\n        setBudgetSummary(summary);\n      }\n      return updatedBudget;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update budget';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsUpdating(false);\n    }\n  }, [budgetService, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, selectedBudget]);\n  const deleteBudget = useCallback(async id => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    setIsDeleting(true);\n    setError(null);\n    try {\n      const success = await budgetService.deleteBudget(id);\n      if (success) {\n        // Update local state\n        setBudgets(prev => prev.filter(budget => budget.id !== id));\n\n        // Clear selected budget if it's the one being deleted\n        if ((selectedBudget === null || selectedBudget === void 0 ? void 0 : selectedBudget.id) === id) {\n          setSelectedBudget(null);\n        }\n\n        // Refresh summary\n        if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n          const summary = await budgetService.getBudgetSummary(currentUser.id);\n          setBudgetSummary(summary);\n        }\n      }\n      return success;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete budget';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [budgetService, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id, selectedBudget]);\n  const selectBudget = useCallback(budget => {\n    setSelectedBudget(budget);\n  }, []);\n\n  // Budget progress operations\n  const getBudgetProgress = useCallback(async budgetId => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    return await budgetService.getBudgetProgress(budgetId);\n  }, [budgetService]);\n  const calculateBudgetSpending = useCallback(async (budgetId, transactions) => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    return await budgetService.calculateBudgetSpending(budgetId, transactions);\n  }, [budgetService]);\n\n  // Budget alert operations\n  const createBudgetAlert = useCallback(async (budgetId, alert) => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    return await budgetService.createBudgetAlert(budgetId, alert);\n  }, [budgetService]);\n  const getBudgetAlerts = useCallback(async budgetId => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    return await budgetService.getBudgetAlerts(budgetId);\n  }, [budgetService]);\n  const updateBudgetAlert = useCallback(async (alertId, updates) => {\n    if (!budgetService) {\n      throw new Error('Budget service not available');\n    }\n    return await budgetService.updateBudgetAlert(alertId, updates);\n  }, [budgetService]);\n\n  // Utility functions\n  const refreshBudgets = useCallback(async () => {\n    if (!budgetService || !(currentUser !== null && currentUser !== void 0 && currentUser.id)) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      const [budgetsData, summaryData] = await Promise.all([budgetService.getBudgets(currentUser.id), budgetService.getBudgetSummary(currentUser.id)]);\n      setBudgets(budgetsData);\n      setBudgetSummary(summaryData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to refresh budgets');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [budgetService, currentUser === null || currentUser === void 0 ? void 0 : currentUser.id]);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    // Budget data\n    budgets,\n    budgetSummary,\n    selectedBudget,\n    // Loading states\n    isLoading,\n    isCreating,\n    isUpdating,\n    isDeleting,\n    // Error states\n    error,\n    // Budget operations\n    createBudget,\n    updateBudget,\n    deleteBudget,\n    selectBudget,\n    // Budget progress\n    getBudgetProgress,\n    calculateBudgetSpending,\n    // Budget alerts\n    createBudgetAlert,\n    getBudgetAlerts,\n    updateBudgetAlert,\n    // Utility functions\n    refreshBudgets,\n    clearError\n  };\n};\n_s(useBudget, \"ZeiPFpF06Qix+HrW/m0yDSqKtcg=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","createBudgetService","useAuth","useBudget","config","_s","currentUser","budgets","setBudgets","budgetSummary","setBudgetSummary","selectedBudget","setSelectedBudget","isLoading","setIsLoading","isCreating","setIsCreating","isUpdating","setIsUpdating","isDeleting","setIsDeleting","error","setError","budgetService","_config$useMockData","id","serviceConfig","useMockData","loadBudgets","budgetsData","summaryData","Promise","all","getBudgets","getBudgetSummary","err","Error","message","unsubscribe","subscribeToBudgets","updatedBudgets","createBudget","budgetData","newBudget","prev","summary","errorMessage","updateBudget","updates","updatedBudget","map","budget","deleteBudget","success","filter","selectBudget","getBudgetProgress","budgetId","calculateBudgetSpending","transactions","createBudgetAlert","alert","getBudgetAlerts","updateBudgetAlert","alertId","refreshBudgets","clearError"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/hooks/useBudget.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { createBudgetService, BudgetServiceConfig } from '../services/budgetService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface UseBudgetConfig {\r\n  useMockData?: boolean;\r\n}\r\n\r\ninterface UseBudgetReturn {\r\n  // Budget data\r\n  budgets: Budget[];\r\n  budgetSummary: BudgetSummary | null;\r\n  selectedBudget: Budget | null;\r\n  \r\n  // Loading states\r\n  isLoading: boolean;\r\n  isCreating: boolean;\r\n  isUpdating: boolean;\r\n  isDeleting: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  \r\n  // Budget operations\r\n  createBudget: (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => Promise<Budget>;\r\n  updateBudget: (id: string, updates: Partial<Budget>) => Promise<Budget>;\r\n  deleteBudget: (id: string) => Promise<boolean>;\r\n  selectBudget: (budget: Budget | null) => void;\r\n  \r\n  // Budget progress\r\n  getBudgetProgress: (budgetId: string) => Promise<BudgetProgress>;\r\n  calculateBudgetSpending: (budgetId: string, transactions: any[]) => Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert: (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => Promise<BudgetAlert>;\r\n  getBudgetAlerts: (budgetId: string) => Promise<BudgetAlert[]>;\r\n  updateBudgetAlert: (alertId: string, updates: Partial<BudgetAlert>) => Promise<BudgetAlert>;\r\n  \r\n  // Utility functions\r\n  refreshBudgets: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useBudget = (config: UseBudgetConfig = {}): UseBudgetReturn => {\r\n  const { currentUser } = useAuth();\r\n  const [budgets, setBudgets] = useState<Budget[]>([]);\r\n  const [budgetSummary, setBudgetSummary] = useState<BudgetSummary | null>(null);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Create budget service instance\r\n  const budgetService = useMemo(() => {\r\n    if (!currentUser?.id) return null;\r\n    \r\n    const serviceConfig: BudgetServiceConfig = {\r\n      useMockData: config.useMockData ?? true, // Default to mock data for development\r\n    };\r\n    \r\n    return createBudgetService(serviceConfig, currentUser.id);\r\n  }, [currentUser?.id, config.useMockData]);\r\n\r\n  // Load budgets on mount and when user changes\r\n  useEffect(() => {\r\n    if (!budgetService || !currentUser?.id) return;\r\n\r\n    const loadBudgets = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const [budgetsData, summaryData] = await Promise.all([\r\n          budgetService.getBudgets(currentUser.id),\r\n          budgetService.getBudgetSummary(currentUser.id),\r\n        ]);\r\n        \r\n        setBudgets(budgetsData);\r\n        setBudgetSummary(summaryData);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to load budgets');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBudgets();\r\n\r\n    // Subscribe to real-time updates\r\n    const unsubscribe = budgetService.subscribeToBudgets(currentUser.id, (updatedBudgets) => {\r\n      setBudgets(updatedBudgets);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  // Budget operations\r\n  const createBudget = useCallback(async (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsCreating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newBudget = await budgetService.createBudget(budgetData);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => [...prev, newBudget]);\r\n      \r\n      // Refresh summary\r\n      if (currentUser?.id) {\r\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return newBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsCreating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const updateBudget = useCallback(async (id: string, updates: Partial<Budget>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsUpdating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const updatedBudget = await budgetService.updateBudget(id, updates);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => prev.map(budget => \r\n        budget.id === id ? updatedBudget : budget\r\n      ));\r\n      \r\n      // Update selected budget if it's the one being updated\r\n      if (selectedBudget?.id === id) {\r\n        setSelectedBudget(updatedBudget);\r\n      }\r\n      \r\n      // Refresh summary\r\n      if (currentUser?.id) {\r\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return updatedBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const deleteBudget = useCallback(async (id: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const success = await budgetService.deleteBudget(id);\r\n      \r\n      if (success) {\r\n        // Update local state\r\n        setBudgets(prev => prev.filter(budget => budget.id !== id));\r\n        \r\n        // Clear selected budget if it's the one being deleted\r\n        if (selectedBudget?.id === id) {\r\n          setSelectedBudget(null);\r\n        }\r\n        \r\n        // Refresh summary\r\n        if (currentUser?.id) {\r\n          const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n          setBudgetSummary(summary);\r\n        }\r\n      }\r\n      \r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const selectBudget = useCallback((budget: Budget | null) => {\r\n    setSelectedBudget(budget);\r\n  }, []);\r\n\r\n  // Budget progress operations\r\n  const getBudgetProgress = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetProgress(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const calculateBudgetSpending = useCallback(async (budgetId: string, transactions: any[]) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.calculateBudgetSpending(budgetId, transactions);\r\n  }, [budgetService]);\r\n\r\n  // Budget alert operations\r\n  const createBudgetAlert = useCallback(async (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.createBudgetAlert(budgetId, alert);\r\n  }, [budgetService]);\r\n\r\n  const getBudgetAlerts = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetAlerts(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const updateBudgetAlert = useCallback(async (alertId: string, updates: Partial<BudgetAlert>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.updateBudgetAlert(alertId, updates);\r\n  }, [budgetService]);\r\n\r\n  // Utility functions\r\n  const refreshBudgets = useCallback(async () => {\r\n    if (!budgetService || !currentUser?.id) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [budgetsData, summaryData] = await Promise.all([\r\n        budgetService.getBudgets(currentUser.id),\r\n        budgetService.getBudgetSummary(currentUser.id),\r\n      ]);\r\n      \r\n      setBudgets(budgetsData);\r\n      setBudgetSummary(summaryData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to refresh budgets');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // Budget data\r\n    budgets,\r\n    budgetSummary,\r\n    selectedBudget,\r\n    \r\n    // Loading states\r\n    isLoading,\r\n    isCreating,\r\n    isUpdating,\r\n    isDeleting,\r\n    \r\n    // Error states\r\n    error,\r\n    \r\n    // Budget operations\r\n    createBudget,\r\n    updateBudget,\r\n    deleteBudget,\r\n    selectBudget,\r\n    \r\n    // Budget progress\r\n    getBudgetProgress,\r\n    calculateBudgetSpending,\r\n    \r\n    // Budget alerts\r\n    createBudgetAlert,\r\n    getBudgetAlerts,\r\n    updateBudgetAlert,\r\n    \r\n    // Utility functions\r\n    refreshBudgets,\r\n    clearError,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}