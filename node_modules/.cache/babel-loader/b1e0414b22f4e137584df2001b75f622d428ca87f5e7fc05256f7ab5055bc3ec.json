{"ast":null,"code":"import{useMemo,useState,useCallback}from'react';import{exportTransactions,exportSummary}from'../utils/exportUtils';export const useCharts=(transactions,accounts,period,filters)=>{const[isExporting,setIsExporting]=useState(false);const[exportError,setExportError]=useState(null);// Calculate summary statistics\nconst summary=useMemo(()=>{const totalBalance=accounts.reduce((sum,account)=>sum+account.balance,0);const periodTransactions=transactions.filter(t=>{// Apply basic period filtering (you can enhance this)\nconst transactionDate=new Date(t.date);const now=new Date();let startDate;switch(period){case'day':startDate=new Date(now.getFullYear(),now.getMonth(),now.getDate());break;case'week':startDate=new Date(now.getTime()-7*24*60*60*1000);break;case'month':startDate=new Date(now.getFullYear(),now.getMonth(),1);break;case'quarter':const quarter=Math.floor(now.getMonth()/3);startDate=new Date(now.getFullYear(),quarter*3,1);break;case'year':startDate=new Date(now.getFullYear(),0,1);break;default:startDate=new Date(now.getFullYear(),now.getMonth(),1);}return transactionDate>=startDate&&transactionDate<=now;});const totalIncome=periodTransactions.filter(t=>t.amount>0).reduce((sum,t)=>sum+t.amount,0);const totalExpenses=Math.abs(periodTransactions.filter(t=>t.amount<0).reduce((sum,t)=>sum+t.amount,0));const netFlow=totalIncome-totalExpenses;const savingsRate=totalIncome>0?netFlow/totalIncome*100:0;// Calculate top category\nconst categoryMap=new Map();periodTransactions.filter(t=>t.amount<0).forEach(t=>{const category=t.category||'Uncategorized';categoryMap.set(category,(categoryMap.get(category)||0)+Math.abs(t.amount));});const topCategory=Array.from(categoryMap.entries()).sort((_ref,_ref2)=>{let[,a]=_ref;let[,b]=_ref2;return b-a;})[0]||['None',0];return{totalBalance,totalIncome,totalExpenses,netFlow,savingsRate,topCategory:topCategory[0],topCategoryAmount:topCategory[1]};},[transactions,accounts,period]);// Export functionality\nconst handleExportTransactions=useCallback(async()=>{setIsExporting(true);setExportError(null);try{// Filter transactions based on current filters\nlet filteredTransactions=[...transactions];// Apply basic filtering (you can enhance this based on your FilterOptions)\nif(filters.dateRange){filteredTransactions=filteredTransactions.filter(t=>{const transactionDate=new Date(t.date);const startDate=new Date(filters.dateRange.start);const endDate=new Date(filters.dateRange.end);return transactionDate>=startDate&&transactionDate<=endDate;});}if(filters.categories&&filters.categories.length>0){filteredTransactions=filteredTransactions.filter(t=>filters.categories.includes(t.category));}const filename=`transactions_${period}_${new Date().toISOString().split('T')[0]}.csv`;exportTransactions(filteredTransactions,filename);}catch(error){setExportError(error instanceof Error?error.message:'Export failed');}finally{setIsExporting(false);}},[transactions,filters,period]);const handleExportSummary=useCallback(async()=>{setIsExporting(true);setExportError(null);try{const summaryData={totalBalance:summary.totalBalance,totalIncome:summary.totalIncome,totalExpenses:summary.totalExpenses,netSavings:summary.netFlow,period:period};const filename=`financial_summary_${period}_${new Date().toISOString().split('T')[0]}.csv`;exportSummary(summaryData,filename);}catch(error){setExportError(error instanceof Error?error.message:'Export failed');}finally{setIsExporting(false);}},[summary,period]);// Chart data processing\nconst chartData=useMemo(()=>{return{balanceTrend:{transactions,accounts,period},incomeExpense:{transactions,period},categorySpending:{transactions,period},summary};},[transactions,accounts,period,summary]);// Refresh functionality\nconst refreshCharts=useCallback(()=>{// This would typically trigger a data refresh\n// For now, we'll just return a promise that resolves immediately\nreturn Promise.resolve();},[]);return{chartData,summary,isExporting,exportError,handleExportTransactions,handleExportSummary,refreshCharts};};","map":{"version":3,"names":["useMemo","useState","useCallback","exportTransactions","exportSummary","useCharts","transactions","accounts","period","filters","isExporting","setIsExporting","exportError","setExportError","summary","totalBalance","reduce","sum","account","balance","periodTransactions","filter","t","transactionDate","Date","date","now","startDate","getFullYear","getMonth","getDate","getTime","quarter","Math","floor","totalIncome","amount","totalExpenses","abs","netFlow","savingsRate","categoryMap","Map","forEach","category","set","get","topCategory","Array","from","entries","sort","_ref","_ref2","a","b","topCategoryAmount","handleExportTransactions","filteredTransactions","dateRange","start","endDate","end","categories","length","includes","filename","toISOString","split","error","Error","message","handleExportSummary","summaryData","netSavings","chartData","balanceTrend","incomeExpense","categorySpending","refreshCharts","Promise","resolve"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/hooks/useCharts.ts"],"sourcesContent":["import { useMemo, useState, useCallback } from 'react';\r\nimport { Transaction, Account, TimePeriod, FilterOptions } from '../types/financial';\r\nimport { exportTransactions, exportSummary } from '../utils/exportUtils';\r\n\r\nexport interface ChartData {\r\n  balanceTrend: any;\r\n  incomeExpense: any;\r\n  categorySpending: any;\r\n  summary: {\r\n    totalBalance: number;\r\n    totalIncome: number;\r\n    totalExpenses: number;\r\n    netFlow: number;\r\n    savingsRate: number;\r\n    topCategory: string;\r\n    topCategoryAmount: number;\r\n  };\r\n}\r\n\r\nexport const useCharts = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  filters: FilterOptions\r\n) => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [exportError, setExportError] = useState<string | null>(null);\r\n\r\n  // Calculate summary statistics\r\n  const summary = useMemo(() => {\r\n    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      // Apply basic period filtering (you can enhance this)\r\n      const transactionDate = new Date(t.date);\r\n      const now = new Date();\r\n      let startDate: Date;\r\n      \r\n      switch (period) {\r\n        case 'day':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n          break;\r\n        case 'week':\r\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n          break;\r\n        case 'month':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n          break;\r\n        case 'quarter':\r\n          const quarter = Math.floor(now.getMonth() / 3);\r\n          startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n          break;\r\n        case 'year':\r\n          startDate = new Date(now.getFullYear(), 0, 1);\r\n          break;\r\n        default:\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n      }\r\n      \r\n      return transactionDate >= startDate && transactionDate <= now;\r\n    });\r\n\r\n    const totalIncome = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const totalExpenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    const netFlow = totalIncome - totalExpenses;\r\n    const savingsRate = totalIncome > 0 ? (netFlow / totalIncome) * 100 : 0;\r\n\r\n    // Calculate top category\r\n    const categoryMap = new Map<string, number>();\r\n    periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .forEach(t => {\r\n        const category = t.category || 'Uncategorized';\r\n        categoryMap.set(category, (categoryMap.get(category) || 0) + Math.abs(t.amount));\r\n      });\r\n\r\n    const topCategory = Array.from(categoryMap.entries())\r\n      .sort(([, a], [, b]) => b - a)[0] || ['None', 0];\r\n\r\n    return {\r\n      totalBalance,\r\n      totalIncome,\r\n      totalExpenses,\r\n      netFlow,\r\n      savingsRate,\r\n      topCategory: topCategory[0],\r\n      topCategoryAmount: topCategory[1],\r\n    };\r\n  }, [transactions, accounts, period]);\r\n\r\n  // Export functionality\r\n  const handleExportTransactions = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      // Filter transactions based on current filters\r\n      let filteredTransactions = [...transactions];\r\n      \r\n      // Apply basic filtering (you can enhance this based on your FilterOptions)\r\n      if (filters.dateRange) {\r\n        filteredTransactions = filteredTransactions.filter(t => {\r\n          const transactionDate = new Date(t.date);\r\n          const startDate = new Date(filters.dateRange!.start);\r\n          const endDate = new Date(filters.dateRange!.end);\r\n          return transactionDate >= startDate && transactionDate <= endDate;\r\n        });\r\n      }\r\n      \r\n      if (filters.categories && filters.categories.length > 0) {\r\n        filteredTransactions = filteredTransactions.filter(t =>\r\n          filters.categories!.includes(t.category)\r\n        );\r\n      }\r\n      \r\n      const filename = `transactions_${period}_${new Date().toISOString().split('T')[0]}.csv`;\r\n      exportTransactions(filteredTransactions, filename);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [transactions, filters, period]);\r\n\r\n  const handleExportSummary = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      const summaryData = {\r\n        totalBalance: summary.totalBalance,\r\n        totalIncome: summary.totalIncome,\r\n        totalExpenses: summary.totalExpenses,\r\n        netSavings: summary.netFlow,\r\n        period: period,\r\n      };\r\n      \r\n      const filename = `financial_summary_${period}_${new Date().toISOString().split('T')[0]}.csv`;\r\n      exportSummary(summaryData, filename);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [summary, period]);\r\n\r\n  // Chart data processing\r\n  const chartData = useMemo((): ChartData => {\r\n    return {\r\n      balanceTrend: {\r\n        transactions,\r\n        accounts,\r\n        period,\r\n      },\r\n      incomeExpense: {\r\n        transactions,\r\n        period,\r\n      },\r\n      categorySpending: {\r\n        transactions,\r\n        period,\r\n      },\r\n      summary,\r\n    };\r\n  }, [transactions, accounts, period, summary]);\r\n\r\n  // Refresh functionality\r\n  const refreshCharts = useCallback(() => {\r\n    // This would typically trigger a data refresh\r\n    // For now, we'll just return a promise that resolves immediately\r\n    return Promise.resolve();\r\n  }, []);\r\n\r\n  return {\r\n    chartData,\r\n    summary,\r\n    isExporting,\r\n    exportError,\r\n    handleExportTransactions,\r\n    handleExportSummary,\r\n    refreshCharts,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}