{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dliz1\\\\Desktop\\\\FinanceApp\\\\src\\\\contexts\\\\FinancialContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useMemo } from 'react';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc'\n};\nconst financialReducer = (state, action) => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SELECT_ACCOUNT':\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case 'CHANGE_SCREEN':\n      return {\n        ...state,\n        currentScreen: action.payload\n      };\n    case 'CHANGE_PERIOD':\n      return {\n        ...state,\n        selectedPeriod: action.payload\n      };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions;\n          return {\n            ...account,\n            transactions: (_account$transactions = account.transactions) === null || _account$transactions === void 0 ? void 0 : _account$transactions.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: Array.from(new Set([...txn.tags, action.payload.tag]))\n        } : txn)\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions2;\n          return {\n            ...account,\n            transactions: (_account$transactions2 = account.transactions) === null || _account$transactions2 === void 0 ? void 0 : _account$transactions2.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: txn.tags.filter(tag => tag !== action.payload.tag)\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: txn.tags.filter(tag => tag !== action.payload.tag)\n        } : txn)\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\n      };\n    case 'APPLY_FILTERS':\n      return {\n        ...state,\n        filters: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst FinancialContext = /*#__PURE__*/createContext(null);\nexport const FinancialProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n  const totalBalance = useMemo(() => state.accounts.reduce((sum, account) => sum + account.balance, 0), [state.accounts]);\n  const summary = useMemo(() => {\n    const currentMonth = new Date().toISOString().substring(0, 7);\n\n    // Debug: Log all transactions and filtering\n    console.log('=== DEBUG SUMMARY CALCULATION ===');\n    console.log('Current month:', currentMonth);\n    console.log('Total transactions:', state.transactions.length);\n    const monthlyTransactions = state.transactions.filter(txn => {\n      const isCurrentMonth = txn.date.startsWith(currentMonth);\n      console.log(`Transaction: ${txn.date} (${txn.cleanMerchant.cleanName}) - $${txn.amount} - Current month: ${isCurrentMonth}`);\n      return isCurrentMonth;\n    });\n    console.log('Monthly transactions found:', monthlyTransactions.length);\n    const monthlyIncome = monthlyTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const monthlyExpenses = Math.abs(monthlyTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    console.log('Monthly income:', monthlyIncome);\n    console.log('Monthly expenses:', monthlyExpenses);\n    const savingsRate = monthlyIncome > 0 ? (monthlyIncome - monthlyExpenses) / monthlyIncome : 0;\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(monthlyIncome * 100) / 100,\n      monthlyExpenses: Math.round(monthlyExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: monthlyIncome > 0 ? monthlyExpenses / monthlyIncome : 0,\n      savingsRate: Math.max(0, savingsRate)\n    };\n  }, [state.transactions, totalBalance]);\n  const selectAccount = account => {\n    dispatch({\n      type: 'SELECT_ACCOUNT',\n      payload: account\n    });\n  };\n  const changeScreen = screen => {\n    dispatch({\n      type: 'CHANGE_SCREEN',\n      payload: screen\n    });\n  };\n  const changePeriod = period => {\n    dispatch({\n      type: 'CHANGE_PERIOD',\n      payload: period\n    });\n  };\n  const addTag = (transactionId, tag) => {\n    dispatch({\n      type: 'ADD_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const removeTag = (transactionId, tag) => {\n    dispatch({\n      type: 'REMOVE_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const applyFilters = filters => {\n    dispatch({\n      type: 'APPLY_FILTERS',\n      payload: filters\n    });\n  };\n  const viewAccountDetail = account => {\n    dispatch({\n      type: 'VIEW_ACCOUNT_DETAIL',\n      payload: account\n    });\n  };\n  const value = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail\n  };\n  return /*#__PURE__*/_jsxDEV(FinancialContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialProvider, \"0Uc9UIncPtM2fI2N139/k5FoVOI=\");\n_c = FinancialProvider;\nexport const useFinancial = () => {\n  _s2();\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n_s2(useFinancial, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FinancialProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","MOCK_ACCOUNTS","jsxDEV","_jsxDEV","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","financialReducer","state","action","type","payload","map","account","_account$transactions","txn","id","transactionId","tags","Array","from","Set","tag","_account$transactions2","filter","FinancialContext","FinancialProvider","children","_s","dispatch","totalBalance","reduce","sum","balance","summary","currentMonth","Date","toISOString","substring","console","log","length","monthlyTransactions","isCurrentMonth","date","startsWith","cleanMerchant","cleanName","amount","monthlyIncome","monthlyExpenses","Math","abs","savingsRate","round","netWorth","debtToIncomeRatio","max","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","viewAccountDetail","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFinancial","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useMemo } from 'react';\nimport {\n  FinancialState,\n  FinancialAction,\n  Account,\n  FilterOptions,\n  TimePeriod,\n  FinancialSummary,\n} from '../types/financial';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\n\nconst initialState: FinancialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap((acc) => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc',\n};\n\nconst financialReducer = (\n  state: FinancialState,\n  action: FinancialAction\n): FinancialState => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n    case 'SELECT_ACCOUNT':\n      return { ...state, selectedAccount: action.payload };\n    case 'CHANGE_SCREEN':\n      return { ...state, currentScreen: action.payload };\n    case 'CHANGE_PERIOD':\n      return { ...state, selectedPeriod: action.payload };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: Array.from(new Set([...txn.tags, action.payload.tag])),\n              }\n            : txn\n        ),\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map((account) => ({\n          ...account,\n          transactions: account.transactions?.map((txn) =>\n            txn.id === action.payload.transactionId\n              ? {\n                  ...txn,\n                  tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n                }\n              : txn\n          ),\n        })),\n        transactions: state.transactions.map((txn) =>\n          txn.id === action.payload.transactionId\n            ? {\n                ...txn,\n                tags: txn.tags.filter((tag) => tag !== action.payload.tag),\n              }\n            : txn\n        ),\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [\n          ...state.transactions,\n          ...(action.payload.transactions || []),\n        ],\n      };\n    case 'APPLY_FILTERS':\n      return { ...state, filters: action.payload };\n    default:\n      return state;\n  }\n};\n\ninterface FinancialContextType {\n  state: FinancialState;\n  dispatch: React.Dispatch<FinancialAction>;\n  totalBalance: number;\n  summary: FinancialSummary;\n  selectAccount: (account: Account | null) => void;\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\n  changePeriod: (period: TimePeriod) => void;\n  addTag: (transactionId: string, tag: string) => void;\n  removeTag: (transactionId: string, tag: string) => void;\n  applyFilters: (filters: FilterOptions) => void;\n  viewAccountDetail: (account: Account) => void;\n}\n\nconst FinancialContext = createContext<FinancialContextType | null>(null);\n\nexport const FinancialProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n\n  const totalBalance = useMemo(\n    () => state.accounts.reduce((sum, account) => sum + account.balance, 0),\n    [state.accounts]\n  );\n\n  const summary = useMemo((): FinancialSummary => {\n    const currentMonth = new Date().toISOString().substring(0, 7);\n    \n    // Debug: Log all transactions and filtering\n    console.log('=== DEBUG SUMMARY CALCULATION ===');\n    console.log('Current month:', currentMonth);\n    console.log('Total transactions:', state.transactions.length);\n    \n    const monthlyTransactions = state.transactions.filter((txn) => {\n      const isCurrentMonth = txn.date.startsWith(currentMonth);\n      console.log(`Transaction: ${txn.date} (${txn.cleanMerchant.cleanName}) - $${txn.amount} - Current month: ${isCurrentMonth}`);\n      return isCurrentMonth;\n    });\n    \n    console.log('Monthly transactions found:', monthlyTransactions.length);\n\n    const monthlyIncome = monthlyTransactions\n      .filter((txn) => txn.amount > 0)\n      .reduce((sum, txn) => sum + txn.amount, 0);\n\n    const monthlyExpenses = Math.abs(\n      monthlyTransactions\n        .filter((txn) => txn.amount < 0)\n        .reduce((sum, txn) => sum + txn.amount, 0)\n    );\n\n    console.log('Monthly income:', monthlyIncome);\n    console.log('Monthly expenses:', monthlyExpenses);\n\n    const savingsRate =\n      monthlyIncome > 0 ? (monthlyIncome - monthlyExpenses) / monthlyIncome : 0;\n\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(monthlyIncome * 100) / 100,\n      monthlyExpenses: Math.round(monthlyExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio:\n        monthlyIncome > 0 ? monthlyExpenses / monthlyIncome : 0,\n      savingsRate: Math.max(0, savingsRate),\n    };\n  }, [state.transactions, totalBalance]);\n\n  const selectAccount = (account: Account | null) => {\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\n  };\n\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\n  };\n\n  const changePeriod = (period: TimePeriod) => {\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\n  };\n\n  const addTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\n  };\n\n  const removeTag = (transactionId: string, tag: string) => {\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\n  };\n\n  const applyFilters = (filters: FilterOptions) => {\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\n  };\n\n  const viewAccountDetail = (account: Account) => {\n    dispatch({ type: 'VIEW_ACCOUNT_DETAIL', payload: account });\n  };\n\n  const value: FinancialContextType = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail,\n  };\n\n  return (\n    <FinancialContext.Provider value={value}>\n      {children}\n    </FinancialContext.Provider>\n  );\n};\n\nexport const useFinancial = (): FinancialContextType => {\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}