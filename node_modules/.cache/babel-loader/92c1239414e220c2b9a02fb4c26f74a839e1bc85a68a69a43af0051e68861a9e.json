{"ast":null,"code":"import{MOCK_ACCOUNTS}from'../constants/financial';import{calculateFinancialSummary}from'../utils/periodCalculations';import{getDocs,getDoc,setDoc,deleteDoc,query,where,orderBy,onSnapshot,serverTimestamp,Timestamp}from'firebase/firestore';import{getUserAccountsCollection,getUserTransactionsCollection,getAccountDocRef,getTransactionDocRef}from'../config/firebase';class MockDataService{constructor(){this.accounts=MOCK_ACCOUNTS;this.transactions=[];// Generate mock transactions for all accounts\nthis.generateMockTransactions();}generateMockTransactions(){this.transactions=[];this.accounts.forEach(account=>{// Generate 20-50 transactions per account\nconst transactionCount=Math.floor(Math.random()*30)+20;for(let i=0;i<transactionCount;i++){const date=new Date();date.setDate(date.getDate()-Math.floor(Math.random()*90));// Random date within last 90 days\nconst amount=Math.random()>0.6?-(Math.random()*500+10):// 40% chance of expense\nMath.random()*2000+100;// 60% chance of income\nthis.transactions.push({id:`${account.id}-tx-${i}`,accountId:account.id,amount,date:date.toISOString(),description:this.generateMockDescription(amount),category:this.generateMockCategory(amount),tags:this.generateMockTags(amount),pending:false,cleanMerchant:{cleanName:this.generateMockMerchant(amount),logo:'',suggestedCategory:this.generateMockCategory(amount),original:this.generateMockMerchant(amount)},createdAt:date.toISOString(),updatedAt:date.toISOString()});}});}generateMockDescription(amount){const descriptions=amount>0?['Salary Deposit','Freelance Payment','Investment Dividend','Refund','Bonus Payment']:['Grocery Store','Gas Station','Restaurant','Online Purchase','Utility Bill','Subscription','Entertainment'];return descriptions[Math.floor(Math.random()*descriptions.length)];}generateMockMerchant(amount){const merchants=amount>0?['Employer Corp','Freelance Platform','Investment Bank','Online Store']:['Walmart','Shell Gas','McDonald\\'s','Amazon','Netflix','Spotify','Electric Company'];return merchants[Math.floor(Math.random()*merchants.length)];}generateMockCategory(amount){const categories=amount>0?['Income','Investment','Refund']:['Food & Dining','Transportation','Shopping','Entertainment','Utilities','Healthcare'];return categories[Math.floor(Math.random()*categories.length)];}generateMockTags(amount){const tags=amount>0?['income','salary']:['expense','daily'];// Add random tags\nconst allTags=['groceries','transport','entertainment','utilities','shopping'];const randomTag=allTags[Math.floor(Math.random()*allTags.length)];if(Math.random()>0.5){tags.push(randomTag);}return tags;}async getAccounts(){// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,100));return[...this.accounts];}async getAccount(id){await new Promise(resolve=>setTimeout(resolve,50));return this.accounts.find(account=>account.id===id)||null;}async updateAccount(account){await new Promise(resolve=>setTimeout(resolve,200));const index=this.accounts.findIndex(a=>a.id===account.id);if(index!==-1){this.accounts[index]=account;}return account;}async deleteAccount(id){await new Promise(resolve=>setTimeout(resolve,200));const index=this.accounts.findIndex(account=>account.id===id);if(index!==-1){this.accounts.splice(index,1);// Remove associated transactions\nthis.transactions=this.transactions.filter(tx=>tx.accountId!==id);return true;}return false;}async getTransactions(accountId,filters){await new Promise(resolve=>setTimeout(resolve,150));let filteredTransactions=[...this.transactions];if(accountId){filteredTransactions=filteredTransactions.filter(tx=>tx.accountId===accountId);}// Apply filters if provided\nif(filters){if(filters.category){filteredTransactions=filteredTransactions.filter(tx=>tx.category===filters.category);}if(filters.type){const isIncome=filters.type==='income';filteredTransactions=filteredTransactions.filter(tx=>tx.amount>0===isIncome);}if(filters.dateRange){const{startDate,endDate}=filters.dateRange;filteredTransactions=filteredTransactions.filter(tx=>{const txDate=new Date(tx.date);return txDate>=startDate&&txDate<=endDate;});}}return filteredTransactions;}async getTransaction(id){await new Promise(resolve=>setTimeout(resolve,50));return this.transactions.find(transaction=>transaction.id===id)||null;}async updateTransaction(transaction){await new Promise(resolve=>setTimeout(resolve,200));const index=this.transactions.findIndex(tx=>tx.id===transaction.id);if(index!==-1){this.transactions[index]=transaction;}return transaction;}async deleteTransaction(id){await new Promise(resolve=>setTimeout(resolve,200));const index=this.transactions.findIndex(transaction=>transaction.id===id);if(index!==-1){this.transactions.splice(index,1);return true;}return false;}async getFinancialSummary(period,customDateRange,accountFilter){await new Promise(resolve=>setTimeout(resolve,100));let filteredTransactions=[...this.transactions];// Filter by account type if specified\nif(accountFilter&&accountFilter!=='both'){const filteredAccounts=this.accounts.filter(account=>{if(accountFilter==='personal')return!account.type.includes('BUSINESS');if(accountFilter==='business')return account.type.includes('BUSINESS');return true;});const accountIds=filteredAccounts.map(account=>account.id);filteredTransactions=filteredTransactions.filter(tx=>accountIds.includes(tx.accountId));}const totalBalance=this.accounts.reduce((sum,account)=>sum+account.balance,0);return calculateFinancialSummary(filteredTransactions,period,customDateRange,totalBalance);}async searchTransactions(query){await new Promise(resolve=>setTimeout(resolve,100));const lowerQuery=query.toLowerCase();return this.transactions.filter(transaction=>transaction.description.toLowerCase().includes(lowerQuery)||transaction.cleanMerchant.cleanName.toLowerCase().includes(lowerQuery)||transaction.category.toLowerCase().includes(lowerQuery)||transaction.tags.some(tag=>tag.toLowerCase().includes(lowerQuery)));}async getTransactionStats(accountId){await new Promise(resolve=>setTimeout(resolve,100));let filteredTransactions=[...this.transactions];if(accountId){filteredTransactions=filteredTransactions.filter(tx=>tx.accountId===accountId);}const totalIncome=filteredTransactions.filter(tx=>tx.amount>0).reduce((sum,tx)=>sum+tx.amount,0);const totalExpenses=filteredTransactions.filter(tx=>tx.amount<0).reduce((sum,tx)=>sum+Math.abs(tx.amount),0);const categoryStats=filteredTransactions.reduce((stats,tx)=>{const category=tx.category;if(!stats[category]){stats[category]={count:0,total:0};}stats[category].count++;stats[category].total+=Math.abs(tx.amount);return stats;},{});return{totalTransactions:filteredTransactions.length,totalIncome,totalExpenses,netAmount:totalIncome-totalExpenses,categoryStats,averageTransactionAmount:filteredTransactions.length>0?filteredTransactions.reduce((sum,tx)=>sum+Math.abs(tx.amount),0)/filteredTransactions.length:0};}}class FirebaseDataService{constructor(config,userId){this.config=void 0;this.userId=void 0;this.config=config;this.userId=userId;}// Helper method to convert Firestore timestamp to ISO string\nconvertTimestamp(timestamp){if(typeof timestamp==='string')return timestamp;return timestamp.toDate().toISOString();}// Helper method to convert ISO string to Firestore timestamp\nconvertToTimestamp(dateString){return Timestamp.fromDate(new Date(dateString));}// Helper method to convert Firestore document to Account\nconvertFirestoreToAccount(doc){const data=doc.data();return{id:doc.id,name:data.name,type:data.type,balance:data.balance||0,accountNumber:data.accountNumber||'',bankName:data.bankName||'',limit:data.limit,isActive:data.isActive!==false,createdAt:this.convertTimestamp(data.createdAt||serverTimestamp()),updatedAt:this.convertTimestamp(data.updatedAt||serverTimestamp())};}// Helper method to convert Firestore document to Transaction\nconvertFirestoreToTransaction(doc){const data=doc.data();return{id:doc.id,accountId:data.accountId,description:data.description,amount:data.amount,date:this.convertTimestamp(data.date),category:data.category,tags:data.tags||[],pending:data.pending||false,cleanMerchant:data.cleanMerchant||{cleanName:data.merchant||'',logo:'',suggestedCategory:data.category||'',original:data.merchant||''},notes:data.notes,receiptUrl:data.receiptUrl,createdAt:this.convertTimestamp(data.createdAt||serverTimestamp()),updatedAt:this.convertTimestamp(data.updatedAt||serverTimestamp())};}async getAccounts(){try{const accountsRef=getUserAccountsCollection(this.userId);const querySnapshot=await getDocs(accountsRef);return querySnapshot.docs.map(doc=>this.convertFirestoreToAccount(doc));}catch(error){console.error('Error fetching accounts:',error);throw new Error('Failed to fetch accounts');}}async getAccount(id){try{const accountRef=getAccountDocRef(this.userId,id);const accountSnap=await getDoc(accountRef);if(accountSnap.exists()){return this.convertFirestoreToAccount(accountSnap);}return null;}catch(error){console.error('Error fetching account:',error);throw new Error('Failed to fetch account');}}async updateAccount(account){try{const accountRef=getAccountDocRef(this.userId,account.id);const updatedAccount={...account,updatedAt:serverTimestamp()};await setDoc(accountRef,updatedAccount);return account;}catch(error){console.error('Error updating account:',error);throw new Error('Failed to update account');}}async deleteAccount(id){try{const accountRef=getAccountDocRef(this.userId,id);await deleteDoc(accountRef);// Also delete associated transactions\nconst transactionsRef=getUserTransactionsCollection(this.userId);const transactionsQuery=query(transactionsRef,where('accountId','==',id));const transactionsSnap=await getDocs(transactionsQuery);const deletePromises=transactionsSnap.docs.map(doc=>deleteDoc(doc.ref));await Promise.all(deletePromises);return true;}catch(error){console.error('Error deleting account:',error);throw new Error('Failed to delete account');}}async getTransactions(accountId,filters){try{const transactionsRef=getUserTransactionsCollection(this.userId);const constraints=[orderBy('date','desc')];if(accountId){constraints.push(where('accountId','==',accountId));}// Apply filters\nif(filters){if(filters.category){constraints.push(where('category','==',filters.category));}if(filters.type){const isIncome=filters.type==='income';constraints.push(where('amount',isIncome?'>':'<',0));}if(filters.dateRange){constraints.push(where('date','>=',this.convertToTimestamp(filters.dateRange.startDate)),where('date','<=',this.convertToTimestamp(filters.dateRange.endDate)));}}const transactionsQuery=query(transactionsRef,...constraints);const querySnapshot=await getDocs(transactionsQuery);return querySnapshot.docs.map(doc=>this.convertFirestoreToTransaction(doc));}catch(error){console.error('Error fetching transactions:',error);throw new Error('Failed to fetch transactions');}}async getTransaction(id){try{const transactionRef=getTransactionDocRef(this.userId,id);const transactionSnap=await getDoc(transactionRef);if(transactionSnap.exists()){return this.convertFirestoreToTransaction(transactionSnap);}return null;}catch(error){console.error('Error fetching transaction:',error);throw new Error('Failed to fetch transaction');}}async updateTransaction(transaction){try{const transactionRef=getTransactionDocRef(this.userId,transaction.id);const updatedTransaction={...transaction,updatedAt:serverTimestamp()};await setDoc(transactionRef,updatedTransaction);return transaction;}catch(error){console.error('Error updating transaction:',error);throw new Error('Failed to update transaction');}}async deleteTransaction(id){try{const transactionRef=getTransactionDocRef(this.userId,id);await deleteDoc(transactionRef);return true;}catch(error){console.error('Error deleting transaction:',error);throw new Error('Failed to delete transaction');}}async getFinancialSummary(period,customDateRange,accountFilter){try{// Get all transactions for the period\nconst transactions=await this.getTransactions();// Filter by account type if specified\nlet filteredTransactions=transactions;if(accountFilter&&accountFilter!=='both'){const accounts=await this.getAccounts();const filteredAccounts=accounts.filter(account=>{if(accountFilter==='personal')return!account.type.includes('BUSINESS');if(accountFilter==='business')return account.type.includes('BUSINESS');return true;});const accountIds=filteredAccounts.map(account=>account.id);filteredTransactions=transactions.filter(tx=>accountIds.includes(tx.accountId));}const totalBalance=(await this.getAccounts()).reduce((sum,account)=>sum+account.balance,0);return calculateFinancialSummary(filteredTransactions,period,customDateRange,totalBalance);}catch(error){console.error('Error calculating financial summary:',error);throw new Error('Failed to calculate financial summary');}}async searchTransactions(query){try{// Firestore doesn't support full-text search, so we'll fetch all transactions and filter client-side\n// In production, you might want to use Algolia or similar for better search\nconst transactions=await this.getTransactions();const lowerQuery=query.toLowerCase();return transactions.filter(transaction=>transaction.description.toLowerCase().includes(lowerQuery)||transaction.cleanMerchant.cleanName.toLowerCase().includes(lowerQuery)||transaction.category.toLowerCase().includes(lowerQuery)||transaction.tags.some(tag=>tag.toLowerCase().includes(lowerQuery)));}catch(error){console.error('Error searching transactions:',error);throw new Error('Failed to search transactions');}}async getTransactionStats(accountId){try{const transactions=await this.getTransactions(accountId);const totalIncome=transactions.filter(tx=>tx.amount>0).reduce((sum,tx)=>sum+tx.amount,0);const totalExpenses=transactions.filter(tx=>tx.amount<0).reduce((sum,tx)=>sum+Math.abs(tx.amount),0);const categoryStats=transactions.reduce((stats,tx)=>{const category=tx.category;if(!stats[category]){stats[category]={count:0,total:0};}stats[category].count++;stats[category].total+=Math.abs(tx.amount);return stats;},{});return{totalTransactions:transactions.length,totalIncome,totalExpenses,netAmount:totalIncome-totalExpenses,categoryStats,averageTransactionAmount:transactions.length>0?transactions.reduce((sum,tx)=>sum+Math.abs(tx.amount),0)/transactions.length:0};}catch(error){console.error('Error calculating transaction stats:',error);throw new Error('Failed to calculate transaction stats');}}// Real-time listeners for live data synchronization\nsubscribeToAccounts(callback){const accountsRef=getUserAccountsCollection(this.userId);return onSnapshot(accountsRef,snapshot=>{const accounts=snapshot.docs.map(doc=>this.convertFirestoreToAccount(doc));callback(accounts);});}subscribeToTransactions(callback,accountId){const transactionsRef=getUserTransactionsCollection(this.userId);const constraints=[orderBy('date','desc')];if(accountId){constraints.push(where('accountId','==',accountId));}const transactionsQuery=query(transactionsRef,...constraints);return onSnapshot(transactionsQuery,snapshot=>{const transactions=snapshot.docs.map(doc=>this.convertFirestoreToTransaction(doc));callback(transactions);});}}export function createDataService(config,userId){if(config.useMockData){return new MockDataService();}else{if(!userId){throw new Error('User ID is required for Firebase DataService');}return new FirebaseDataService(config,userId);}}// Export classes for testing\nexport{MockDataService,FirebaseDataService};// Default export for convenience\nexport default createDataService;","map":{"version":3,"names":["MOCK_ACCOUNTS","calculateFinancialSummary","getDocs","getDoc","setDoc","deleteDoc","query","where","orderBy","onSnapshot","serverTimestamp","Timestamp","getUserAccountsCollection","getUserTransactionsCollection","getAccountDocRef","getTransactionDocRef","MockDataService","constructor","accounts","transactions","generateMockTransactions","forEach","account","transactionCount","Math","floor","random","i","date","Date","setDate","getDate","amount","push","id","accountId","toISOString","description","generateMockDescription","category","generateMockCategory","tags","generateMockTags","pending","cleanMerchant","cleanName","generateMockMerchant","logo","suggestedCategory","original","createdAt","updatedAt","descriptions","length","merchants","categories","allTags","randomTag","getAccounts","Promise","resolve","setTimeout","getAccount","find","updateAccount","index","findIndex","a","deleteAccount","splice","filter","tx","getTransactions","filters","filteredTransactions","type","isIncome","dateRange","startDate","endDate","txDate","getTransaction","transaction","updateTransaction","deleteTransaction","getFinancialSummary","period","customDateRange","accountFilter","filteredAccounts","includes","accountIds","map","totalBalance","reduce","sum","balance","searchTransactions","lowerQuery","toLowerCase","some","tag","getTransactionStats","totalIncome","totalExpenses","abs","categoryStats","stats","count","total","totalTransactions","netAmount","averageTransactionAmount","FirebaseDataService","config","userId","convertTimestamp","timestamp","toDate","convertToTimestamp","dateString","fromDate","convertFirestoreToAccount","doc","data","name","accountNumber","bankName","limit","isActive","convertFirestoreToTransaction","merchant","notes","receiptUrl","accountsRef","querySnapshot","docs","error","console","Error","accountRef","accountSnap","exists","updatedAccount","transactionsRef","transactionsQuery","transactionsSnap","deletePromises","ref","all","constraints","transactionRef","transactionSnap","updatedTransaction","subscribeToAccounts","callback","snapshot","subscribeToTransactions","createDataService","useMockData"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/services/DataService.ts"],"sourcesContent":["import { Account, Transaction, FinancialSummary, TimePeriod, CustomDateRange } from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\nimport { calculateFinancialSummary } from '../utils/periodCalculations';\r\nimport { \r\n  getDocs, \r\n  getDoc, \r\n  setDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy, \r\n  limit, \r\n  onSnapshot,\r\n  addDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  QueryConstraint,\r\n  DocumentData\r\n} from 'firebase/firestore';\r\nimport { \r\n  db, \r\n  getUserAccountsCollection, \r\n  getUserTransactionsCollection, \r\n  getAccountDocRef, \r\n  getTransactionDocRef \r\n} from '../config/firebase';\r\n\r\nexport interface DataServiceConfig {\r\n  useMockData: boolean;\r\n  apiBaseUrl?: string;\r\n  apiKey?: string;\r\n}\r\n\r\nexport interface DataServiceResponse<T> {\r\n  data: T;\r\n  error?: string;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface DataService {\r\n  // Account operations\r\n  getAccounts(): Promise<Account[]>;\r\n  getAccount(id: string): Promise<Account | null>;\r\n  updateAccount(account: Account): Promise<Account>;\r\n  deleteAccount(id: string): Promise<boolean>;\r\n  \r\n  // Transaction operations\r\n  getTransactions(accountId?: string, filters?: any): Promise<Transaction[]>;\r\n  getTransaction(id: string): Promise<Transaction | null>;\r\n  updateTransaction(transaction: Transaction): Promise<Transaction>;\r\n  deleteTransaction(id: string): Promise<boolean>;\r\n  \r\n  // Financial summary operations\r\n  getFinancialSummary(\r\n    period: TimePeriod,\r\n    customDateRange?: CustomDateRange,\r\n    accountFilter?: string\r\n  ): Promise<FinancialSummary>;\r\n  \r\n  // Utility operations\r\n  searchTransactions(query: string): Promise<Transaction[]>;\r\n  getTransactionStats(accountId?: string): Promise<any>;\r\n}\r\n\r\nclass MockDataService implements DataService {\r\n  private accounts: Account[] = MOCK_ACCOUNTS;\r\n  private transactions: Transaction[] = [];\r\n\r\n  constructor() {\r\n    // Generate mock transactions for all accounts\r\n    this.generateMockTransactions();\r\n  }\r\n\r\n  private generateMockTransactions(): void {\r\n    this.transactions = [];\r\n    this.accounts.forEach(account => {\r\n      // Generate 20-50 transactions per account\r\n      const transactionCount = Math.floor(Math.random() * 30) + 20;\r\n      \r\n      for (let i = 0; i < transactionCount; i++) {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - Math.floor(Math.random() * 90)); // Random date within last 90 days\r\n        \r\n        const amount = Math.random() > 0.6 ? \r\n          -(Math.random() * 500 + 10) : // 40% chance of expense\r\n          (Math.random() * 2000 + 100); // 60% chance of income\r\n        \r\n        this.transactions.push({\r\n          id: `${account.id}-tx-${i}`,\r\n          accountId: account.id,\r\n          amount,\r\n          date: date.toISOString(),\r\n          description: this.generateMockDescription(amount),\r\n          category: this.generateMockCategory(amount),\r\n          tags: this.generateMockTags(amount),\r\n          pending: false,\r\n          cleanMerchant: {\r\n            cleanName: this.generateMockMerchant(amount),\r\n            logo: '',\r\n            suggestedCategory: this.generateMockCategory(amount),\r\n            original: this.generateMockMerchant(amount),\r\n          },\r\n          createdAt: date.toISOString(),\r\n          updatedAt: date.toISOString(),\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private generateMockDescription(amount: number): string {\r\n    const descriptions = amount > 0 ? [\r\n      'Salary Deposit',\r\n      'Freelance Payment',\r\n      'Investment Dividend',\r\n      'Refund',\r\n      'Bonus Payment'\r\n    ] : [\r\n      'Grocery Store',\r\n      'Gas Station',\r\n      'Restaurant',\r\n      'Online Purchase',\r\n      'Utility Bill',\r\n      'Subscription',\r\n      'Entertainment'\r\n    ];\r\n    \r\n    return descriptions[Math.floor(Math.random() * descriptions.length)];\r\n  }\r\n\r\n  private generateMockMerchant(amount: number): string {\r\n    const merchants = amount > 0 ? [\r\n      'Employer Corp',\r\n      'Freelance Platform',\r\n      'Investment Bank',\r\n      'Online Store'\r\n    ] : [\r\n      'Walmart',\r\n      'Shell Gas',\r\n      'McDonald\\'s',\r\n      'Amazon',\r\n      'Netflix',\r\n      'Spotify',\r\n      'Electric Company'\r\n    ];\r\n    \r\n    return merchants[Math.floor(Math.random() * merchants.length)];\r\n  }\r\n\r\n  private generateMockCategory(amount: number): string {\r\n    const categories = amount > 0 ? [\r\n      'Income',\r\n      'Investment',\r\n      'Refund'\r\n    ] : [\r\n      'Food & Dining',\r\n      'Transportation',\r\n      'Shopping',\r\n      'Entertainment',\r\n      'Utilities',\r\n      'Healthcare'\r\n    ];\r\n    \r\n    return categories[Math.floor(Math.random() * categories.length)];\r\n  }\r\n\r\n  private generateMockTags(amount: number): string[] {\r\n    const tags = amount > 0 ? ['income', 'salary'] : ['expense', 'daily'];\r\n    \r\n    // Add random tags\r\n    const allTags = ['groceries', 'transport', 'entertainment', 'utilities', 'shopping'];\r\n    const randomTag = allTags[Math.floor(Math.random() * allTags.length)];\r\n    if (Math.random() > 0.5) {\r\n      tags.push(randomTag);\r\n    }\r\n    \r\n    return tags;\r\n  }\r\n\r\n  async getAccounts(): Promise<Account[]> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    return [...this.accounts];\r\n  }\r\n\r\n  async getAccount(id: string): Promise<Account | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.accounts.find(account => account.id === id) || null;\r\n  }\r\n\r\n  async updateAccount(account: Account): Promise<Account> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = this.accounts.findIndex(a => a.id === account.id);\r\n    if (index !== -1) {\r\n      this.accounts[index] = account;\r\n    }\r\n    return account;\r\n  }\r\n\r\n  async deleteAccount(id: string): Promise<boolean> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = this.accounts.findIndex(account => account.id === id);\r\n    if (index !== -1) {\r\n      this.accounts.splice(index, 1);\r\n      // Remove associated transactions\r\n      this.transactions = this.transactions.filter(tx => tx.accountId !== id);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async getTransactions(accountId?: string, filters?: any): Promise<Transaction[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 150));\r\n    let filteredTransactions = [...this.transactions];\r\n    \r\n    if (accountId) {\r\n      filteredTransactions = filteredTransactions.filter(tx => tx.accountId === accountId);\r\n    }\r\n    \r\n    // Apply filters if provided\r\n    if (filters) {\r\n      if (filters.category) {\r\n        filteredTransactions = filteredTransactions.filter(tx => tx.category === filters.category);\r\n      }\r\n      if (filters.type) {\r\n        const isIncome = filters.type === 'income';\r\n        filteredTransactions = filteredTransactions.filter(tx => (tx.amount > 0) === isIncome);\r\n      }\r\n      if (filters.dateRange) {\r\n        const { startDate, endDate } = filters.dateRange;\r\n        filteredTransactions = filteredTransactions.filter(tx => {\r\n          const txDate = new Date(tx.date);\r\n          return txDate >= startDate && txDate <= endDate;\r\n        });\r\n      }\r\n    }\r\n    \r\n    return filteredTransactions;\r\n  }\r\n\r\n  async getTransaction(id: string): Promise<Transaction | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.transactions.find(transaction => transaction.id === id) || null;\r\n  }\r\n\r\n  async updateTransaction(transaction: Transaction): Promise<Transaction> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = this.transactions.findIndex(tx => tx.id === transaction.id);\r\n    if (index !== -1) {\r\n      this.transactions[index] = transaction;\r\n    }\r\n    return transaction;\r\n  }\r\n\r\n  async deleteTransaction(id: string): Promise<boolean> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = this.transactions.findIndex(transaction => transaction.id === id);\r\n    if (index !== -1) {\r\n      this.transactions.splice(index, 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async getFinancialSummary(\r\n    period: TimePeriod,\r\n    customDateRange?: CustomDateRange,\r\n    accountFilter?: string\r\n  ): Promise<FinancialSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    let filteredTransactions = [...this.transactions];\r\n    \r\n    // Filter by account type if specified\r\n    if (accountFilter && accountFilter !== 'both') {\r\n      const filteredAccounts = this.accounts.filter(account => {\r\n        if (accountFilter === 'personal') return !account.type.includes('BUSINESS');\r\n        if (accountFilter === 'business') return account.type.includes('BUSINESS');\r\n        return true;\r\n      });\r\n      const accountIds = filteredAccounts.map(account => account.id);\r\n      filteredTransactions = filteredTransactions.filter(tx => accountIds.includes(tx.accountId));\r\n    }\r\n    \r\n    const totalBalance = this.accounts.reduce((sum, account) => sum + account.balance, 0);\r\n    \r\n    return calculateFinancialSummary(filteredTransactions, period, customDateRange, totalBalance);\r\n  }\r\n\r\n  async searchTransactions(query: string): Promise<Transaction[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    const lowerQuery = query.toLowerCase();\r\n    \r\n    return this.transactions.filter(transaction => \r\n      transaction.description.toLowerCase().includes(lowerQuery) ||\r\n      transaction.cleanMerchant.cleanName.toLowerCase().includes(lowerQuery) ||\r\n      transaction.category.toLowerCase().includes(lowerQuery) ||\r\n      transaction.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\r\n    );\r\n  }\r\n\r\n  async getTransactionStats(accountId?: string): Promise<any> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    let filteredTransactions = [...this.transactions];\r\n    if (accountId) {\r\n      filteredTransactions = filteredTransactions.filter(tx => tx.accountId === accountId);\r\n    }\r\n    \r\n    const totalIncome = filteredTransactions\r\n      .filter(tx => tx.amount > 0)\r\n      .reduce((sum, tx) => sum + tx.amount, 0);\r\n    \r\n    const totalExpenses = filteredTransactions\r\n      .filter(tx => tx.amount < 0)\r\n      .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\r\n    \r\n    const categoryStats = filteredTransactions.reduce((stats, tx) => {\r\n      const category = tx.category;\r\n      if (!stats[category]) {\r\n        stats[category] = { count: 0, total: 0 };\r\n      }\r\n      stats[category].count++;\r\n      stats[category].total += Math.abs(tx.amount);\r\n      return stats;\r\n    }, {} as Record<string, { count: number; total: number }>);\r\n    \r\n    return {\r\n      totalTransactions: filteredTransactions.length,\r\n      totalIncome,\r\n      totalExpenses,\r\n      netAmount: totalIncome - totalExpenses,\r\n      categoryStats,\r\n      averageTransactionAmount: filteredTransactions.length > 0 \r\n        ? filteredTransactions.reduce((sum, tx) => sum + Math.abs(tx.amount), 0) / filteredTransactions.length \r\n        : 0\r\n    };\r\n  }\r\n}\r\n\r\nclass FirebaseDataService implements DataService {\r\n  private config: DataServiceConfig;\r\n  private userId: string;\r\n\r\n  constructor(config: DataServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n  }\r\n\r\n  // Helper method to convert Firestore timestamp to ISO string\r\n  private convertTimestamp(timestamp: Timestamp | string): string {\r\n    if (typeof timestamp === 'string') return timestamp;\r\n    return timestamp.toDate().toISOString();\r\n  }\r\n\r\n  // Helper method to convert ISO string to Firestore timestamp\r\n  private convertToTimestamp(dateString: string): Timestamp {\r\n    return Timestamp.fromDate(new Date(dateString));\r\n  }\r\n\r\n  // Helper method to convert Firestore document to Account\r\n  private convertFirestoreToAccount(doc: DocumentData): Account {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      name: data.name,\r\n      type: data.type,\r\n      balance: data.balance || 0,\r\n      accountNumber: data.accountNumber || '',\r\n      bankName: data.bankName || '',\r\n      limit: data.limit,\r\n      isActive: data.isActive !== false,\r\n      createdAt: this.convertTimestamp(data.createdAt || serverTimestamp()),\r\n      updatedAt: this.convertTimestamp(data.updatedAt || serverTimestamp()),\r\n    };\r\n  }\r\n\r\n  // Helper method to convert Firestore document to Transaction\r\n  private convertFirestoreToTransaction(doc: DocumentData): Transaction {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      accountId: data.accountId,\r\n      description: data.description,\r\n      amount: data.amount,\r\n      date: this.convertTimestamp(data.date),\r\n      category: data.category,\r\n      tags: data.tags || [],\r\n      pending: data.pending || false,\r\n      cleanMerchant: data.cleanMerchant || {\r\n        cleanName: data.merchant || '',\r\n        logo: '',\r\n        suggestedCategory: data.category || '',\r\n        original: data.merchant || '',\r\n      },\r\n      notes: data.notes,\r\n      receiptUrl: data.receiptUrl,\r\n      createdAt: this.convertTimestamp(data.createdAt || serverTimestamp()),\r\n      updatedAt: this.convertTimestamp(data.updatedAt || serverTimestamp()),\r\n    };\r\n  }\r\n\r\n  async getAccounts(): Promise<Account[]> {\r\n    try {\r\n      const accountsRef = getUserAccountsCollection(this.userId);\r\n      const querySnapshot = await getDocs(accountsRef);\r\n      \r\n      return querySnapshot.docs.map(doc => this.convertFirestoreToAccount(doc));\r\n    } catch (error) {\r\n      console.error('Error fetching accounts:', error);\r\n      throw new Error('Failed to fetch accounts');\r\n    }\r\n  }\r\n\r\n  async getAccount(id: string): Promise<Account | null> {\r\n    try {\r\n      const accountRef = getAccountDocRef(this.userId, id);\r\n      const accountSnap = await getDoc(accountRef);\r\n      \r\n      if (accountSnap.exists()) {\r\n        return this.convertFirestoreToAccount(accountSnap);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching account:', error);\r\n      throw new Error('Failed to fetch account');\r\n    }\r\n  }\r\n\r\n  async updateAccount(account: Account): Promise<Account> {\r\n    try {\r\n      const accountRef = getAccountDocRef(this.userId, account.id);\r\n      const updatedAccount = {\r\n        ...account,\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      await setDoc(accountRef, updatedAccount);\r\n      return account;\r\n    } catch (error) {\r\n      console.error('Error updating account:', error);\r\n      throw new Error('Failed to update account');\r\n    }\r\n  }\r\n\r\n  async deleteAccount(id: string): Promise<boolean> {\r\n    try {\r\n      const accountRef = getAccountDocRef(this.userId, id);\r\n      await deleteDoc(accountRef);\r\n      \r\n      // Also delete associated transactions\r\n      const transactionsRef = getUserTransactionsCollection(this.userId);\r\n      const transactionsQuery = query(transactionsRef, where('accountId', '==', id));\r\n      const transactionsSnap = await getDocs(transactionsQuery);\r\n      \r\n      const deletePromises = transactionsSnap.docs.map(doc => deleteDoc(doc.ref));\r\n      await Promise.all(deletePromises);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting account:', error);\r\n      throw new Error('Failed to delete account');\r\n    }\r\n  }\r\n\r\n  async getTransactions(accountId?: string, filters?: any): Promise<Transaction[]> {\r\n    try {\r\n      const transactionsRef = getUserTransactionsCollection(this.userId);\r\n      const constraints: QueryConstraint[] = [orderBy('date', 'desc')];\r\n      \r\n      if (accountId) {\r\n        constraints.push(where('accountId', '==', accountId));\r\n      }\r\n      \r\n      // Apply filters\r\n      if (filters) {\r\n        if (filters.category) {\r\n          constraints.push(where('category', '==', filters.category));\r\n        }\r\n        if (filters.type) {\r\n          const isIncome = filters.type === 'income';\r\n          constraints.push(where('amount', isIncome ? '>' : '<', 0));\r\n        }\r\n        if (filters.dateRange) {\r\n          constraints.push(\r\n            where('date', '>=', this.convertToTimestamp(filters.dateRange.startDate)),\r\n            where('date', '<=', this.convertToTimestamp(filters.dateRange.endDate))\r\n          );\r\n        }\r\n      }\r\n      \r\n      const transactionsQuery = query(transactionsRef, ...constraints);\r\n      const querySnapshot = await getDocs(transactionsQuery);\r\n      \r\n      return querySnapshot.docs.map(doc => this.convertFirestoreToTransaction(doc));\r\n    } catch (error) {\r\n      console.error('Error fetching transactions:', error);\r\n      throw new Error('Failed to fetch transactions');\r\n    }\r\n  }\r\n\r\n  async getTransaction(id: string): Promise<Transaction | null> {\r\n    try {\r\n      const transactionRef = getTransactionDocRef(this.userId, id);\r\n      const transactionSnap = await getDoc(transactionRef);\r\n      \r\n      if (transactionSnap.exists()) {\r\n        return this.convertFirestoreToTransaction(transactionSnap);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching transaction:', error);\r\n      throw new Error('Failed to fetch transaction');\r\n    }\r\n  }\r\n\r\n  async updateTransaction(transaction: Transaction): Promise<Transaction> {\r\n    try {\r\n      const transactionRef = getTransactionDocRef(this.userId, transaction.id);\r\n      const updatedTransaction = {\r\n        ...transaction,\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      await setDoc(transactionRef, updatedTransaction);\r\n      return transaction;\r\n    } catch (error) {\r\n      console.error('Error updating transaction:', error);\r\n      throw new Error('Failed to update transaction');\r\n    }\r\n  }\r\n\r\n  async deleteTransaction(id: string): Promise<boolean> {\r\n    try {\r\n      const transactionRef = getTransactionDocRef(this.userId, id);\r\n      await deleteDoc(transactionRef);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting transaction:', error);\r\n      throw new Error('Failed to delete transaction');\r\n    }\r\n  }\r\n\r\n  async getFinancialSummary(\r\n    period: TimePeriod,\r\n    customDateRange?: CustomDateRange,\r\n    accountFilter?: string\r\n  ): Promise<FinancialSummary> {\r\n    try {\r\n      // Get all transactions for the period\r\n      const transactions = await this.getTransactions();\r\n      \r\n      // Filter by account type if specified\r\n      let filteredTransactions = transactions;\r\n      if (accountFilter && accountFilter !== 'both') {\r\n        const accounts = await this.getAccounts();\r\n        const filteredAccounts = accounts.filter(account => {\r\n          if (accountFilter === 'personal') return !account.type.includes('BUSINESS');\r\n          if (accountFilter === 'business') return account.type.includes('BUSINESS');\r\n          return true;\r\n        });\r\n        const accountIds = filteredAccounts.map(account => account.id);\r\n        filteredTransactions = transactions.filter(tx => accountIds.includes(tx.accountId));\r\n      }\r\n      \r\n      const totalBalance = (await this.getAccounts()).reduce((sum, account) => sum + account.balance, 0);\r\n      \r\n      return calculateFinancialSummary(filteredTransactions, period, customDateRange, totalBalance);\r\n    } catch (error) {\r\n      console.error('Error calculating financial summary:', error);\r\n      throw new Error('Failed to calculate financial summary');\r\n    }\r\n  }\r\n\r\n  async searchTransactions(query: string): Promise<Transaction[]> {\r\n    try {\r\n      // Firestore doesn't support full-text search, so we'll fetch all transactions and filter client-side\r\n      // In production, you might want to use Algolia or similar for better search\r\n      const transactions = await this.getTransactions();\r\n      const lowerQuery = query.toLowerCase();\r\n      \r\n      return transactions.filter(transaction => \r\n        transaction.description.toLowerCase().includes(lowerQuery) ||\r\n        transaction.cleanMerchant.cleanName.toLowerCase().includes(lowerQuery) ||\r\n        transaction.category.toLowerCase().includes(lowerQuery) ||\r\n        transaction.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\r\n      );\r\n    } catch (error) {\r\n      console.error('Error searching transactions:', error);\r\n      throw new Error('Failed to search transactions');\r\n    }\r\n  }\r\n\r\n  async getTransactionStats(accountId?: string): Promise<any> {\r\n    try {\r\n      const transactions = await this.getTransactions(accountId);\r\n      \r\n      const totalIncome = transactions\r\n        .filter(tx => tx.amount > 0)\r\n        .reduce((sum, tx) => sum + tx.amount, 0);\r\n      \r\n      const totalExpenses = transactions\r\n        .filter(tx => tx.amount < 0)\r\n        .reduce((sum, tx) => sum + Math.abs(tx.amount), 0);\r\n      \r\n      const categoryStats = transactions.reduce((stats, tx) => {\r\n        const category = tx.category;\r\n        if (!stats[category]) {\r\n          stats[category] = { count: 0, total: 0 };\r\n        }\r\n        stats[category].count++;\r\n        stats[category].total += Math.abs(tx.amount);\r\n        return stats;\r\n      }, {} as Record<string, { count: number; total: number }>);\r\n      \r\n      return {\r\n        totalTransactions: transactions.length,\r\n        totalIncome,\r\n        totalExpenses,\r\n        netAmount: totalIncome - totalExpenses,\r\n        categoryStats,\r\n        averageTransactionAmount: transactions.length > 0 \r\n          ? transactions.reduce((sum, tx) => sum + Math.abs(tx.amount), 0) / transactions.length \r\n          : 0\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating transaction stats:', error);\r\n      throw new Error('Failed to calculate transaction stats');\r\n    }\r\n  }\r\n\r\n  // Real-time listeners for live data synchronization\r\n  subscribeToAccounts(callback: (accounts: Account[]) => void) {\r\n    const accountsRef = getUserAccountsCollection(this.userId);\r\n    return onSnapshot(accountsRef, (snapshot) => {\r\n      const accounts = snapshot.docs.map(doc => this.convertFirestoreToAccount(doc));\r\n      callback(accounts);\r\n    });\r\n  }\r\n\r\n  subscribeToTransactions(callback: (transactions: Transaction[]) => void, accountId?: string) {\r\n    const transactionsRef = getUserTransactionsCollection(this.userId);\r\n    const constraints: QueryConstraint[] = [orderBy('date', 'desc')];\r\n    \r\n    if (accountId) {\r\n      constraints.push(where('accountId', '==', accountId));\r\n    }\r\n    \r\n    const transactionsQuery = query(transactionsRef, ...constraints);\r\n    return onSnapshot(transactionsQuery, (snapshot) => {\r\n      const transactions = snapshot.docs.map(doc => this.convertFirestoreToTransaction(doc));\r\n      callback(transactions);\r\n    });\r\n  }\r\n}\r\n\r\nexport function createDataService(config: DataServiceConfig, userId?: string): DataService {\r\n  if (config.useMockData) {\r\n    return new MockDataService();\r\n  } else {\r\n    if (!userId) {\r\n      throw new Error('User ID is required for Firebase DataService');\r\n    }\r\n    return new FirebaseDataService(config, userId);\r\n  }\r\n}\r\n\r\n// Export classes for testing\r\nexport { MockDataService, FirebaseDataService };\r\n\r\n// Default export for convenience\r\nexport default createDataService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}