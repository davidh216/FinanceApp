{"ast":null,"code":"import{MOCK_ACCOUNTS}from'../constants/financial';import{createDataService}from'../services/DataService';import{useState}from'react';export class DataMigrationService{constructor(config,userId){this.config=void 0;this.userId=void 0;this.dataService=void 0;this.config=config;this.userId=userId;this.dataService=createDataService(config,userId);}/**\r\n   * Migrate mock data to Firebase\r\n   */async migrateMockDataToFirebase(onProgress){try{// Initialize progress\nconst totalAccounts=MOCK_ACCOUNTS.length;const totalTransactions=MOCK_ACCOUNTS.reduce((sum,account)=>{var _account$transactions;return sum+(((_account$transactions=account.transactions)===null||_account$transactions===void 0?void 0:_account$transactions.length)||0);},0);let accountsMigrated=0;let transactionsMigrated=0;// Update progress\nconst updateProgress=(status,error)=>{onProgress===null||onProgress===void 0?void 0:onProgress({accounts:accountsMigrated,transactions:transactionsMigrated,totalAccounts,totalTransactions,status,error});};updateProgress('migrating');// Migrate accounts\nfor(const mockAccount of MOCK_ACCOUNTS){try{// Create account without transactions first\nconst accountData={...mockAccount,transactions:undefined// Remove transactions from account\n};await this.dataService.updateAccount(accountData);accountsMigrated++;// Migrate transactions for this account\nif(mockAccount.transactions){for(const transaction of mockAccount.transactions){try{await this.dataService.updateTransaction(transaction);transactionsMigrated++;}catch(error){console.error(`Failed to migrate transaction ${transaction.id}:`,error);// Continue with other transactions\n}}}updateProgress('migrating');}catch(error){console.error(`Failed to migrate account ${mockAccount.id}:`,error);// Continue with other accounts\n}}updateProgress('completed');return{success:true,accountsMigrated,transactionsMigrated};}catch(error){console.error('Migration failed:',error);const errorMessage=error instanceof Error?error.message:'Unknown error occurred';onProgress===null||onProgress===void 0?void 0:onProgress({accounts:0,transactions:0,totalAccounts:MOCK_ACCOUNTS.length,totalTransactions:MOCK_ACCOUNTS.reduce((sum,account)=>{var _account$transactions2;return sum+(((_account$transactions2=account.transactions)===null||_account$transactions2===void 0?void 0:_account$transactions2.length)||0);},0),status:'error',error:errorMessage});return{success:false,accountsMigrated:0,transactionsMigrated:0,error:errorMessage};}}/**\r\n   * Check if user has existing data in Firebase\r\n   */async hasExistingData(){try{const accounts=await this.dataService.getAccounts();const transactions=await this.dataService.getTransactions();return accounts.length>0||transactions.length>0;}catch(error){console.error('Error checking existing data:',error);return false;}}/**\r\n   * Get migration statistics\r\n   */async getMigrationStats(){const mockAccounts=MOCK_ACCOUNTS.length;const mockTransactions=MOCK_ACCOUNTS.reduce((sum,account)=>{var _account$transactions3;return sum+(((_account$transactions3=account.transactions)===null||_account$transactions3===void 0?void 0:_account$transactions3.length)||0);},0);let firebaseAccounts=0;let firebaseTransactions=0;try{const accounts=await this.dataService.getAccounts();const transactions=await this.dataService.getTransactions();firebaseAccounts=accounts.length;firebaseTransactions=transactions.length;}catch(error){console.error('Error getting Firebase stats:',error);}return{mockAccounts,mockTransactions,firebaseAccounts,firebaseTransactions};}/**\r\n   * Clear all Firebase data (for testing/reset purposes)\r\n   */async clearFirebaseData(){try{const accounts=await this.dataService.getAccounts();const transactions=await this.dataService.getTransactions();// Delete all transactions first\nfor(const transaction of transactions){await this.dataService.deleteTransaction(transaction.id);}// Delete all accounts\nfor(const account of accounts){await this.dataService.deleteAccount(account.id);}}catch(error){console.error('Error clearing Firebase data:',error);throw error;}}}/**\r\n * Hook for data migration\r\n */export const useDataMigration=userId=>{const[migrationProgress,setMigrationProgress]=useState({accounts:0,transactions:0,totalAccounts:0,totalTransactions:0,status:'idle'});const[isMigrating,setIsMigrating]=useState(false);const startMigration=async()=>{if(isMigrating)return;setIsMigrating(true);const config={useMockData:false,apiBaseUrl:process.env.REACT_APP_API_BASE_URL,apiKey:process.env.REACT_APP_API_KEY};const migrationService=new DataMigrationService(config,userId);try{await migrationService.migrateMockDataToFirebase(setMigrationProgress);}catch(error){console.error('Migration failed:',error);}finally{setIsMigrating(false);}};const checkExistingData=async()=>{const config={useMockData:false,apiBaseUrl:process.env.REACT_APP_API_BASE_URL,apiKey:process.env.REACT_APP_API_KEY};const migrationService=new DataMigrationService(config,userId);return await migrationService.hasExistingData();};const getStats=async()=>{const config={useMockData:false,apiBaseUrl:process.env.REACT_APP_API_BASE_URL,apiKey:process.env.REACT_APP_API_KEY};const migrationService=new DataMigrationService(config,userId);return await migrationService.getMigrationStats();};return{migrationProgress,isMigrating,startMigration,checkExistingData,getStats};};","map":{"version":3,"names":["MOCK_ACCOUNTS","createDataService","useState","DataMigrationService","constructor","config","userId","dataService","migrateMockDataToFirebase","onProgress","totalAccounts","length","totalTransactions","reduce","sum","account","_account$transactions","transactions","accountsMigrated","transactionsMigrated","updateProgress","status","error","accounts","mockAccount","accountData","undefined","updateAccount","transaction","updateTransaction","console","id","success","errorMessage","Error","message","_account$transactions2","hasExistingData","getAccounts","getTransactions","getMigrationStats","mockAccounts","mockTransactions","_account$transactions3","firebaseAccounts","firebaseTransactions","clearFirebaseData","deleteTransaction","deleteAccount","useDataMigration","migrationProgress","setMigrationProgress","isMigrating","setIsMigrating","startMigration","useMockData","apiBaseUrl","process","env","REACT_APP_API_BASE_URL","apiKey","REACT_APP_API_KEY","migrationService","checkExistingData","getStats"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/dataMigration.ts"],"sourcesContent":["import { Account, Transaction } from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\nimport { createDataService, DataServiceConfig } from '../services/DataService';\r\nimport { useState } from 'react';\r\n\r\ninterface MigrationProgress {\r\n  accounts: number;\r\n  transactions: number;\r\n  totalAccounts: number;\r\n  totalTransactions: number;\r\n  status: 'idle' | 'migrating' | 'completed' | 'error';\r\n  error?: string;\r\n}\r\n\r\ninterface MigrationResult {\r\n  success: boolean;\r\n  accountsMigrated: number;\r\n  transactionsMigrated: number;\r\n  error?: string;\r\n}\r\n\r\nexport class DataMigrationService {\r\n  private config: DataServiceConfig;\r\n  private userId: string;\r\n  private dataService: any;\r\n\r\n  constructor(config: DataServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n    this.dataService = createDataService(config, userId);\r\n  }\r\n\r\n  /**\r\n   * Migrate mock data to Firebase\r\n   */\r\n  async migrateMockDataToFirebase(\r\n    onProgress?: (progress: MigrationProgress) => void\r\n  ): Promise<MigrationResult> {\r\n    try {\r\n      // Initialize progress\r\n      const totalAccounts = MOCK_ACCOUNTS.length;\r\n      const totalTransactions = MOCK_ACCOUNTS.reduce(\r\n        (sum, account) => sum + (account.transactions?.length || 0),\r\n        0\r\n      );\r\n\r\n      let accountsMigrated = 0;\r\n      let transactionsMigrated = 0;\r\n\r\n      // Update progress\r\n      const updateProgress = (status: MigrationProgress['status'], error?: string) => {\r\n        onProgress?.({\r\n          accounts: accountsMigrated,\r\n          transactions: transactionsMigrated,\r\n          totalAccounts,\r\n          totalTransactions,\r\n          status,\r\n          error,\r\n        });\r\n      };\r\n\r\n      updateProgress('migrating');\r\n\r\n      // Migrate accounts\r\n      for (const mockAccount of MOCK_ACCOUNTS) {\r\n        try {\r\n          // Create account without transactions first\r\n          const accountData = {\r\n            ...mockAccount,\r\n            transactions: undefined, // Remove transactions from account\r\n          };\r\n\r\n          await this.dataService.updateAccount(accountData);\r\n          accountsMigrated++;\r\n\r\n          // Migrate transactions for this account\r\n          if (mockAccount.transactions) {\r\n            for (const transaction of mockAccount.transactions) {\r\n              try {\r\n                await this.dataService.updateTransaction(transaction);\r\n                transactionsMigrated++;\r\n              } catch (error) {\r\n                console.error(`Failed to migrate transaction ${transaction.id}:`, error);\r\n                // Continue with other transactions\r\n              }\r\n            }\r\n          }\r\n\r\n          updateProgress('migrating');\r\n        } catch (error) {\r\n          console.error(`Failed to migrate account ${mockAccount.id}:`, error);\r\n          // Continue with other accounts\r\n        }\r\n      }\r\n\r\n      updateProgress('completed');\r\n\r\n      return {\r\n        success: true,\r\n        accountsMigrated,\r\n        transactionsMigrated,\r\n      };\r\n    } catch (error) {\r\n      console.error('Migration failed:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      \r\n      onProgress?.({\r\n        accounts: 0,\r\n        transactions: 0,\r\n        totalAccounts: MOCK_ACCOUNTS.length,\r\n        totalTransactions: MOCK_ACCOUNTS.reduce(\r\n          (sum, account) => sum + (account.transactions?.length || 0),\r\n          0\r\n        ),\r\n        status: 'error',\r\n        error: errorMessage,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        accountsMigrated: 0,\r\n        transactionsMigrated: 0,\r\n        error: errorMessage,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user has existing data in Firebase\r\n   */\r\n  async hasExistingData(): Promise<boolean> {\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n      \r\n      return accounts.length > 0 || transactions.length > 0;\r\n    } catch (error) {\r\n      console.error('Error checking existing data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get migration statistics\r\n   */\r\n  async getMigrationStats(): Promise<{\r\n    mockAccounts: number;\r\n    mockTransactions: number;\r\n    firebaseAccounts: number;\r\n    firebaseTransactions: number;\r\n  }> {\r\n    const mockAccounts = MOCK_ACCOUNTS.length;\r\n    const mockTransactions = MOCK_ACCOUNTS.reduce(\r\n      (sum, account) => sum + (account.transactions?.length || 0),\r\n      0\r\n    );\r\n\r\n    let firebaseAccounts = 0;\r\n    let firebaseTransactions = 0;\r\n\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n      \r\n      firebaseAccounts = accounts.length;\r\n      firebaseTransactions = transactions.length;\r\n    } catch (error) {\r\n      console.error('Error getting Firebase stats:', error);\r\n    }\r\n\r\n    return {\r\n      mockAccounts,\r\n      mockTransactions,\r\n      firebaseAccounts,\r\n      firebaseTransactions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear all Firebase data (for testing/reset purposes)\r\n   */\r\n  async clearFirebaseData(): Promise<void> {\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n\r\n      // Delete all transactions first\r\n      for (const transaction of transactions) {\r\n        await this.dataService.deleteTransaction(transaction.id);\r\n      }\r\n\r\n      // Delete all accounts\r\n      for (const account of accounts) {\r\n        await this.dataService.deleteAccount(account.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing Firebase data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hook for data migration\r\n */\r\nexport const useDataMigration = (userId: string) => {\r\n  const [migrationProgress, setMigrationProgress] = useState<MigrationProgress>({\r\n    accounts: 0,\r\n    transactions: 0,\r\n    totalAccounts: 0,\r\n    totalTransactions: 0,\r\n    status: 'idle',\r\n  });\r\n\r\n  const [isMigrating, setIsMigrating] = useState(false);\r\n\r\n  const startMigration = async () => {\r\n    if (isMigrating) return;\r\n\r\n    setIsMigrating(true);\r\n    \r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    \r\n    try {\r\n      await migrationService.migrateMockDataToFirebase(setMigrationProgress);\r\n    } catch (error) {\r\n      console.error('Migration failed:', error);\r\n    } finally {\r\n      setIsMigrating(false);\r\n    }\r\n  };\r\n\r\n  const checkExistingData = async () => {\r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    return await migrationService.hasExistingData();\r\n  };\r\n\r\n  const getStats = async () => {\r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    return await migrationService.getMigrationStats();\r\n  };\r\n\r\n  return {\r\n    migrationProgress,\r\n    isMigrating,\r\n    startMigration,\r\n    checkExistingData,\r\n    getStats,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}