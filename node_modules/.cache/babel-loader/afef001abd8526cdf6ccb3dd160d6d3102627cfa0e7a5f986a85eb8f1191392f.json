{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X2DHHWAN\\\\Desktop\\\\Finance-App\\\\src\\\\components\\\\charts\\\\ChartFactory.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { BaseChart } from './BaseChart';\nimport { BudgetVsActualChart } from './BudgetVsActualChart';\nimport { processBalanceTrendData, processIncomeExpenseData, processCategorySpendingData, CHART_COLORS } from '../../utils/chartUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChartFactory = ({\n  chartType,\n  transactions,\n  accounts,\n  period,\n  budgets = [],\n  height = 300,\n  className = '',\n  onDataPointClick,\n  loading = false,\n  error = null,\n  customOptions = {}\n}) => {\n  _s();\n  const chartConfig = useMemo(() => getChartConfig(chartType, period), [chartType, period]);\n  const chartData = useMemo(() => {\n    switch (chartType) {\n      case 'balance':\n        {\n          const dataPoints = processBalanceTrendData(transactions, accounts, period);\n          return {\n            labels: dataPoints.map(point => point.label),\n            datasets: [{\n              label: 'Balance',\n              data: dataPoints.map(point => point.value),\n              borderColor: CHART_COLORS.primary,\n              backgroundColor: CHART_COLORS.primary + '20',\n              fill: true,\n              tension: 0.4\n            }]\n          };\n        }\n      case 'income-expense':\n        {\n          const {\n            income,\n            expenses\n          } = processIncomeExpenseData(transactions, period);\n          return {\n            labels: income.map(point => point.label),\n            datasets: [{\n              label: 'Income',\n              data: income.map(point => point.value),\n              backgroundColor: CHART_COLORS.success,\n              borderColor: CHART_COLORS.success\n            }, {\n              label: 'Expenses',\n              data: expenses.map(point => point.value),\n              backgroundColor: CHART_COLORS.danger,\n              borderColor: CHART_COLORS.danger\n            }]\n          };\n        }\n      case 'category':\n        {\n          const dataPoints = processCategorySpendingData(transactions, period);\n          return {\n            labels: dataPoints.map(point => point.label),\n            datasets: [{\n              label: 'Spending',\n              data: dataPoints.map(point => point.value),\n              backgroundColor: dataPoints.map((_, index) => Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]),\n              borderColor: dataPoints.map((_, index) => Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length])\n            }]\n          };\n        }\n      case 'budget-vs-actual':\n        // Budget vs actual is handled by dedicated component\n        return {\n          labels: [],\n          datasets: []\n        };\n      default:\n        return {\n          labels: [],\n          datasets: []\n        };\n    }\n  }, [chartType, transactions, accounts, period]);\n  const chartOptions = useMemo(() => {\n    const baseOptions = getBaseOptions(chartType, chartConfig.title);\n    return {\n      ...baseOptions,\n      ...customOptions\n    };\n  }, [chartType, chartConfig.title, customOptions]);\n  const handleChartClick = (event, elements) => {\n    if (elements.length > 0 && onDataPointClick) {\n      const dataIndex = elements[0].index;\n      const datasetIndex = elements[0].datasetIndex;\n\n      // Get the appropriate data point based on chart type\n      let dataPoint;\n      switch (chartType) {\n        case 'balance':\n          dataPoint = processBalanceTrendData(transactions, accounts, period)[dataIndex];\n          break;\n        case 'income-expense':\n          const {\n            income,\n            expenses\n          } = processIncomeExpenseData(transactions, period);\n          dataPoint = datasetIndex === 0 ? income[dataIndex] : expenses[dataIndex];\n          dataPoint.type = datasetIndex === 0 ? 'income' : 'expense';\n          break;\n        case 'category':\n          dataPoint = processCategorySpendingData(transactions, period)[dataIndex];\n          break;\n        default:\n          dataPoint = null;\n      }\n      if (dataPoint) {\n        onDataPointClick(dataPoint, chartType);\n      }\n    }\n  };\n\n  // Special handling for budget vs actual chart\n  if (chartType === 'budget-vs-actual') {\n    return /*#__PURE__*/_jsxDEV(BudgetVsActualChart, {\n      budgets: budgets,\n      transactions: transactions,\n      period: period,\n      height: height,\n      className: className,\n      onDataPointClick: dataPoint => onDataPointClick === null || onDataPointClick === void 0 ? void 0 : onDataPointClick(dataPoint, chartType),\n      loading: loading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `bg-white rounded-lg shadow-sm border p-6 ${className}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-pulse\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-4 bg-gray-200 rounded w-1/4 mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64 bg-gray-200 rounded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `bg-white rounded-lg shadow-sm border p-6 ${className}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-red-600\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Error loading chart: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `bg-white rounded-lg shadow-sm border p-6 ${className}`,\n    children: /*#__PURE__*/_jsxDEV(BaseChart, {\n      type: getChartType(chartType),\n      data: chartData,\n      options: chartOptions,\n      height: height,\n      width: \"100%\",\n      onChartClick: handleChartClick,\n      loading: loading,\n      error: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper functions\n_s(ChartFactory, \"pVmdGAHWdw6KDjqkfu2o5sJqJIs=\");\n_c = ChartFactory;\nconst getChartConfig = (chartType, period) => {\n  const periodText = period.charAt(0).toUpperCase() + period.slice(1);\n  switch (chartType) {\n    case 'balance':\n      return {\n        title: 'Balance Trend',\n        description: `Shows your account balance over the ${period} period`\n      };\n    case 'income-expense':\n      return {\n        title: 'Income vs Expenses',\n        description: `Compares your income and expenses for the ${period}`\n      };\n    case 'category':\n      return {\n        title: 'Spending by Category',\n        description: `Breakdown of your spending by category for the ${period}`\n      };\n    case 'budget-vs-actual':\n      return {\n        title: 'Budget vs Actual',\n        description: `Shows how your spending compares to your budget for the ${period}`\n      };\n    default:\n      return {\n        title: 'Chart',\n        description: 'Financial data visualization'\n      };\n  }\n};\nconst getChartType = chartType => {\n  switch (chartType) {\n    case 'balance':\n      return 'line';\n    case 'income-expense':\n      return 'bar';\n    case 'category':\n      return 'doughnut';\n    case 'budget-vs-actual':\n      return 'bar';\n    default:\n      return 'line';\n  }\n};\nconst getBaseOptions = (chartType, title) => {\n  const baseOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: false\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            size: 12\n          },\n          color: '#374151'\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#fff',\n        bodyColor: '#fff',\n        borderColor: '#374151',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true\n      }\n    }\n  };\n\n  // Add chart-specific options\n  switch (chartType) {\n    case 'balance':\n      return {\n        ...baseOptions,\n        scales: {\n          y: {\n            ticks: {\n              callback: function (value) {\n                return '$' + value.toLocaleString();\n              }\n            }\n          }\n        },\n        plugins: {\n          ...baseOptions.plugins,\n          tooltip: {\n            ...baseOptions.plugins.tooltip,\n            callbacks: {\n              label: function (context) {\n                const value = context.parsed.y;\n                return `Balance: $${value.toLocaleString()}`;\n              }\n            }\n          }\n        }\n      };\n    case 'income-expense':\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)'\n            },\n            ticks: {\n              callback: function (value) {\n                return '$' + value.toLocaleString();\n              }\n            }\n          }\n        },\n        plugins: {\n          ...baseOptions.plugins,\n          tooltip: {\n            ...baseOptions.plugins.tooltip,\n            callbacks: {\n              label: function (context) {\n                const label = context.dataset.label || '';\n                const value = context.parsed.y;\n                return `${label}: $${value.toLocaleString()}`;\n              }\n            }\n          }\n        }\n      };\n    case 'category':\n      return {\n        ...baseOptions,\n        plugins: {\n          ...baseOptions.plugins,\n          legend: {\n            position: 'right',\n            labels: {\n              usePointStyle: true,\n              padding: 15,\n              font: {\n                size: 11\n              }\n            }\n          },\n          tooltip: {\n            ...baseOptions.plugins.tooltip,\n            callbacks: {\n              label: function (context) {\n                const label = context.label || '';\n                const value = context.parsed;\n                const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                const percentage = (value / total * 100).toFixed(1);\n                return `${label}: $${value.toLocaleString()} (${percentage}%)`;\n              }\n            }\n          }\n        }\n      };\n    default:\n      return baseOptions;\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"ChartFactory\");","map":{"version":3,"names":["React","useMemo","BaseChart","BudgetVsActualChart","processBalanceTrendData","processIncomeExpenseData","processCategorySpendingData","CHART_COLORS","jsxDEV","_jsxDEV","ChartFactory","chartType","transactions","accounts","period","budgets","height","className","onDataPointClick","loading","error","customOptions","_s","chartConfig","getChartConfig","chartData","dataPoints","labels","map","point","label","datasets","data","value","borderColor","primary","backgroundColor","fill","tension","income","expenses","success","danger","_","index","Object","values","keys","length","chartOptions","baseOptions","getBaseOptions","title","handleChartClick","event","elements","dataIndex","datasetIndex","dataPoint","type","fileName","_jsxFileName","lineNumber","columnNumber","children","getChartType","options","width","onChartClick","_c","periodText","charAt","toUpperCase","slice","description","responsive","maintainAspectRatio","plugins","display","legend","position","usePointStyle","padding","font","size","color","tooltip","titleColor","bodyColor","borderWidth","cornerRadius","displayColors","scales","y","ticks","callback","toLocaleString","callbacks","context","parsed","x","grid","beginAtZero","dataset","total","reduce","a","b","percentage","toFixed","$RefreshReg$"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/components/charts/ChartFactory.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { Transaction, Account, TimePeriod, Budget } from '../../types/financial';\r\nimport { BaseChart } from './BaseChart';\r\nimport { BudgetVsActualChart } from './BudgetVsActualChart';\r\nimport { \r\n  processBalanceTrendData, \r\n  processIncomeExpenseData, \r\n  processCategorySpendingData,\r\n  CHART_COLORS \r\n} from '../../utils/chartUtils';\r\n\r\nexport type ChartType = 'balance' | 'income-expense' | 'category' | 'budget-vs-actual';\r\n\r\nexport interface ChartConfig {\r\n  type: ChartType;\r\n  title: string;\r\n  description: string;\r\n  height?: number;\r\n  width?: string | number;\r\n  className?: string;\r\n  options?: any;\r\n}\r\n\r\nexport interface ChartFactoryProps {\r\n  chartType: ChartType;\r\n  transactions: Transaction[];\r\n  accounts: Account[];\r\n  period: TimePeriod;\r\n  budgets?: Budget[];\r\n  height?: number;\r\n  className?: string;\r\n  onDataPointClick?: (dataPoint: any, chartType: ChartType) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  customOptions?: any;\r\n}\r\n\r\nexport const ChartFactory: React.FC<ChartFactoryProps> = ({\r\n  chartType,\r\n  transactions,\r\n  accounts,\r\n  period,\r\n  budgets = [],\r\n  height = 300,\r\n  className = '',\r\n  onDataPointClick,\r\n  loading = false,\r\n  error = null,\r\n  customOptions = {},\r\n}) => {\r\n  const chartConfig = useMemo(() => getChartConfig(chartType, period), [chartType, period]);\r\n\r\n  const chartData = useMemo(() => {\r\n    switch (chartType) {\r\n      case 'balance': {\r\n        const dataPoints = processBalanceTrendData(transactions, accounts, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Balance',\r\n            data: dataPoints.map(point => point.value),\r\n            borderColor: CHART_COLORS.primary,\r\n            backgroundColor: CHART_COLORS.primary + '20',\r\n            fill: true,\r\n            tension: 0.4,\r\n          }]\r\n        };\r\n      }\r\n      case 'income-expense': {\r\n        const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n        return {\r\n          labels: income.map(point => point.label),\r\n          datasets: [\r\n            {\r\n              label: 'Income',\r\n              data: income.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.success,\r\n              borderColor: CHART_COLORS.success,\r\n            },\r\n            {\r\n              label: 'Expenses',\r\n              data: expenses.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.danger,\r\n              borderColor: CHART_COLORS.danger,\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      case 'category': {\r\n        const dataPoints = processCategorySpendingData(transactions, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Spending',\r\n            data: dataPoints.map(point => point.value),\r\n            backgroundColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n            borderColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n          }]\r\n        };\r\n      }\r\n      case 'budget-vs-actual':\r\n        // Budget vs actual is handled by dedicated component\r\n        return { labels: [], datasets: [] };\r\n      default:\r\n        return { labels: [], datasets: [] };\r\n    }\r\n  }, [chartType, transactions, accounts, period]);\r\n\r\n  const chartOptions = useMemo(() => {\r\n    const baseOptions = getBaseOptions(chartType, chartConfig.title);\r\n    return { ...baseOptions, ...customOptions };\r\n  }, [chartType, chartConfig.title, customOptions]);\r\n\r\n  const handleChartClick = (event: any, elements: any[]) => {\r\n    if (elements.length > 0 && onDataPointClick) {\r\n      const dataIndex = elements[0].index;\r\n      const datasetIndex = elements[0].datasetIndex;\r\n      \r\n      // Get the appropriate data point based on chart type\r\n      let dataPoint: any;\r\n      switch (chartType) {\r\n        case 'balance':\r\n          dataPoint = processBalanceTrendData(transactions, accounts, period)[dataIndex];\r\n          break;\r\n        case 'income-expense':\r\n          const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n          dataPoint = datasetIndex === 0 ? income[dataIndex] : expenses[dataIndex];\r\n          dataPoint.type = datasetIndex === 0 ? 'income' : 'expense';\r\n          break;\r\n        case 'category':\r\n          dataPoint = processCategorySpendingData(transactions, period)[dataIndex];\r\n          break;\r\n        default:\r\n          dataPoint = null;\r\n      }\r\n      \r\n      if (dataPoint) {\r\n        onDataPointClick(dataPoint, chartType);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Special handling for budget vs actual chart\r\n  if (chartType === 'budget-vs-actual') {\r\n    return (\r\n      <BudgetVsActualChart\r\n        budgets={budgets}\r\n        transactions={transactions}\r\n        period={period}\r\n        height={height}\r\n        className={className}\r\n        onDataPointClick={(dataPoint) => onDataPointClick?.(dataPoint, chartType)}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center text-red-600\">\r\n          <p>Error loading chart: {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n      <BaseChart\r\n        type={getChartType(chartType)}\r\n        data={chartData}\r\n        options={chartOptions}\r\n        height={height}\r\n        width=\"100%\"\r\n        onChartClick={handleChartClick}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions\r\nconst getChartConfig = (chartType: ChartType, period: TimePeriod): { title: string; description: string } => {\r\n  const periodText = period.charAt(0).toUpperCase() + period.slice(1);\r\n  \r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        title: 'Balance Trend',\r\n        description: `Shows your account balance over the ${period} period`\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        title: 'Income vs Expenses',\r\n        description: `Compares your income and expenses for the ${period}`\r\n      };\r\n    case 'category':\r\n      return {\r\n        title: 'Spending by Category',\r\n        description: `Breakdown of your spending by category for the ${period}`\r\n      };\r\n    case 'budget-vs-actual':\r\n      return {\r\n        title: 'Budget vs Actual',\r\n        description: `Shows how your spending compares to your budget for the ${period}`\r\n      };\r\n    default:\r\n      return {\r\n        title: 'Chart',\r\n        description: 'Financial data visualization'\r\n      };\r\n  }\r\n};\r\n\r\nconst getChartType = (chartType: ChartType): 'line' | 'bar' | 'doughnut' | 'pie' => {\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return 'line';\r\n    case 'income-expense':\r\n      return 'bar';\r\n    case 'category':\r\n      return 'doughnut';\r\n    case 'budget-vs-actual':\r\n      return 'bar';\r\n    default:\r\n      return 'line';\r\n  }\r\n};\r\n\r\nconst getBaseOptions = (chartType: ChartType, title: string) => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n         plugins: {\r\n       title: {\r\n         display: false,\r\n       },\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n          color: '#374151',\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: '#374151',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Add chart-specific options\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          y: {\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const value = context.parsed.y;\r\n                return `Balance: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.dataset.label || '';\r\n                const value = context.parsed.y;\r\n                return `${label}: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'category':\r\n      return {\r\n        ...baseOptions,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            position: 'right' as const,\r\n            labels: {\r\n              usePointStyle: true,\r\n              padding: 15,\r\n              font: {\r\n                size: 11,\r\n              },\r\n            },\r\n          },\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.label || '';\r\n                const value = context.parsed;\r\n                const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                const percentage = ((value / total) * 100).toFixed(1);\r\n                return `${label}: $${value.toLocaleString()} (${percentage}%)`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}