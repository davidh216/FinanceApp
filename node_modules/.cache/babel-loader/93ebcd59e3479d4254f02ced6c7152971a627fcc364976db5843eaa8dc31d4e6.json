{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\X2DHHWAN\\\\Desktop\\\\Finance-App\\\\src\\\\contexts\\\\FinancialContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useMemo, useState } from 'react';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { calculateFinancialSummary } from '../utils/periodCalculations';\nimport { updateTransactionTagsInAccounts, updateTransactionTagsInArray } from '../utils/transactionUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc'\n};\nconst financialReducer = (state, action) => {\n  switch (action.type) {\n    case 'VIEW_ACCOUNT_DETAIL':\n      return {\n        ...state,\n        selectedAccount: action.payload,\n        currentScreen: 'account-detail'\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SELECT_ACCOUNT':\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case 'CHANGE_SCREEN':\n      return {\n        ...state,\n        currentScreen: action.payload\n      };\n    case 'CHANGE_PERIOD':\n      return {\n        ...state,\n        selectedPeriod: action.payload\n      };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'add'),\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'add')\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'remove'),\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'remove')\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\n      };\n    case 'APPLY_FILTERS':\n      return {\n        ...state,\n        filters: action.payload\n      };\n    case 'SET_CUSTOM_DATE_RANGE':\n      return {\n        ...state,\n        selectedPeriod: 'custom',\n        customDateRange: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst FinancialContext = /*#__PURE__*/createContext(null);\nexport const FinancialProvider = ({\n  children,\n  initialState: customInitialState\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(financialReducer, customInitialState || initialState);\n  const [isPrivacyMode, setIsPrivacyMode] = useState(false);\n  const [accountFilter, setAccountFilter] = useState('personal');\n  const totalBalance = useMemo(() => state.accounts.reduce((sum, account) => sum + account.balance, 0), [state.accounts]);\n  const summary = useMemo(() => {\n    return calculateFinancialSummary(state.transactions, state.selectedPeriod, state.customDateRange, totalBalance);\n  }, [state.transactions, totalBalance, state.selectedPeriod, state.customDateRange]);\n  const selectAccount = account => {\n    dispatch({\n      type: 'SELECT_ACCOUNT',\n      payload: account\n    });\n  };\n  const changeScreen = screen => {\n    dispatch({\n      type: 'CHANGE_SCREEN',\n      payload: screen\n    });\n  };\n  const changePeriod = period => {\n    dispatch({\n      type: 'CHANGE_PERIOD',\n      payload: period\n    });\n  };\n  const addTag = (transactionId, tag) => {\n    dispatch({\n      type: 'ADD_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const removeTag = (transactionId, tag) => {\n    dispatch({\n      type: 'REMOVE_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const applyFilters = filters => {\n    dispatch({\n      type: 'APPLY_FILTERS',\n      payload: filters\n    });\n  };\n  const viewAccountDetail = account => {\n    dispatch({\n      type: 'VIEW_ACCOUNT_DETAIL',\n      payload: account\n    });\n  };\n  const setCustomDateRange = (startDate, endDate, label) => {\n    dispatch({\n      type: 'SET_CUSTOM_DATE_RANGE',\n      payload: {\n        startDate,\n        endDate,\n        label: label || 'Custom Range'\n      }\n    });\n  };\n  const togglePrivacyMode = () => {\n    setIsPrivacyMode(!isPrivacyMode);\n  };\n  const value = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters,\n    viewAccountDetail,\n    setCustomDateRange,\n    isPrivacyMode,\n    togglePrivacyMode,\n    accountFilter,\n    setAccountFilter\n  };\n  return /*#__PURE__*/_jsxDEV(FinancialContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialProvider, \"K4zZutEmYawOjxVV3zS5RJ20Sgo=\");\n_c = FinancialProvider;\nexport const useFinancial = () => {\n  _s2();\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n_s2(useFinancial, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FinancialProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","useState","MOCK_ACCOUNTS","calculateFinancialSummary","updateTransactionTagsInAccounts","updateTransactionTagsInArray","jsxDEV","_jsxDEV","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","financialReducer","state","action","type","payload","transactionId","tag","customDateRange","FinancialContext","FinancialProvider","children","customInitialState","_s","dispatch","isPrivacyMode","setIsPrivacyMode","accountFilter","setAccountFilter","totalBalance","reduce","sum","account","balance","summary","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","viewAccountDetail","setCustomDateRange","startDate","endDate","label","togglePrivacyMode","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFinancial","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, {\r\n  createContext,\r\n  useContext,\r\n  useReducer,\r\n  useMemo,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  FinancialState,\r\n  FinancialAction,\r\n  Account,\r\n  FilterOptions,\r\n  TimePeriod,\r\n  FinancialSummary,\r\n} from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\nimport { calculateFinancialSummary } from '../utils/periodCalculations';\r\nimport { updateTransactionTagsInAccounts, updateTransactionTagsInArray } from '../utils/transactionUtils';\r\n\r\nconst initialState: FinancialState = {\r\n  accounts: MOCK_ACCOUNTS,\r\n  transactions: MOCK_ACCOUNTS.flatMap((acc) => acc.transactions || []),\r\n  selectedAccount: null,\r\n  currentScreen: 'dashboard',\r\n  selectedPeriod: 'month',\r\n  isLoading: false,\r\n  error: null,\r\n  filters: {},\r\n  sortBy: 'date-desc',\r\n};\r\n\r\nconst financialReducer = (\r\n  state: FinancialState,\r\n  action: FinancialAction\r\n): FinancialState => {\r\n  switch (action.type) {\r\n    case 'VIEW_ACCOUNT_DETAIL':\r\n      return {\r\n        ...state,\r\n        selectedAccount: action.payload,\r\n        currentScreen: 'account-detail',\r\n      };\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SELECT_ACCOUNT':\r\n      return { ...state, selectedAccount: action.payload };\r\n    case 'CHANGE_SCREEN':\r\n      return { ...state, currentScreen: action.payload };\r\n    case 'CHANGE_PERIOD':\r\n      return { ...state, selectedPeriod: action.payload };\r\n    case 'ADD_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'add'),\r\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'add'),\r\n      };\r\n    case 'REMOVE_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: updateTransactionTagsInAccounts(state.accounts, action.payload.transactionId, action.payload.tag, 'remove'),\r\n        transactions: updateTransactionTagsInArray(state.transactions, action.payload.transactionId, action.payload.tag, 'remove'),\r\n      };\r\n    case 'CONNECT_ACCOUNT':\r\n      return {\r\n        ...state,\r\n        accounts: [...state.accounts, action.payload],\r\n        transactions: [\r\n          ...state.transactions,\r\n          ...(action.payload.transactions || []),\r\n        ],\r\n      };\r\n    case 'APPLY_FILTERS':\r\n      return { ...state, filters: action.payload };\r\n    case 'SET_CUSTOM_DATE_RANGE':\r\n      return {\r\n        ...state,\r\n        selectedPeriod: 'custom',\r\n        customDateRange: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface FinancialContextType {\r\n  state: FinancialState;\r\n  dispatch: React.Dispatch<FinancialAction>;\r\n  totalBalance: number;\r\n  summary: FinancialSummary;\r\n  selectAccount: (account: Account | null) => void;\r\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\r\n  changePeriod: (period: TimePeriod) => void;\r\n  addTag: (transactionId: string, tag: string) => void;\r\n  removeTag: (transactionId: string, tag: string) => void;\r\n  applyFilters: (filters: FilterOptions) => void;\r\n  viewAccountDetail: (account: Account) => void;\r\n  setCustomDateRange: (\r\n    startDate: string,\r\n    endDate: string,\r\n    label?: string\r\n  ) => void;\r\n  isPrivacyMode: boolean;\r\n  togglePrivacyMode: () => void;\r\n  accountFilter: 'both' | 'personal' | 'business';\r\n  setAccountFilter: (filter: 'both' | 'personal' | 'business') => void;\r\n}\r\n\r\nconst FinancialContext = createContext<FinancialContextType | null>(null);\r\n\r\ninterface FinancialProviderProps {\r\n  children: React.ReactNode;\r\n  initialState?: FinancialState;\r\n}\r\n\r\nexport const FinancialProvider: React.FC<FinancialProviderProps> = ({\r\n  children,\r\n  initialState: customInitialState,\r\n}) => {\r\n  const [state, dispatch] = useReducer(financialReducer, customInitialState || initialState);\r\n  const [isPrivacyMode, setIsPrivacyMode] = useState(false);\r\n  const [accountFilter, setAccountFilter] = useState<\r\n    'both' | 'personal' | 'business'\r\n  >('personal');\r\n\r\n  const totalBalance = useMemo(\r\n    () => state.accounts.reduce((sum, account) => sum + account.balance, 0),\r\n    [state.accounts]\r\n  );\r\n\r\n  const summary = useMemo((): FinancialSummary => {\r\n    return calculateFinancialSummary(\r\n      state.transactions,\r\n      state.selectedPeriod,\r\n      state.customDateRange,\r\n      totalBalance\r\n    );\r\n  }, [\r\n    state.transactions,\r\n    totalBalance,\r\n    state.selectedPeriod,\r\n    state.customDateRange,\r\n  ]);\r\n\r\n  const selectAccount = (account: Account | null) => {\r\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\r\n  };\r\n\r\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\r\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\r\n  };\r\n\r\n  const changePeriod = (period: TimePeriod) => {\r\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\r\n  };\r\n\r\n  const addTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const removeTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const applyFilters = (filters: FilterOptions) => {\r\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\r\n  };\r\n\r\n  const viewAccountDetail = (account: Account) => {\r\n    dispatch({ type: 'VIEW_ACCOUNT_DETAIL', payload: account });\r\n  };\r\n\r\n  const setCustomDateRange = (\r\n    startDate: string,\r\n    endDate: string,\r\n    label?: string\r\n  ) => {\r\n    dispatch({\r\n      type: 'SET_CUSTOM_DATE_RANGE',\r\n      payload: {\r\n        startDate,\r\n        endDate,\r\n        label: label || 'Custom Range',\r\n      },\r\n    });\r\n  };\r\n\r\n  const togglePrivacyMode = () => {\r\n    setIsPrivacyMode(!isPrivacyMode);\r\n  };\r\n\r\n  const value: FinancialContextType = {\r\n    state,\r\n    dispatch,\r\n    totalBalance,\r\n    summary,\r\n    selectAccount,\r\n    changeScreen,\r\n    changePeriod,\r\n    addTag,\r\n    removeTag,\r\n    applyFilters,\r\n    viewAccountDetail,\r\n    setCustomDateRange,\r\n    isPrivacyMode,\r\n    togglePrivacyMode,\r\n    accountFilter,\r\n    setAccountFilter,\r\n  };\r\n\r\n  return (\r\n    <FinancialContext.Provider value={value}>\r\n      {children}\r\n    </FinancialContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useFinancial = (): FinancialContextType => {\r\n  const context = useContext(FinancialContext);\r\n  if (!context) {\r\n    throw new Error('useFinancial must be used within a FinancialProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}