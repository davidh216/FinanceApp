{"ast":null,"code":"var _s = $RefreshSig$();\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { createDataService } from '../services/DataService';\nimport { useState } from 'react';\nexport class DataMigrationService {\n  constructor(config, userId) {\n    this.config = void 0;\n    this.userId = void 0;\n    this.dataService = void 0;\n    this.config = config;\n    this.userId = userId;\n    this.dataService = createDataService(config, userId);\n  }\n\n  /**\r\n   * Migrate mock data to Firebase\r\n   */\n  async migrateMockDataToFirebase(onProgress) {\n    try {\n      // Initialize progress\n      const totalAccounts = MOCK_ACCOUNTS.length;\n      const totalTransactions = MOCK_ACCOUNTS.reduce((sum, account) => {\n        var _account$transactions;\n        return sum + (((_account$transactions = account.transactions) === null || _account$transactions === void 0 ? void 0 : _account$transactions.length) || 0);\n      }, 0);\n      let accountsMigrated = 0;\n      let transactionsMigrated = 0;\n\n      // Update progress\n      const updateProgress = (status, error) => {\n        onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n          accounts: accountsMigrated,\n          transactions: transactionsMigrated,\n          totalAccounts,\n          totalTransactions,\n          status,\n          error\n        });\n      };\n      updateProgress('migrating');\n\n      // Migrate accounts\n      for (const mockAccount of MOCK_ACCOUNTS) {\n        try {\n          // Create account without transactions first\n          const accountData = {\n            ...mockAccount,\n            transactions: undefined // Remove transactions from account\n          };\n          await this.dataService.updateAccount(accountData);\n          accountsMigrated++;\n\n          // Migrate transactions for this account\n          if (mockAccount.transactions) {\n            for (const transaction of mockAccount.transactions) {\n              try {\n                await this.dataService.updateTransaction(transaction);\n                transactionsMigrated++;\n              } catch (error) {\n                console.error(`Failed to migrate transaction ${transaction.id}:`, error);\n                // Continue with other transactions\n              }\n            }\n          }\n          updateProgress('migrating');\n        } catch (error) {\n          console.error(`Failed to migrate account ${mockAccount.id}:`, error);\n          // Continue with other accounts\n        }\n      }\n      updateProgress('completed');\n      return {\n        success: true,\n        accountsMigrated,\n        transactionsMigrated\n      };\n    } catch (error) {\n      console.error('Migration failed:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress({\n        accounts: 0,\n        transactions: 0,\n        totalAccounts: MOCK_ACCOUNTS.length,\n        totalTransactions: MOCK_ACCOUNTS.reduce((sum, account) => {\n          var _account$transactions2;\n          return sum + (((_account$transactions2 = account.transactions) === null || _account$transactions2 === void 0 ? void 0 : _account$transactions2.length) || 0);\n        }, 0),\n        status: 'error',\n        error: errorMessage\n      });\n      return {\n        success: false,\n        accountsMigrated: 0,\n        transactionsMigrated: 0,\n        error: errorMessage\n      };\n    }\n  }\n\n  /**\r\n   * Check if user has existing data in Firebase\r\n   */\n  async hasExistingData() {\n    try {\n      const accounts = await this.dataService.getAccounts();\n      const transactions = await this.dataService.getTransactions();\n      return accounts.length > 0 || transactions.length > 0;\n    } catch (error) {\n      console.error('Error checking existing data:', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Get migration statistics\r\n   */\n  async getMigrationStats() {\n    const mockAccounts = MOCK_ACCOUNTS.length;\n    const mockTransactions = MOCK_ACCOUNTS.reduce((sum, account) => {\n      var _account$transactions3;\n      return sum + (((_account$transactions3 = account.transactions) === null || _account$transactions3 === void 0 ? void 0 : _account$transactions3.length) || 0);\n    }, 0);\n    let firebaseAccounts = 0;\n    let firebaseTransactions = 0;\n    try {\n      const accounts = await this.dataService.getAccounts();\n      const transactions = await this.dataService.getTransactions();\n      firebaseAccounts = accounts.length;\n      firebaseTransactions = transactions.length;\n    } catch (error) {\n      console.error('Error getting Firebase stats:', error);\n    }\n    return {\n      mockAccounts,\n      mockTransactions,\n      firebaseAccounts,\n      firebaseTransactions\n    };\n  }\n\n  /**\r\n   * Clear all Firebase data (for testing/reset purposes)\r\n   */\n  async clearFirebaseData() {\n    try {\n      const accounts = await this.dataService.getAccounts();\n      const transactions = await this.dataService.getTransactions();\n\n      // Delete all transactions first\n      for (const transaction of transactions) {\n        await this.dataService.deleteTransaction(transaction.id);\n      }\n\n      // Delete all accounts\n      for (const account of accounts) {\n        await this.dataService.deleteAccount(account.id);\n      }\n    } catch (error) {\n      console.error('Error clearing Firebase data:', error);\n      throw error;\n    }\n  }\n}\n\n/**\r\n * Hook for data migration\r\n */\nexport const useDataMigration = userId => {\n  _s();\n  const [migrationProgress, setMigrationProgress] = useState({\n    accounts: 0,\n    transactions: 0,\n    totalAccounts: 0,\n    totalTransactions: 0,\n    status: 'idle'\n  });\n  const [isMigrating, setIsMigrating] = useState(false);\n  const startMigration = async () => {\n    if (isMigrating) return;\n    setIsMigrating(true);\n    const config = {\n      useMockData: false,\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n      apiKey: process.env.REACT_APP_API_KEY\n    };\n    const migrationService = new DataMigrationService(config, userId);\n    try {\n      await migrationService.migrateMockDataToFirebase(setMigrationProgress);\n    } catch (error) {\n      console.error('Migration failed:', error);\n    } finally {\n      setIsMigrating(false);\n    }\n  };\n  const checkExistingData = async () => {\n    const config = {\n      useMockData: false,\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n      apiKey: process.env.REACT_APP_API_KEY\n    };\n    const migrationService = new DataMigrationService(config, userId);\n    return await migrationService.hasExistingData();\n  };\n  const getStats = async () => {\n    const config = {\n      useMockData: false,\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\n      apiKey: process.env.REACT_APP_API_KEY\n    };\n    const migrationService = new DataMigrationService(config, userId);\n    return await migrationService.getMigrationStats();\n  };\n  return {\n    migrationProgress,\n    isMigrating,\n    startMigration,\n    checkExistingData,\n    getStats\n  };\n};\n_s(useDataMigration, \"0rCsqD2VGxsyrMETr8ybaQgwCzg=\");","map":{"version":3,"names":["MOCK_ACCOUNTS","createDataService","useState","DataMigrationService","constructor","config","userId","dataService","migrateMockDataToFirebase","onProgress","totalAccounts","length","totalTransactions","reduce","sum","account","_account$transactions","transactions","accountsMigrated","transactionsMigrated","updateProgress","status","error","accounts","mockAccount","accountData","undefined","updateAccount","transaction","updateTransaction","console","id","success","errorMessage","Error","message","_account$transactions2","hasExistingData","getAccounts","getTransactions","getMigrationStats","mockAccounts","mockTransactions","_account$transactions3","firebaseAccounts","firebaseTransactions","clearFirebaseData","deleteTransaction","deleteAccount","useDataMigration","_s","migrationProgress","setMigrationProgress","isMigrating","setIsMigrating","startMigration","useMockData","apiBaseUrl","process","env","REACT_APP_API_BASE_URL","apiKey","REACT_APP_API_KEY","migrationService","checkExistingData","getStats"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/dataMigration.ts"],"sourcesContent":["import { Account, Transaction } from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\nimport { createDataService, DataServiceConfig } from '../services/DataService';\r\nimport { useState } from 'react';\r\n\r\ninterface MigrationProgress {\r\n  accounts: number;\r\n  transactions: number;\r\n  totalAccounts: number;\r\n  totalTransactions: number;\r\n  status: 'idle' | 'migrating' | 'completed' | 'error';\r\n  error?: string;\r\n}\r\n\r\ninterface MigrationResult {\r\n  success: boolean;\r\n  accountsMigrated: number;\r\n  transactionsMigrated: number;\r\n  error?: string;\r\n}\r\n\r\nexport class DataMigrationService {\r\n  private config: DataServiceConfig;\r\n  private userId: string;\r\n  private dataService: any;\r\n\r\n  constructor(config: DataServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n    this.dataService = createDataService(config, userId);\r\n  }\r\n\r\n  /**\r\n   * Migrate mock data to Firebase\r\n   */\r\n  async migrateMockDataToFirebase(\r\n    onProgress?: (progress: MigrationProgress) => void\r\n  ): Promise<MigrationResult> {\r\n    try {\r\n      // Initialize progress\r\n      const totalAccounts = MOCK_ACCOUNTS.length;\r\n      const totalTransactions = MOCK_ACCOUNTS.reduce(\r\n        (sum, account) => sum + (account.transactions?.length || 0),\r\n        0\r\n      );\r\n\r\n      let accountsMigrated = 0;\r\n      let transactionsMigrated = 0;\r\n\r\n      // Update progress\r\n      const updateProgress = (status: MigrationProgress['status'], error?: string) => {\r\n        onProgress?.({\r\n          accounts: accountsMigrated,\r\n          transactions: transactionsMigrated,\r\n          totalAccounts,\r\n          totalTransactions,\r\n          status,\r\n          error,\r\n        });\r\n      };\r\n\r\n      updateProgress('migrating');\r\n\r\n      // Migrate accounts\r\n      for (const mockAccount of MOCK_ACCOUNTS) {\r\n        try {\r\n          // Create account without transactions first\r\n          const accountData = {\r\n            ...mockAccount,\r\n            transactions: undefined, // Remove transactions from account\r\n          };\r\n\r\n          await this.dataService.updateAccount(accountData);\r\n          accountsMigrated++;\r\n\r\n          // Migrate transactions for this account\r\n          if (mockAccount.transactions) {\r\n            for (const transaction of mockAccount.transactions) {\r\n              try {\r\n                await this.dataService.updateTransaction(transaction);\r\n                transactionsMigrated++;\r\n              } catch (error) {\r\n                console.error(`Failed to migrate transaction ${transaction.id}:`, error);\r\n                // Continue with other transactions\r\n              }\r\n            }\r\n          }\r\n\r\n          updateProgress('migrating');\r\n        } catch (error) {\r\n          console.error(`Failed to migrate account ${mockAccount.id}:`, error);\r\n          // Continue with other accounts\r\n        }\r\n      }\r\n\r\n      updateProgress('completed');\r\n\r\n      return {\r\n        success: true,\r\n        accountsMigrated,\r\n        transactionsMigrated,\r\n      };\r\n    } catch (error) {\r\n      console.error('Migration failed:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      \r\n      onProgress?.({\r\n        accounts: 0,\r\n        transactions: 0,\r\n        totalAccounts: MOCK_ACCOUNTS.length,\r\n        totalTransactions: MOCK_ACCOUNTS.reduce(\r\n          (sum, account) => sum + (account.transactions?.length || 0),\r\n          0\r\n        ),\r\n        status: 'error',\r\n        error: errorMessage,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        accountsMigrated: 0,\r\n        transactionsMigrated: 0,\r\n        error: errorMessage,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user has existing data in Firebase\r\n   */\r\n  async hasExistingData(): Promise<boolean> {\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n      \r\n      return accounts.length > 0 || transactions.length > 0;\r\n    } catch (error) {\r\n      console.error('Error checking existing data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get migration statistics\r\n   */\r\n  async getMigrationStats(): Promise<{\r\n    mockAccounts: number;\r\n    mockTransactions: number;\r\n    firebaseAccounts: number;\r\n    firebaseTransactions: number;\r\n  }> {\r\n    const mockAccounts = MOCK_ACCOUNTS.length;\r\n    const mockTransactions = MOCK_ACCOUNTS.reduce(\r\n      (sum, account) => sum + (account.transactions?.length || 0),\r\n      0\r\n    );\r\n\r\n    let firebaseAccounts = 0;\r\n    let firebaseTransactions = 0;\r\n\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n      \r\n      firebaseAccounts = accounts.length;\r\n      firebaseTransactions = transactions.length;\r\n    } catch (error) {\r\n      console.error('Error getting Firebase stats:', error);\r\n    }\r\n\r\n    return {\r\n      mockAccounts,\r\n      mockTransactions,\r\n      firebaseAccounts,\r\n      firebaseTransactions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear all Firebase data (for testing/reset purposes)\r\n   */\r\n  async clearFirebaseData(): Promise<void> {\r\n    try {\r\n      const accounts = await this.dataService.getAccounts();\r\n      const transactions = await this.dataService.getTransactions();\r\n\r\n      // Delete all transactions first\r\n      for (const transaction of transactions) {\r\n        await this.dataService.deleteTransaction(transaction.id);\r\n      }\r\n\r\n      // Delete all accounts\r\n      for (const account of accounts) {\r\n        await this.dataService.deleteAccount(account.id);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error clearing Firebase data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Hook for data migration\r\n */\r\nexport const useDataMigration = (userId: string) => {\r\n  const [migrationProgress, setMigrationProgress] = useState<MigrationProgress>({\r\n    accounts: 0,\r\n    transactions: 0,\r\n    totalAccounts: 0,\r\n    totalTransactions: 0,\r\n    status: 'idle',\r\n  });\r\n\r\n  const [isMigrating, setIsMigrating] = useState(false);\r\n\r\n  const startMigration = async () => {\r\n    if (isMigrating) return;\r\n\r\n    setIsMigrating(true);\r\n    \r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    \r\n    try {\r\n      await migrationService.migrateMockDataToFirebase(setMigrationProgress);\r\n    } catch (error) {\r\n      console.error('Migration failed:', error);\r\n    } finally {\r\n      setIsMigrating(false);\r\n    }\r\n  };\r\n\r\n  const checkExistingData = async () => {\r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    return await migrationService.hasExistingData();\r\n  };\r\n\r\n  const getStats = async () => {\r\n    const config: DataServiceConfig = {\r\n      useMockData: false,\r\n      apiBaseUrl: process.env.REACT_APP_API_BASE_URL,\r\n      apiKey: process.env.REACT_APP_API_KEY,\r\n    };\r\n\r\n    const migrationService = new DataMigrationService(config, userId);\r\n    return await migrationService.getMigrationStats();\r\n  };\r\n\r\n  return {\r\n    migrationProgress,\r\n    isMigrating,\r\n    startMigration,\r\n    checkExistingData,\r\n    getStats,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}