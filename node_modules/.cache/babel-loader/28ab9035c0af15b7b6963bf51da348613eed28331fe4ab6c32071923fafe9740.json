{"ast":null,"code":"import{getDocs,getDoc,updateDoc,deleteDoc,onSnapshot,addDoc,serverTimestamp,Timestamp,collection,doc}from'firebase/firestore';import{db}from'../config/firebase';class MockBudgetService{constructor(){this.budgets=[];this.alerts=[];console.log('🔍 MockBudgetService constructor called');this.generateMockBudgets();}generateMockBudgets(){console.log('🔍 MockBudgetService.generateMockBudgets called');const budgetData=[{category:'Food & Dining',amount:800,spent:720,// 90% - on track\nperiod:'month'},{category:'Transportation',amount:400,spent:450,// 112.5% - over budget\nperiod:'month'},{category:'Shopping',amount:600,spent:480,// 80% - on track\nperiod:'month'},{category:'Entertainment',amount:300,spent:330,// 110% - over budget\nperiod:'month'},{category:'Utilities',amount:250,spent:200,// 80% - on track\nperiod:'month'},{category:'Healthcare',amount:150,spent:180,// 120% - over budget\nperiod:'month'},{category:'Travel',amount:1200,spent:900,// 75% - on track\nperiod:'quarter'},{category:'Home Improvement',amount:2000,spent:2200,// 110% - over budget\nperiod:'quarter'}];budgetData.forEach((data,index)=>{this.budgets.push({id:`budget-${index}`,userId:'demo-user',// Changed from 'mock-user' to 'demo-user'\ncategory:data.category,amount:data.amount,period:data.period,startDate:new Date().toISOString(),endDate:new Date(Date.now()+30*24*60*60*1000).toISOString(),// 30 days from now\nspent:data.spent,remaining:data.amount-data.spent,alerts:[],isActive:true,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});});}async createBudget(budgetData){await new Promise(resolve=>setTimeout(resolve,200));const budget={...budgetData,id:`budget-${Date.now()}`,userId:'demo-user',// Changed from 'mock-user' to 'demo-user'\ncreatedAt:new Date().toISOString(),updatedAt:new Date().toISOString()};this.budgets.push(budget);return budget;}async getBudgets(userId){await new Promise(resolve=>setTimeout(resolve,100));console.log('🔍 MockBudgetService.getBudgets called with userId:',userId);console.log('🔍 Total budgets in service:',this.budgets.length);console.log('🔍 Budgets for userId:',this.budgets.filter(budget=>budget.userId===userId).length);return this.budgets.filter(budget=>budget.userId===userId);}async getBudget(id){await new Promise(resolve=>setTimeout(resolve,50));return this.budgets.find(budget=>budget.id===id)||null;}async updateBudget(id,updates){await new Promise(resolve=>setTimeout(resolve,200));const index=this.budgets.findIndex(budget=>budget.id===id);if(index===-1){throw new Error('Budget not found');}this.budgets[index]={...this.budgets[index],...updates,updatedAt:new Date().toISOString()};return this.budgets[index];}async deleteBudget(id){await new Promise(resolve=>setTimeout(resolve,200));const index=this.budgets.findIndex(budget=>budget.id===id);if(index===-1){return false;}this.budgets.splice(index,1);return true;}async getBudgetProgress(budgetId){await new Promise(resolve=>setTimeout(resolve,100));const budget=this.budgets.find(b=>b.id===budgetId);if(!budget){throw new Error('Budget not found');}const percentageUsed=budget.spent/budget.amount*100;const isOverBudget=budget.spent>budget.amount;const daysRemaining=Math.ceil((new Date(budget.endDate).getTime()-new Date().getTime())/(1000*60*60*24));const projectedSpending=budget.spent+budget.spent/(30-daysRemaining)*daysRemaining;return{budgetId,spent:budget.spent,remaining:budget.remaining,percentageUsed,isOverBudget,daysRemaining:Math.max(0,daysRemaining),projectedSpending};}async getBudgetSummary(userId){await new Promise(resolve=>setTimeout(resolve,100));const userBudgets=this.budgets.filter(budget=>budget.userId===userId&&budget.isActive);const totalBudgeted=userBudgets.reduce((sum,budget)=>sum+budget.amount,0);const totalSpent=userBudgets.reduce((sum,budget)=>sum+budget.spent,0);const totalRemaining=totalBudgeted-totalSpent;const overBudgetCategories=userBudgets.filter(budget=>budget.spent>budget.amount).map(budget=>budget.category);const upcomingAlerts=this.alerts.filter(alert=>userBudgets.some(budget=>budget.id===alert.id&&!alert.triggered));return{totalBudgets:userBudgets.length,totalBudgeted,totalSpent,totalRemaining,overBudgetCategories,upcomingAlerts};}async calculateBudgetSpending(budgetId,transactions){await new Promise(resolve=>setTimeout(resolve,50));const budget=this.budgets.find(b=>b.id===budgetId);if(!budget){return 0;}// Filter transactions by category and date range\nconst relevantTransactions=transactions.filter(tx=>tx.category===budget.category&&new Date(tx.date)>=new Date(budget.startDate)&&new Date(tx.date)<=new Date(budget.endDate)&&tx.amount<0// Only expenses\n);return Math.abs(relevantTransactions.reduce((sum,tx)=>sum+tx.amount,0));}async createBudgetAlert(budgetId,alertData){await new Promise(resolve=>setTimeout(resolve,100));const alert={...alertData,id:`alert-${Date.now()}`,createdAt:new Date().toISOString()};this.alerts.push(alert);return alert;}async getBudgetAlerts(budgetId){await new Promise(resolve=>setTimeout(resolve,50));return this.alerts.filter(alert=>alert.id===budgetId);}async updateBudgetAlert(alertId,updates){await new Promise(resolve=>setTimeout(resolve,100));const index=this.alerts.findIndex(alert=>alert.id===alertId);if(index===-1){throw new Error('Alert not found');}this.alerts[index]={...this.alerts[index],...updates};return this.alerts[index];}subscribeToBudgets(userId,callback){// Mock subscription - just call once with current data\nsetTimeout(()=>{const userBudgets=this.budgets.filter(budget=>budget.userId===userId);callback(userBudgets);},100);// Return unsubscribe function\nreturn()=>{};}subscribeToBudgetProgress(budgetId,callback){// Mock subscription - just call once with current data\nsetTimeout(async()=>{const progress=await this.getBudgetProgress(budgetId);callback(progress);},100);// Return unsubscribe function\nreturn()=>{};}}class FirebaseBudgetService{constructor(config,userId){this.config=void 0;this.userId=void 0;this.config=config;this.userId=userId;}getUserBudgetsCollection(){return collection(db,'users',this.userId,'budgets');}getBudgetDocRef(budgetId){return doc(db,'users',this.userId,'budgets',budgetId);}convertTimestamp(timestamp){if(typeof timestamp==='string')return timestamp;return timestamp.toDate().toISOString();}convertToTimestamp(dateString){return Timestamp.fromDate(new Date(dateString));}convertFirestoreToBudget(doc){const data=doc.data();return{id:doc.id,userId:data.userId,category:data.category,amount:data.amount,period:data.period,startDate:this.convertTimestamp(data.startDate),endDate:this.convertTimestamp(data.endDate),spent:data.spent||0,remaining:data.remaining||data.amount,alerts:data.alerts||[],isActive:data.isActive!==false,createdAt:this.convertTimestamp(data.createdAt||serverTimestamp()),updatedAt:this.convertTimestamp(data.updatedAt||serverTimestamp())};}async createBudget(budgetData){try{const budgetsRef=this.getUserBudgetsCollection();const budgetDoc={...budgetData,userId:this.userId,createdAt:serverTimestamp(),updatedAt:serverTimestamp()};const docRef=await addDoc(budgetsRef,budgetDoc);const budgetSnap=await getDoc(docRef);if(budgetSnap.exists()){return this.convertFirestoreToBudget(budgetSnap);}throw new Error('Failed to create budget');}catch(error){console.error('Error creating budget:',error);throw new Error('Failed to create budget');}}async getBudgets(userId){try{const budgetsRef=this.getUserBudgetsCollection();const querySnapshot=await getDocs(budgetsRef);return querySnapshot.docs.map(doc=>this.convertFirestoreToBudget(doc));}catch(error){console.error('Error fetching budgets:',error);throw new Error('Failed to fetch budgets');}}async getBudget(id){try{const budgetRef=this.getBudgetDocRef(id);const budgetSnap=await getDoc(budgetRef);if(budgetSnap.exists()){return this.convertFirestoreToBudget(budgetSnap);}return null;}catch(error){console.error('Error fetching budget:',error);throw new Error('Failed to fetch budget');}}async updateBudget(id,updates){try{const budgetRef=this.getBudgetDocRef(id);const updatedBudget={...updates,updatedAt:serverTimestamp()};await updateDoc(budgetRef,updatedBudget);// Fetch updated budget\nconst budgetSnap=await getDoc(budgetRef);if(budgetSnap.exists()){return this.convertFirestoreToBudget(budgetSnap);}throw new Error('Budget not found');}catch(error){console.error('Error updating budget:',error);throw new Error('Failed to update budget');}}async deleteBudget(id){try{const budgetRef=this.getBudgetDocRef(id);await deleteDoc(budgetRef);return true;}catch(error){console.error('Error deleting budget:',error);throw new Error('Failed to delete budget');}}async getBudgetProgress(budgetId){try{const budget=await this.getBudget(budgetId);if(!budget){throw new Error('Budget not found');}const percentageUsed=budget.spent/budget.amount*100;const isOverBudget=budget.spent>budget.amount;const daysRemaining=Math.ceil((new Date(budget.endDate).getTime()-new Date().getTime())/(1000*60*60*24));const projectedSpending=budget.spent+budget.spent/(30-daysRemaining)*daysRemaining;return{budgetId,spent:budget.spent,remaining:budget.remaining,percentageUsed,isOverBudget,daysRemaining:Math.max(0,daysRemaining),projectedSpending};}catch(error){console.error('Error calculating budget progress:',error);throw new Error('Failed to calculate budget progress');}}async getBudgetSummary(userId){try{const budgets=await this.getBudgets(userId);const activeBudgets=budgets.filter(budget=>budget.isActive);const totalBudgeted=activeBudgets.reduce((sum,budget)=>sum+budget.amount,0);const totalSpent=activeBudgets.reduce((sum,budget)=>sum+budget.spent,0);const totalRemaining=totalBudgeted-totalSpent;const overBudgetCategories=activeBudgets.filter(budget=>budget.spent>budget.amount).map(budget=>budget.category);const upcomingAlerts=activeBudgets.flatMap(budget=>budget.alerts.filter(alert=>!alert.triggered));return{totalBudgets:activeBudgets.length,totalBudgeted,totalSpent,totalRemaining,overBudgetCategories,upcomingAlerts};}catch(error){console.error('Error calculating budget summary:',error);throw new Error('Failed to calculate budget summary');}}async calculateBudgetSpending(budgetId,transactions){try{const budget=await this.getBudget(budgetId);if(!budget){return 0;}// Filter transactions by category and date range\nconst relevantTransactions=transactions.filter(tx=>tx.category===budget.category&&new Date(tx.date)>=new Date(budget.startDate)&&new Date(tx.date)<=new Date(budget.endDate)&&tx.amount<0// Only expenses\n);return Math.abs(relevantTransactions.reduce((sum,tx)=>sum+tx.amount,0));}catch(error){console.error('Error calculating budget spending:',error);throw new Error('Failed to calculate budget spending');}}async createBudgetAlert(budgetId,alertData){try{const budget=await this.getBudget(budgetId);if(!budget){throw new Error('Budget not found');}const alert={...alertData,id:`alert-${Date.now()}`,createdAt:new Date().toISOString()};// Add alert to budget\nconst updatedAlerts=[...budget.alerts,alert];await this.updateBudget(budgetId,{alerts:updatedAlerts});return alert;}catch(error){console.error('Error creating budget alert:',error);throw new Error('Failed to create budget alert');}}async getBudgetAlerts(budgetId){try{const budget=await this.getBudget(budgetId);return(budget===null||budget===void 0?void 0:budget.alerts)||[];}catch(error){console.error('Error fetching budget alerts:',error);throw new Error('Failed to fetch budget alerts');}}async updateBudgetAlert(alertId,updates){try{// Find budget containing this alert\nconst budgets=await this.getBudgets(this.userId);const budgetWithAlert=budgets.find(budget=>budget.alerts.some(alert=>alert.id===alertId));if(!budgetWithAlert){throw new Error('Alert not found');}// Update the alert\nconst updatedAlerts=budgetWithAlert.alerts.map(alert=>alert.id===alertId?{...alert,...updates}:alert);await this.updateBudget(budgetWithAlert.id,{alerts:updatedAlerts});const updatedAlert=updatedAlerts.find(alert=>alert.id===alertId);if(!updatedAlert){throw new Error('Failed to update alert');}return updatedAlert;}catch(error){console.error('Error updating budget alert:',error);throw new Error('Failed to update budget alert');}}subscribeToBudgets(userId,callback){const budgetsRef=this.getUserBudgetsCollection();return onSnapshot(budgetsRef,snapshot=>{const budgets=snapshot.docs.map(doc=>this.convertFirestoreToBudget(doc));callback(budgets);});}subscribeToBudgetProgress(budgetId,callback){const budgetRef=this.getBudgetDocRef(budgetId);return onSnapshot(budgetRef,async snapshot=>{if(snapshot.exists()){const progress=await this.getBudgetProgress(budgetId);callback(progress);}});}}export function createBudgetService(config,userId){console.log('🔍 createBudgetService called with config:',config,'userId:',userId);if(config.useMockData){console.log('🔍 Creating MockBudgetService');return new MockBudgetService();}else{if(!userId){throw new Error('User ID is required for Firebase BudgetService');}console.log('🔍 Creating FirebaseBudgetService');return new FirebaseBudgetService(config,userId);}}// Export classes for testing\nexport{MockBudgetService,FirebaseBudgetService};// Default export for convenience\nexport default createBudgetService;","map":{"version":3,"names":["getDocs","getDoc","updateDoc","deleteDoc","onSnapshot","addDoc","serverTimestamp","Timestamp","collection","doc","db","MockBudgetService","constructor","budgets","alerts","console","log","generateMockBudgets","budgetData","category","amount","spent","period","forEach","data","index","push","id","userId","startDate","Date","toISOString","endDate","now","remaining","isActive","createdAt","updatedAt","createBudget","Promise","resolve","setTimeout","budget","getBudgets","length","filter","getBudget","find","updateBudget","updates","findIndex","Error","deleteBudget","splice","getBudgetProgress","budgetId","b","percentageUsed","isOverBudget","daysRemaining","Math","ceil","getTime","projectedSpending","max","getBudgetSummary","userBudgets","totalBudgeted","reduce","sum","totalSpent","totalRemaining","overBudgetCategories","map","upcomingAlerts","alert","some","triggered","totalBudgets","calculateBudgetSpending","transactions","relevantTransactions","tx","date","abs","createBudgetAlert","alertData","getBudgetAlerts","updateBudgetAlert","alertId","subscribeToBudgets","callback","subscribeToBudgetProgress","progress","FirebaseBudgetService","config","getUserBudgetsCollection","getBudgetDocRef","convertTimestamp","timestamp","toDate","convertToTimestamp","dateString","fromDate","convertFirestoreToBudget","budgetsRef","budgetDoc","docRef","budgetSnap","exists","error","querySnapshot","docs","budgetRef","updatedBudget","activeBudgets","flatMap","updatedAlerts","budgetWithAlert","updatedAlert","snapshot","createBudgetService","useMockData"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/services/budgetService.ts"],"sourcesContent":["import { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { \r\n  getDocs, \r\n  getDoc, \r\n  setDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy, \r\n  limit, \r\n  onSnapshot,\r\n  addDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  QueryConstraint,\r\n  DocumentData,\r\n  collection,\r\n  doc\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\nexport interface BudgetServiceConfig {\r\n  useMockData: boolean;\r\n  apiBaseUrl?: string;\r\n  apiKey?: string;\r\n}\r\n\r\nexport interface BudgetServiceResponse<T> {\r\n  data: T;\r\n  error?: string;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface BudgetService {\r\n  // Budget operations\r\n  createBudget(budget: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget>;\r\n  getBudgets(userId: string): Promise<Budget[]>;\r\n  getBudget(id: string): Promise<Budget | null>;\r\n  updateBudget(id: string, updates: Partial<Budget>): Promise<Budget>;\r\n  deleteBudget(id: string): Promise<boolean>;\r\n  \r\n  // Budget progress and analytics\r\n  getBudgetProgress(budgetId: string): Promise<BudgetProgress>;\r\n  getBudgetSummary(userId: string): Promise<BudgetSummary>;\r\n  calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert(budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert>;\r\n  getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]>;\r\n  updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert>;\r\n  \r\n  // Real-time subscriptions\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void;\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void;\r\n}\r\n\r\nclass MockBudgetService implements BudgetService {\r\n  private budgets: Budget[] = [];\r\n  private alerts: BudgetAlert[] = [];\r\n\r\n  constructor() {\r\n    console.log('🔍 MockBudgetService constructor called');\r\n    this.generateMockBudgets();\r\n  }\r\n\r\n  private generateMockBudgets(): void {\r\n    console.log('🔍 MockBudgetService.generateMockBudgets called');\r\n    const budgetData = [\r\n      {\r\n        category: 'Food & Dining',\r\n        amount: 800,\r\n        spent: 720, // 90% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Transportation',\r\n        amount: 400,\r\n        spent: 450, // 112.5% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Shopping',\r\n        amount: 600,\r\n        spent: 480, // 80% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Entertainment',\r\n        amount: 300,\r\n        spent: 330, // 110% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Utilities',\r\n        amount: 250,\r\n        spent: 200, // 80% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Healthcare',\r\n        amount: 150,\r\n        spent: 180, // 120% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Travel',\r\n        amount: 1200,\r\n        spent: 900, // 75% - on track\r\n        period: 'quarter' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Home Improvement',\r\n        amount: 2000,\r\n        spent: 2200, // 110% - over budget\r\n        period: 'quarter' as TimePeriod,\r\n      },\r\n    ];\r\n    \r\n    budgetData.forEach((data, index) => {\r\n      this.budgets.push({\r\n        id: `budget-${index}`,\r\n        userId: 'demo-user', // Changed from 'mock-user' to 'demo-user'\r\n        category: data.category,\r\n        amount: data.amount,\r\n        period: data.period,\r\n        startDate: new Date().toISOString(),\r\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n        spent: data.spent,\r\n        remaining: data.amount - data.spent,\r\n        alerts: [],\r\n        isActive: true,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const budget: Budget = {\r\n      ...budgetData,\r\n      id: `budget-${Date.now()}`,\r\n      userId: 'demo-user', // Changed from 'mock-user' to 'demo-user'\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.budgets.push(budget);\r\n    return budget;\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    console.log('🔍 MockBudgetService.getBudgets called with userId:', userId);\r\n    console.log('🔍 Total budgets in service:', this.budgets.length);\r\n    console.log('🔍 Budgets for userId:', this.budgets.filter(budget => budget.userId === userId).length);\r\n    return this.budgets.filter(budget => budget.userId === userId);\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.budgets.find(budget => budget.id === id) || null;\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    this.budgets[index] = {\r\n      ...this.budgets[index],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    return this.budgets[index];\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n    \r\n    this.budgets.splice(index, 1);\r\n    return true;\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    const percentageUsed = (budget.spent / budget.amount) * 100;\r\n    const isOverBudget = budget.spent > budget.amount;\r\n    const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n    const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n    \r\n    return {\r\n      budgetId,\r\n      spent: budget.spent,\r\n      remaining: budget.remaining,\r\n      percentageUsed,\r\n      isOverBudget,\r\n      daysRemaining: Math.max(0, daysRemaining),\r\n      projectedSpending,\r\n    };\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const userBudgets = this.budgets.filter(budget => budget.userId === userId && budget.isActive);\r\n    const totalBudgeted = userBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n    const totalSpent = userBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n    const totalRemaining = totalBudgeted - totalSpent;\r\n    const overBudgetCategories = userBudgets\r\n      .filter(budget => budget.spent > budget.amount)\r\n      .map(budget => budget.category);\r\n    \r\n    const upcomingAlerts = this.alerts.filter(alert => \r\n      userBudgets.some(budget => budget.id === alert.id && !alert.triggered)\r\n    );\r\n    \r\n    return {\r\n      totalBudgets: userBudgets.length,\r\n      totalBudgeted,\r\n      totalSpent,\r\n      totalRemaining,\r\n      overBudgetCategories,\r\n      upcomingAlerts,\r\n    };\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      return 0;\r\n    }\r\n    \r\n    // Filter transactions by category and date range\r\n    const relevantTransactions = transactions.filter(tx => \r\n      tx.category === budget.category &&\r\n      new Date(tx.date) >= new Date(budget.startDate) &&\r\n      new Date(tx.date) <= new Date(budget.endDate) &&\r\n      tx.amount < 0 // Only expenses\r\n    );\r\n    \r\n    return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const alert: BudgetAlert = {\r\n      ...alertData,\r\n      id: `alert-${Date.now()}`,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.alerts.push(alert);\r\n    return alert;\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.alerts.filter(alert => alert.id === budgetId);\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const index = this.alerts.findIndex(alert => alert.id === alertId);\r\n    if (index === -1) {\r\n      throw new Error('Alert not found');\r\n    }\r\n    \r\n    this.alerts[index] = {\r\n      ...this.alerts[index],\r\n      ...updates,\r\n    };\r\n    \r\n    return this.alerts[index];\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(() => {\r\n      const userBudgets = this.budgets.filter(budget => budget.userId === userId);\r\n      callback(userBudgets);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(async () => {\r\n      const progress = await this.getBudgetProgress(budgetId);\r\n      callback(progress);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n}\r\n\r\nclass FirebaseBudgetService implements BudgetService {\r\n  private config: BudgetServiceConfig;\r\n  private userId: string;\r\n\r\n  constructor(config: BudgetServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n  }\r\n\r\n  private getUserBudgetsCollection() {\r\n    return collection(db, 'users', this.userId, 'budgets');\r\n  }\r\n\r\n  private getBudgetDocRef(budgetId: string) {\r\n    return doc(db, 'users', this.userId, 'budgets', budgetId);\r\n  }\r\n\r\n  private convertTimestamp(timestamp: Timestamp | string): string {\r\n    if (typeof timestamp === 'string') return timestamp;\r\n    return timestamp.toDate().toISOString();\r\n  }\r\n\r\n  private convertToTimestamp(dateString: string): Timestamp {\r\n    return Timestamp.fromDate(new Date(dateString));\r\n  }\r\n\r\n  private convertFirestoreToBudget(doc: DocumentData): Budget {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      userId: data.userId,\r\n      category: data.category,\r\n      amount: data.amount,\r\n      period: data.period,\r\n      startDate: this.convertTimestamp(data.startDate),\r\n      endDate: this.convertTimestamp(data.endDate),\r\n      spent: data.spent || 0,\r\n      remaining: data.remaining || data.amount,\r\n      alerts: data.alerts || [],\r\n      isActive: data.isActive !== false,\r\n      createdAt: this.convertTimestamp(data.createdAt || serverTimestamp()),\r\n      updatedAt: this.convertTimestamp(data.updatedAt || serverTimestamp()),\r\n    };\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const budgetDoc = {\r\n        ...budgetData,\r\n        userId: this.userId,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      const docRef = await addDoc(budgetsRef, budgetDoc);\r\n      const budgetSnap = await getDoc(docRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Failed to create budget');\r\n    } catch (error) {\r\n      console.error('Error creating budget:', error);\r\n      throw new Error('Failed to create budget');\r\n    }\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const querySnapshot = await getDocs(budgetsRef);\r\n      \r\n      return querySnapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n    } catch (error) {\r\n      console.error('Error fetching budgets:', error);\r\n      throw new Error('Failed to fetch budgets');\r\n    }\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching budget:', error);\r\n      throw new Error('Failed to fetch budget');\r\n    }\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const updatedBudget = {\r\n        ...updates,\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      await updateDoc(budgetRef, updatedBudget);\r\n      \r\n      // Fetch updated budget\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Budget not found');\r\n    } catch (error) {\r\n      console.error('Error updating budget:', error);\r\n      throw new Error('Failed to update budget');\r\n    }\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      await deleteDoc(budgetRef);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting budget:', error);\r\n      throw new Error('Failed to delete budget');\r\n    }\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const percentageUsed = (budget.spent / budget.amount) * 100;\r\n      const isOverBudget = budget.spent > budget.amount;\r\n      const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n      const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n      \r\n      return {\r\n        budgetId,\r\n        spent: budget.spent,\r\n        remaining: budget.remaining,\r\n        percentageUsed,\r\n        isOverBudget,\r\n        daysRemaining: Math.max(0, daysRemaining),\r\n        projectedSpending,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget progress:', error);\r\n      throw new Error('Failed to calculate budget progress');\r\n    }\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    try {\r\n      const budgets = await this.getBudgets(userId);\r\n      const activeBudgets = budgets.filter(budget => budget.isActive);\r\n      \r\n      const totalBudgeted = activeBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n      const totalSpent = activeBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n      const totalRemaining = totalBudgeted - totalSpent;\r\n      const overBudgetCategories = activeBudgets\r\n        .filter(budget => budget.spent > budget.amount)\r\n        .map(budget => budget.category);\r\n      \r\n      const upcomingAlerts = activeBudgets.flatMap(budget => \r\n        budget.alerts.filter(alert => !alert.triggered)\r\n      );\r\n      \r\n      return {\r\n        totalBudgets: activeBudgets.length,\r\n        totalBudgeted,\r\n        totalSpent,\r\n        totalRemaining,\r\n        overBudgetCategories,\r\n        upcomingAlerts,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget summary:', error);\r\n      throw new Error('Failed to calculate budget summary');\r\n    }\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        return 0;\r\n      }\r\n      \r\n      // Filter transactions by category and date range\r\n      const relevantTransactions = transactions.filter(tx => \r\n        tx.category === budget.category &&\r\n        new Date(tx.date) >= new Date(budget.startDate) &&\r\n        new Date(tx.date) <= new Date(budget.endDate) &&\r\n        tx.amount < 0 // Only expenses\r\n      );\r\n      \r\n      return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n    } catch (error) {\r\n      console.error('Error calculating budget spending:', error);\r\n      throw new Error('Failed to calculate budget spending');\r\n    }\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const alert: BudgetAlert = {\r\n        ...alertData,\r\n        id: `alert-${Date.now()}`,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      \r\n      // Add alert to budget\r\n      const updatedAlerts = [...budget.alerts, alert];\r\n      await this.updateBudget(budgetId, { alerts: updatedAlerts });\r\n      \r\n      return alert;\r\n    } catch (error) {\r\n      console.error('Error creating budget alert:', error);\r\n      throw new Error('Failed to create budget alert');\r\n    }\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      return budget?.alerts || [];\r\n    } catch (error) {\r\n      console.error('Error fetching budget alerts:', error);\r\n      throw new Error('Failed to fetch budget alerts');\r\n    }\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    try {\r\n      // Find budget containing this alert\r\n      const budgets = await this.getBudgets(this.userId);\r\n      const budgetWithAlert = budgets.find(budget => \r\n        budget.alerts.some(alert => alert.id === alertId)\r\n      );\r\n      \r\n      if (!budgetWithAlert) {\r\n        throw new Error('Alert not found');\r\n      }\r\n      \r\n      // Update the alert\r\n      const updatedAlerts = budgetWithAlert.alerts.map(alert => \r\n        alert.id === alertId ? { ...alert, ...updates } : alert\r\n      );\r\n      \r\n      await this.updateBudget(budgetWithAlert.id, { alerts: updatedAlerts });\r\n      \r\n      const updatedAlert = updatedAlerts.find(alert => alert.id === alertId);\r\n      if (!updatedAlert) {\r\n        throw new Error('Failed to update alert');\r\n      }\r\n      \r\n      return updatedAlert;\r\n    } catch (error) {\r\n      console.error('Error updating budget alert:', error);\r\n      throw new Error('Failed to update budget alert');\r\n    }\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    const budgetsRef = this.getUserBudgetsCollection();\r\n    return onSnapshot(budgetsRef, (snapshot) => {\r\n      const budgets = snapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n      callback(budgets);\r\n    });\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    const budgetRef = this.getBudgetDocRef(budgetId);\r\n    return onSnapshot(budgetRef, async (snapshot: any) => {\r\n      if (snapshot.exists()) {\r\n        const progress = await this.getBudgetProgress(budgetId);\r\n        callback(progress);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBudgetService(config: BudgetServiceConfig, userId?: string): BudgetService {\r\n  console.log('🔍 createBudgetService called with config:', config, 'userId:', userId);\r\n  if (config.useMockData) {\r\n    console.log('🔍 Creating MockBudgetService');\r\n    return new MockBudgetService();\r\n  } else {\r\n    if (!userId) {\r\n      throw new Error('User ID is required for Firebase BudgetService');\r\n    }\r\n    console.log('🔍 Creating FirebaseBudgetService');\r\n    return new FirebaseBudgetService(config, userId);\r\n  }\r\n}\r\n\r\n// Export classes for testing\r\nexport { MockBudgetService, FirebaseBudgetService };\r\n\r\n// Default export for convenience\r\nexport default createBudgetService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}