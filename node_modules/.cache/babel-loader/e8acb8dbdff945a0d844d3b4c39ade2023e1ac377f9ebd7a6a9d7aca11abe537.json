{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dliz1\\\\Desktop\\\\FinanceApp\\\\src\\\\contexts\\\\FinancialContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useMemo } from 'react';\nimport { MOCK_ACCOUNTS } from '../constants/financial';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  accounts: MOCK_ACCOUNTS,\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\n  selectedAccount: null,\n  currentScreen: 'dashboard',\n  selectedPeriod: 'month',\n  isLoading: false,\n  error: null,\n  filters: {},\n  sortBy: 'date-desc'\n};\nconst financialReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SELECT_ACCOUNT':\n      return {\n        ...state,\n        selectedAccount: action.payload\n      };\n    case 'CHANGE_SCREEN':\n      return {\n        ...state,\n        currentScreen: action.payload\n      };\n    case 'CHANGE_PERIOD':\n      return {\n        ...state,\n        selectedPeriod: action.payload\n      };\n    case 'ADD_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions;\n          return {\n            ...account,\n            transactions: (_account$transactions = account.transactions) === null || _account$transactions === void 0 ? void 0 : _account$transactions.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: [...new Set([...txn.tags, action.payload.tag])]\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: [...new Set([...txn.tags, action.payload.tag])]\n        } : txn)\n      };\n    case 'REMOVE_TAG':\n      return {\n        ...state,\n        accounts: state.accounts.map(account => {\n          var _account$transactions2;\n          return {\n            ...account,\n            transactions: (_account$transactions2 = account.transactions) === null || _account$transactions2 === void 0 ? void 0 : _account$transactions2.map(txn => txn.id === action.payload.transactionId ? {\n              ...txn,\n              tags: txn.tags.filter(tag => tag !== action.payload.tag)\n            } : txn)\n          };\n        }),\n        transactions: state.transactions.map(txn => txn.id === action.payload.transactionId ? {\n          ...txn,\n          tags: txn.tags.filter(tag => tag !== action.payload.tag)\n        } : txn)\n      };\n    case 'CONNECT_ACCOUNT':\n      return {\n        ...state,\n        accounts: [...state.accounts, action.payload],\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\n      };\n    case 'APPLY_FILTERS':\n      return {\n        ...state,\n        filters: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst FinancialContext = /*#__PURE__*/createContext(null);\nexport const FinancialProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(financialReducer, initialState);\n  const totalBalance = useMemo(() => state.accounts.reduce((sum, account) => sum + account.balance, 0), [state.accounts]);\n  const summary = useMemo(() => {\n    const currentMonth = new Date().toISOString().substring(0, 7);\n    const monthlyTransactions = state.transactions.filter(txn => txn.date.startsWith(currentMonth));\n    const monthlyIncome = monthlyTransactions.filter(txn => txn.amount > 0).reduce((sum, txn) => sum + txn.amount, 0);\n    const monthlyExpenses = Math.abs(monthlyTransactions.filter(txn => txn.amount < 0).reduce((sum, txn) => sum + txn.amount, 0));\n    const savingsRate = monthlyIncome > 0 ? (monthlyIncome - monthlyExpenses) / monthlyIncome : 0;\n    return {\n      totalBalance,\n      monthlyIncome: Math.round(monthlyIncome * 100) / 100,\n      monthlyExpenses: Math.round(monthlyExpenses * 100) / 100,\n      netWorth: totalBalance,\n      debtToIncomeRatio: monthlyIncome > 0 ? monthlyExpenses / monthlyIncome : 0,\n      savingsRate: Math.max(0, savingsRate)\n    };\n  }, [state.transactions, totalBalance]);\n  const selectAccount = account => {\n    dispatch({\n      type: 'SELECT_ACCOUNT',\n      payload: account\n    });\n  };\n  const changeScreen = screen => {\n    dispatch({\n      type: 'CHANGE_SCREEN',\n      payload: screen\n    });\n  };\n  const changePeriod = period => {\n    dispatch({\n      type: 'CHANGE_PERIOD',\n      payload: period\n    });\n  };\n  const addTag = (transactionId, tag) => {\n    dispatch({\n      type: 'ADD_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const removeTag = (transactionId, tag) => {\n    dispatch({\n      type: 'REMOVE_TAG',\n      payload: {\n        transactionId,\n        tag\n      }\n    });\n  };\n  const applyFilters = filters => {\n    dispatch({\n      type: 'APPLY_FILTERS',\n      payload: filters\n    });\n  };\n  const value = {\n    state,\n    dispatch,\n    totalBalance,\n    summary,\n    selectAccount,\n    changeScreen,\n    changePeriod,\n    addTag,\n    removeTag,\n    applyFilters\n  };\n  return /*#__PURE__*/_jsxDEV(FinancialContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(FinancialProvider, \"0Uc9UIncPtM2fI2N139/k5FoVOI=\");\n_c = FinancialProvider;\nexport const useFinancial = () => {\n  _s2();\n  const context = useContext(FinancialContext);\n  if (!context) {\n    throw new Error('useFinancial must be used within a FinancialProvider');\n  }\n  return context;\n};\n_s2(useFinancial, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"FinancialProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useMemo","MOCK_ACCOUNTS","jsxDEV","_jsxDEV","initialState","accounts","transactions","flatMap","acc","selectedAccount","currentScreen","selectedPeriod","isLoading","error","filters","sortBy","financialReducer","state","action","type","payload","map","account","_account$transactions","txn","id","transactionId","tags","Set","tag","_account$transactions2","filter","FinancialContext","FinancialProvider","children","_s","dispatch","totalBalance","reduce","sum","balance","summary","currentMonth","Date","toISOString","substring","monthlyTransactions","date","startsWith","monthlyIncome","amount","monthlyExpenses","Math","abs","savingsRate","round","netWorth","debtToIncomeRatio","max","selectAccount","changeScreen","screen","changePeriod","period","addTag","removeTag","applyFilters","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useFinancial","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/contexts/FinancialContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useMemo } from 'react';\r\nimport {\r\n  FinancialState,\r\n  FinancialAction,\r\n  Account,\r\n  Transaction,\r\n  FilterOptions,\r\n  TimePeriod,\r\n  FinancialSummary,\r\n} from '../types/financial';\r\nimport { MOCK_ACCOUNTS } from '../constants/financial';\r\n\r\nconst initialState: FinancialState = {\r\n  accounts: MOCK_ACCOUNTS,\r\n  transactions: MOCK_ACCOUNTS.flatMap(acc => acc.transactions || []),\r\n  selectedAccount: null,\r\n  currentScreen: 'dashboard',\r\n  selectedPeriod: 'month',\r\n  isLoading: false,\r\n  error: null,\r\n  filters: {},\r\n  sortBy: 'date-desc'\r\n};\r\n\r\nconst financialReducer = (state: FinancialState, action: FinancialAction): FinancialState => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, isLoading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SELECT_ACCOUNT':\r\n      return { ...state, selectedAccount: action.payload };\r\n    case 'CHANGE_SCREEN':\r\n      return { ...state, currentScreen: action.payload };\r\n    case 'CHANGE_PERIOD':\r\n      return { ...state, selectedPeriod: action.payload };\r\n    case 'ADD_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: state.accounts.map(account => ({\r\n          ...account,\r\n          transactions: account.transactions?.map(txn => \r\n            txn.id === action.payload.transactionId\r\n              ? { ...txn, tags: [...new Set([...txn.tags, action.payload.tag])] }\r\n              : txn\r\n          )\r\n        })),\r\n        transactions: state.transactions.map(txn =>\r\n          txn.id === action.payload.transactionId\r\n            ? { ...txn, tags: [...new Set([...txn.tags, action.payload.tag])] }\r\n            : txn\r\n        )\r\n      };\r\n    case 'REMOVE_TAG':\r\n      return {\r\n        ...state,\r\n        accounts: state.accounts.map(account => ({\r\n          ...account,\r\n          transactions: account.transactions?.map(txn => \r\n            txn.id === action.payload.transactionId\r\n              ? { ...txn, tags: txn.tags.filter(tag => tag !== action.payload.tag) }\r\n              : txn\r\n          )\r\n        })),\r\n        transactions: state.transactions.map(txn =>\r\n          txn.id === action.payload.transactionId\r\n            ? { ...txn, tags: txn.tags.filter(tag => tag !== action.payload.tag) }\r\n            : txn\r\n        )\r\n      };\r\n    case 'CONNECT_ACCOUNT':\r\n      return {\r\n        ...state,\r\n        accounts: [...state.accounts, action.payload],\r\n        transactions: [...state.transactions, ...(action.payload.transactions || [])]\r\n      };\r\n    case 'APPLY_FILTERS':\r\n      return { ...state, filters: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ninterface FinancialContextType {\r\n  state: FinancialState;\r\n  dispatch: React.Dispatch<FinancialAction>;\r\n  totalBalance: number;\r\n  summary: FinancialSummary;\r\n  selectAccount: (account: Account | null) => void;\r\n  changeScreen: (screen: 'dashboard' | 'accounts' | 'transactions') => void;\r\n  changePeriod: (period: TimePeriod) => void;\r\n  addTag: (transactionId: string, tag: string) => void;\r\n  removeTag: (transactionId: string, tag: string) => void;\r\n  applyFilters: (filters: FilterOptions) => void;\r\n}\r\n\r\nconst FinancialContext = createContext<FinancialContextType | null>(null);\r\n\r\nexport const FinancialProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(financialReducer, initialState);\r\n\r\n  const totalBalance = useMemo(() => \r\n    state.accounts.reduce((sum, account) => sum + account.balance, 0), \r\n    [state.accounts]\r\n  );\r\n\r\n  const summary = useMemo((): FinancialSummary => {\r\n    const currentMonth = new Date().toISOString().substring(0, 7);\r\n    const monthlyTransactions = state.transactions.filter(txn => \r\n      txn.date.startsWith(currentMonth)\r\n    );\r\n\r\n    const monthlyIncome = monthlyTransactions\r\n      .filter(txn => txn.amount > 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0);\r\n\r\n    const monthlyExpenses = Math.abs(monthlyTransactions\r\n      .filter(txn => txn.amount < 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0));\r\n\r\n    const savingsRate = monthlyIncome > 0 ? (monthlyIncome - monthlyExpenses) / monthlyIncome : 0;\r\n\r\n    return {\r\n      totalBalance,\r\n      monthlyIncome: Math.round(monthlyIncome * 100) / 100,\r\n      monthlyExpenses: Math.round(monthlyExpenses * 100) / 100,\r\n      netWorth: totalBalance,\r\n      debtToIncomeRatio: monthlyIncome > 0 ? monthlyExpenses / monthlyIncome : 0,\r\n      savingsRate: Math.max(0, savingsRate),\r\n    };\r\n  }, [state.transactions, totalBalance]);\r\n\r\n  const selectAccount = (account: Account | null) => {\r\n    dispatch({ type: 'SELECT_ACCOUNT', payload: account });\r\n  };\r\n\r\n  const changeScreen = (screen: 'dashboard' | 'accounts' | 'transactions') => {\r\n    dispatch({ type: 'CHANGE_SCREEN', payload: screen });\r\n  };\r\n\r\n  const changePeriod = (period: TimePeriod) => {\r\n    dispatch({ type: 'CHANGE_PERIOD', payload: period });\r\n  };\r\n\r\n  const addTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'ADD_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const removeTag = (transactionId: string, tag: string) => {\r\n    dispatch({ type: 'REMOVE_TAG', payload: { transactionId, tag } });\r\n  };\r\n\r\n  const applyFilters = (filters: FilterOptions) => {\r\n    dispatch({ type: 'APPLY_FILTERS', payload: filters });\r\n  };\r\n\r\n  const value: FinancialContextType = {\r\n    state,\r\n    dispatch,\r\n    totalBalance,\r\n    summary,\r\n    selectAccount,\r\n    changeScreen,\r\n    changePeriod,\r\n    addTag,\r\n    removeTag,\r\n    applyFilters,\r\n  };\r\n\r\n  return (\r\n    <FinancialContext.Provider value={value}>\r\n      {children}\r\n    </FinancialContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useFinancial = (): FinancialContextType => {\r\n  const context = useContext(FinancialContext);\r\n  if (!context) {\r\n    throw new Error('useFinancial must be used within a FinancialProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}