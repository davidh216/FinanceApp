{"ast":null,"code":"import { format, subDays, subWeeks, subMonths, subQuarters, subYears, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, startOfQuarter, endOfQuarter, startOfYear, endOfYear } from 'date-fns';\n// Color palette for charts\nexport const CHART_COLORS = {\n  primary: '#3B82F6',\n  secondary: '#10B981',\n  accent: '#F59E0B',\n  danger: '#EF4444',\n  warning: '#F97316',\n  info: '#06B6D4',\n  success: '#22C55E',\n  purple: '#8B5CF6',\n  pink: '#EC4899',\n  gray: '#6B7280',\n  lightGray: '#E5E7EB',\n  darkGray: '#374151',\n  // Additional colors for charts\n  blue: '#3B82F6',\n  red: '#EF4444',\n  orange: '#F97316',\n  green: '#22C55E'\n};\n\n// Generate gradient colors for charts\nexport const generateGradientColors = (baseColor, opacity = 0.1) => {\n  return `${baseColor}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;\n};\n\n// Process transactions for balance trend chart\nexport const processBalanceTrendData = (transactions, accounts, period, dataPoints = 12) => {\n  const dataPointsArray = [];\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\n\n  // Get date range based on period\n  const endDate = new Date();\n  let startDate;\n  switch (period) {\n    case 'day':\n      startDate = subDays(endDate, dataPoints - 1);\n      break;\n    case 'week':\n      startDate = subWeeks(endDate, dataPoints - 1);\n      break;\n    case 'month':\n      startDate = subMonths(endDate, dataPoints - 1);\n      break;\n    case 'quarter':\n      startDate = subQuarters(endDate, dataPoints - 1);\n      break;\n    case 'year':\n      startDate = subYears(endDate, dataPoints - 1);\n      break;\n    default:\n      startDate = subMonths(endDate, dataPoints - 1);\n  }\n\n  // Generate data points\n  for (let i = 0; i < dataPoints; i++) {\n    let currentDate;\n\n    // Calculate the correct date based on period\n    switch (period) {\n      case 'day':\n        currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n        break;\n      case 'week':\n        currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i * 7);\n        break;\n      case 'month':\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i);\n        break;\n      case 'quarter':\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i * 3);\n        break;\n      case 'year':\n        currentDate = new Date(startDate);\n        currentDate.setFullYear(startDate.getFullYear() + i);\n        break;\n      default:\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i);\n    }\n\n    // Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\n    const balanceChange = transactions.filter(t => new Date(t.date) <= currentDate).reduce((sum, t) => sum + t.amount, 0);\n    const balance = totalBalance + balanceChange;\n    dataPointsArray.push({\n      label: format(currentDate, getDateFormat(period)),\n      value: balance,\n      date: currentDate.toISOString()\n    });\n  }\n  return dataPointsArray;\n};\n\n// Process transactions for income vs expenses chart\nexport const processIncomeExpenseData = (transactions, period, dataPoints = 12) => {\n  const incomeData = [];\n  const expenseData = [];\n  const endDate = new Date();\n  let startDate;\n  switch (period) {\n    case 'day':\n      startDate = subDays(endDate, dataPoints - 1);\n      break;\n    case 'week':\n      startDate = subWeeks(endDate, dataPoints - 1);\n      break;\n    case 'month':\n      startDate = subMonths(endDate, dataPoints - 1);\n      break;\n    case 'quarter':\n      startDate = subQuarters(endDate, dataPoints - 1);\n      break;\n    case 'year':\n      startDate = subYears(endDate, dataPoints - 1);\n      break;\n    default:\n      startDate = subMonths(endDate, dataPoints - 1);\n  }\n  for (let i = 0; i < dataPoints; i++) {\n    let currentDate;\n\n    // Calculate the correct date based on period\n    switch (period) {\n      case 'day':\n        currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i);\n        break;\n      case 'week':\n        currentDate = new Date(startDate);\n        currentDate.setDate(startDate.getDate() + i * 7);\n        break;\n      case 'month':\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i);\n        break;\n      case 'quarter':\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i * 3);\n        break;\n      case 'year':\n        currentDate = new Date(startDate);\n        currentDate.setFullYear(startDate.getFullYear() + i);\n        break;\n      default:\n        currentDate = new Date(startDate);\n        currentDate.setMonth(startDate.getMonth() + i);\n    }\n    const periodStart = getPeriodStart(currentDate, period);\n    const periodEnd = getPeriodEnd(currentDate, period);\n    const periodTransactions = transactions.filter(t => {\n      const transactionDate = new Date(t.date);\n      return transactionDate >= periodStart && transactionDate <= periodEnd;\n    });\n    const income = periodTransactions.filter(t => t.amount > 0).reduce((sum, t) => sum + t.amount, 0);\n    const expenses = Math.abs(periodTransactions.filter(t => t.amount < 0).reduce((sum, t) => sum + t.amount, 0));\n    incomeData.push({\n      label: format(currentDate, getDateFormat(period)),\n      value: income,\n      date: currentDate.toISOString()\n    });\n    expenseData.push({\n      label: format(currentDate, getDateFormat(period)),\n      value: expenses,\n      date: currentDate.toISOString()\n    });\n  }\n  return {\n    income: incomeData,\n    expenses: expenseData\n  };\n};\n\n// Process transactions for category spending breakdown\nexport const processCategorySpendingData = (transactions, period) => {\n  const categoryMap = new Map();\n\n  // Get date range based on period - same logic as other charts\n  const endDate = new Date();\n  let startDate;\n  switch (period) {\n    case 'day':\n      startDate = subDays(endDate, 30); // Last 30 days for daily view\n      break;\n    case 'week':\n      startDate = subWeeks(endDate, 12); // Last 12 weeks\n      break;\n    case 'month':\n      startDate = subMonths(endDate, 12); // Last 12 months\n      break;\n    case 'quarter':\n      startDate = subQuarters(endDate, 4); // Last 4 quarters\n      break;\n    case 'year':\n      startDate = subYears(endDate, 5); // Last 5 years\n      break;\n    default:\n      startDate = subMonths(endDate, 12);\n  }\n\n  // Filter transactions for the period\n  const periodTransactions = transactions.filter(t => {\n    const transactionDate = new Date(t.date);\n    return transactionDate >= startDate && transactionDate <= endDate && t.amount < 0;\n  });\n\n  // Group by category\n  periodTransactions.forEach(transaction => {\n    const category = transaction.category || 'Uncategorized';\n    const amount = Math.abs(transaction.amount);\n    categoryMap.set(category, (categoryMap.get(category) || 0) + amount);\n  });\n\n  // Convert to chart data points\n  const dataPoints = Array.from(categoryMap.entries()).map(([category, amount]) => ({\n    label: category,\n    value: amount,\n    date: new Date().toISOString()\n  })).sort((a, b) => b.value - a.value).slice(0, 8); // Top 8 categories\n\n  return dataPoints;\n};\n\n// Process data for savings rate progress chart\nexport const processSavingsRateData = (summary, period) => {\n  const currentSavingsRate = summary.savingsRate * 100;\n  const targetSavingsRate = 20; // 20% target\n\n  return [{\n    label: 'Current',\n    value: currentSavingsRate,\n    date: new Date().toISOString()\n  }, {\n    label: 'Target',\n    value: targetSavingsRate,\n    date: new Date().toISOString()\n  }];\n};\n\n// Helper functions\nconst getDateFormat = period => {\n  switch (period) {\n    case 'day':\n      return 'MMM dd';\n    case 'week':\n      return 'MMM dd';\n    case 'month':\n      return 'MMM yyyy';\n    case 'quarter':\n      return 'Qo yyyy';\n    case 'year':\n      return 'yyyy';\n    default:\n      return 'MMM dd';\n  }\n};\nconst getPeriodStart = (date, period) => {\n  switch (period) {\n    case 'day':\n      return startOfDay(date);\n    case 'week':\n      return startOfWeek(date);\n    case 'month':\n      return startOfMonth(date);\n    case 'quarter':\n      return startOfQuarter(date);\n    case 'year':\n      return startOfYear(date);\n    default:\n      return startOfMonth(date);\n  }\n};\nconst getPeriodEnd = (date, period) => {\n  switch (period) {\n    case 'day':\n      return endOfDay(date);\n    case 'week':\n      return endOfWeek(date);\n    case 'month':\n      return endOfMonth(date);\n    case 'quarter':\n      return endOfQuarter(date);\n    case 'year':\n      return endOfYear(date);\n    default:\n      return endOfMonth(date);\n  }\n};\n\n// Default chart options\nexport const getDefaultChartOptions = type => {\n  const baseOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'bottom',\n        labels: {\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            size: 12\n          }\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#fff',\n        bodyColor: '#fff',\n        borderColor: 'rgba(255, 255, 255, 0.1)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          label: function (context) {\n            const label = context.dataset.label || '';\n            const value = context.parsed.y || context.parsed;\n            return `${label}: $${value.toLocaleString()}`;\n          }\n        }\n      }\n    }\n  };\n  switch (type) {\n    case 'line':\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              maxRotation: 45\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)'\n            },\n            ticks: {\n              callback: function (value) {\n                return '$' + value.toLocaleString();\n              }\n            }\n          }\n        },\n        elements: {\n          point: {\n            radius: 4,\n            hoverRadius: 6\n          },\n          line: {\n            tension: 0.4\n          }\n        }\n      };\n    case 'bar':\n      return {\n        ...baseOptions,\n        scales: {\n          x: {\n            grid: {\n              display: false\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              color: 'rgba(0, 0, 0, 0.1)'\n            },\n            ticks: {\n              callback: function (value) {\n                return '$' + value.toLocaleString();\n              }\n            }\n          }\n        }\n      };\n    case 'doughnut':\n    case 'pie':\n      return {\n        ...baseOptions,\n        cutout: type === 'doughnut' ? '60%' : undefined,\n        plugins: {\n          ...baseOptions.plugins,\n          legend: {\n            ...baseOptions.plugins.legend,\n            position: 'right'\n          }\n        }\n      };\n    default:\n      return baseOptions;\n  }\n};","map":{"version":3,"names":["format","subDays","subWeeks","subMonths","subQuarters","subYears","startOfDay","endOfDay","startOfWeek","endOfWeek","startOfMonth","endOfMonth","startOfQuarter","endOfQuarter","startOfYear","endOfYear","CHART_COLORS","primary","secondary","accent","danger","warning","info","success","purple","pink","gray","lightGray","darkGray","blue","red","orange","green","generateGradientColors","baseColor","opacity","Math","floor","toString","padStart","processBalanceTrendData","transactions","accounts","period","dataPoints","dataPointsArray","totalBalance","reduce","sum","account","balance","endDate","Date","startDate","i","currentDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","balanceChange","filter","t","date","amount","push","label","getDateFormat","value","toISOString","processIncomeExpenseData","incomeData","expenseData","periodStart","getPeriodStart","periodEnd","getPeriodEnd","periodTransactions","transactionDate","income","expenses","abs","processCategorySpendingData","categoryMap","Map","forEach","transaction","category","set","get","Array","from","entries","map","sort","a","b","slice","processSavingsRateData","summary","currentSavingsRate","savingsRate","targetSavingsRate","getDefaultChartOptions","type","baseOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","usePointStyle","padding","font","size","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","cornerRadius","displayColors","callbacks","context","dataset","parsed","y","toLocaleString","scales","x","grid","display","ticks","maxRotation","beginAtZero","color","callback","elements","point","radius","hoverRadius","line","tension","cutout","undefined"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/chartUtils.ts"],"sourcesContent":["import { Transaction, Account, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { format, subDays, subWeeks, subMonths, subQuarters, subYears, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, startOfQuarter, endOfQuarter, startOfYear, endOfYear } from 'date-fns';\r\n\r\nexport interface ChartDataPoint {\r\n  label: string;\r\n  value: number;\r\n  date: string;\r\n}\r\n\r\nexport interface ChartDataset {\r\n  label: string;\r\n  data: number[];\r\n  backgroundColor?: string | string[];\r\n  borderColor?: string | string[];\r\n  borderWidth?: number;\r\n  fill?: boolean;\r\n  tension?: number;\r\n}\r\n\r\nexport interface ChartConfig {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: ChartDataset[];\r\n  };\r\n  options: any;\r\n}\r\n\r\n// Color palette for charts\r\nexport const CHART_COLORS = {\r\n  primary: '#3B82F6',\r\n  secondary: '#10B981',\r\n  accent: '#F59E0B',\r\n  danger: '#EF4444',\r\n  warning: '#F97316',\r\n  info: '#06B6D4',\r\n  success: '#22C55E',\r\n  purple: '#8B5CF6',\r\n  pink: '#EC4899',\r\n  gray: '#6B7280',\r\n  lightGray: '#E5E7EB',\r\n  darkGray: '#374151',\r\n  // Additional colors for charts\r\n  blue: '#3B82F6',\r\n  red: '#EF4444',\r\n  orange: '#F97316',\r\n  green: '#22C55E',\r\n};\r\n\r\n// Generate gradient colors for charts\r\nexport const generateGradientColors = (baseColor: string, opacity: number = 0.1): string => {\r\n  return `${baseColor}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// Process transactions for balance trend chart\r\nexport const processBalanceTrendData = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): ChartDataPoint[] => {\r\n  const dataPointsArray: ChartDataPoint[] = [];\r\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n  \r\n  // Get date range based on period\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    // Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\r\n    const balanceChange = transactions\r\n      .filter(t => new Date(t.date) <= currentDate)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const balance = totalBalance + balanceChange;\r\n    \r\n    dataPointsArray.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: balance,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return dataPointsArray;\r\n};\r\n\r\n// Process transactions for income vs expenses chart\r\nexport const processIncomeExpenseData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): { income: ChartDataPoint[], expenses: ChartDataPoint[] } => {\r\n  const incomeData: ChartDataPoint[] = [];\r\n  const expenseData: ChartDataPoint[] = [];\r\n  \r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    const periodStart = getPeriodStart(currentDate, period);\r\n    const periodEnd = getPeriodEnd(currentDate, period);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.date);\r\n      return transactionDate >= periodStart && transactionDate <= periodEnd;\r\n    });\r\n    \r\n    const income = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const expenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    incomeData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: income,\r\n      date: currentDate.toISOString(),\r\n    });\r\n    \r\n    expenseData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: expenses,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return { income: incomeData, expenses: expenseData };\r\n};\r\n\r\n// Process transactions for category spending breakdown\r\nexport const processCategorySpendingData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const categoryMap = new Map<string, number>();\r\n  \r\n  // Get date range based on period - same logic as other charts\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, 30); // Last 30 days for daily view\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, 12); // Last 12 weeks\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, 12); // Last 12 months\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, 4); // Last 4 quarters\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, 5); // Last 5 years\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, 12);\r\n  }\r\n\r\n  // Filter transactions for the period\r\n  const periodTransactions = transactions.filter(t => {\r\n    const transactionDate = new Date(t.date);\r\n    return transactionDate >= startDate && transactionDate <= endDate && t.amount < 0;\r\n  });\r\n\r\n  // Group by category\r\n  periodTransactions.forEach(transaction => {\r\n    const category = transaction.category || 'Uncategorized';\r\n    const amount = Math.abs(transaction.amount);\r\n    categoryMap.set(category, (categoryMap.get(category) || 0) + amount);\r\n  });\r\n\r\n  // Convert to chart data points\r\n  const dataPoints: ChartDataPoint[] = Array.from(categoryMap.entries())\r\n    .map(([category, amount]) => ({\r\n      label: category,\r\n      value: amount,\r\n      date: new Date().toISOString(),\r\n    }))\r\n    .sort((a, b) => b.value - a.value)\r\n    .slice(0, 8); // Top 8 categories\r\n\r\n  return dataPoints;\r\n};\r\n\r\n// Process data for savings rate progress chart\r\nexport const processSavingsRateData = (\r\n  summary: FinancialSummary,\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const currentSavingsRate = summary.savingsRate * 100;\r\n  const targetSavingsRate = 20; // 20% target\r\n  \r\n  return [\r\n    {\r\n      label: 'Current',\r\n      value: currentSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n    {\r\n      label: 'Target',\r\n      value: targetSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n  ];\r\n};\r\n\r\n// Helper functions\r\nconst getDateFormat = (period: TimePeriod): string => {\r\n  switch (period) {\r\n    case 'day':\r\n      return 'MMM dd';\r\n    case 'week':\r\n      return 'MMM dd';\r\n    case 'month':\r\n      return 'MMM yyyy';\r\n    case 'quarter':\r\n      return 'Qo yyyy';\r\n    case 'year':\r\n      return 'yyyy';\r\n    default:\r\n      return 'MMM dd';\r\n  }\r\n};\r\n\r\nconst getPeriodStart = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return startOfDay(date);\r\n    case 'week':\r\n      return startOfWeek(date);\r\n    case 'month':\r\n      return startOfMonth(date);\r\n    case 'quarter':\r\n      return startOfQuarter(date);\r\n    case 'year':\r\n      return startOfYear(date);\r\n    default:\r\n      return startOfMonth(date);\r\n  }\r\n};\r\n\r\nconst getPeriodEnd = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return endOfDay(date);\r\n    case 'week':\r\n      return endOfWeek(date);\r\n    case 'month':\r\n      return endOfMonth(date);\r\n    case 'quarter':\r\n      return endOfQuarter(date);\r\n    case 'year':\r\n      return endOfYear(date);\r\n    default:\r\n      return endOfMonth(date);\r\n  }\r\n};\r\n\r\n// Default chart options\r\nexport const getDefaultChartOptions = (type: 'line' | 'bar' | 'doughnut' | 'pie') => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(255, 255, 255, 0.1)',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y || context.parsed;\r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  switch (type) {\r\n    case 'line':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 4,\r\n            hoverRadius: 6,\r\n          },\r\n          line: {\r\n            tension: 0.4,\r\n          },\r\n        },\r\n      };\r\n    case 'bar':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'doughnut':\r\n    case 'pie':\r\n      return {\r\n        ...baseOptions,\r\n        cutout: type === 'doughnut' ? '60%' : undefined,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            ...baseOptions.plugins.legend,\r\n            position: 'right' as const,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}