{"ast":null,"code":"// Service Worker Registration Utility\n// Handles service worker installation, updates, and communication\nclass ServiceWorkerManager{constructor(){this.registration=null;this.updateAvailable=false;}async register(){if(!('serviceWorker'in navigator)){console.log('Service Worker not supported');return false;}try{this.registration=await navigator.serviceWorker.register('/sw.js',{scope:'/'});console.log('Service Worker registered successfully:',this.registration);// Listen for updates\nthis.registration.addEventListener('updatefound',()=>{const newWorker=this.registration.installing;if(newWorker){newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'&&navigator.serviceWorker.controller){this.updateAvailable=true;this.notifyUpdateAvailable();}});}});// Handle controller change\nnavigator.serviceWorker.addEventListener('controllerchange',()=>{console.log('Service Worker controller changed');window.location.reload();});// Listen for messages from service worker\nnavigator.serviceWorker.addEventListener('message',event=>{this.handleServiceWorkerMessage(event.data);});return true;}catch(error){console.error('Service Worker registration failed:',error);return false;}}handleServiceWorkerMessage(message){switch(message.type){case'CACHE_UPDATED':console.log('Cache updated:',message.payload);break;case'SYNC_COMPLETED':console.log('Background sync completed');break;case'SYNC_FAILED':console.error('Background sync failed:',message.payload);break;default:console.log('Unknown service worker message:',message);}}notifyUpdateAvailable(){// You can implement a custom update notification here\n// For now, we'll just log it\nconsole.log('Service Worker update available');// Example: Show a notification to the user\nif('Notification'in window&&Notification.permission==='granted'){new Notification('FinanceApp Update Available',{body:'A new version is available. Click to update.',icon:'/favicon.ico'});}}async update(){if(this.registration&&this.updateAvailable){await this.registration.update();}}async skipWaiting(){if(this.registration&&this.registration.waiting){this.registration.waiting.postMessage({type:'SKIP_WAITING'});}}async unregister(){if(this.registration){return await this.registration.unregister();}return false;}async getCacheNames(){if(!('caches'in window)){return[];}return await caches.keys();}async clearAllCaches(){if(!('caches'in window)){return;}const cacheNames=await caches.keys();await Promise.all(cacheNames.map(cacheName=>caches.delete(cacheName)));}async clearCache(cacheName){if(!('caches'in window)){return false;}return await caches.delete(cacheName);}async getCacheSize(cacheName){if(!('caches'in window)){return 0;}const cache=await caches.open(cacheName);const keys=await cache.keys();return keys.length;}async requestNotificationPermission(){if(!('Notification'in window)){return'denied';}if(Notification.permission==='default'){return await Notification.requestPermission();}return Notification.permission;}async sendMessageToServiceWorker(message){if(this.registration&&this.registration.active){this.registration.active.postMessage(message);}}async triggerBackgroundSync(tag){if(!('serviceWorker'in navigator)||!('sync'in window)){return;}try{await navigator.serviceWorker.ready;await navigator.serviceWorker.sync.register(tag);}catch(error){console.error('Background sync registration failed:',error);}}isOnline(){return navigator.onLine;}addOnlineListener(callback){window.addEventListener('online',callback);}addOfflineListener(callback){window.addEventListener('offline',callback);}removeOnlineListener(callback){window.removeEventListener('online',callback);}removeOfflineListener(callback){window.removeEventListener('offline',callback);}}// Create singleton instance\nconst serviceWorkerManager=new ServiceWorkerManager();/**\r\n * Register service worker with development mode handling\r\n * Prevents cache issues during development by disabling SW in dev mode\r\n */export const registerServiceWorker=async()=>{// Disable service worker in development mode to prevent cache issues\nif(process.env.NODE_ENV==='development'){console.log('Service worker disabled in development mode to prevent cache issues');// Unregister any existing service workers\nif('serviceWorker'in navigator){const registrations=await navigator.serviceWorker.getRegistrations();for(const registration of registrations){await registration.unregister();console.log('Unregistered existing service worker');}}return;}if('serviceWorker'in navigator){try{const registration=await navigator.serviceWorker.register('/sw.js');console.log('Service worker registered successfully:',registration);}catch(error){console.error('Service worker registration failed:',error);}}};export const updateServiceWorker=()=>serviceWorkerManager.update();export const skipWaiting=()=>serviceWorkerManager.skipWaiting();export const unregisterServiceWorker=()=>serviceWorkerManager.unregister();export const clearAllCaches=()=>serviceWorkerManager.clearAllCaches();export const getCacheNames=()=>serviceWorkerManager.getCacheNames();export const clearCache=cacheName=>serviceWorkerManager.clearCache(cacheName);export const getCacheSize=cacheName=>serviceWorkerManager.getCacheSize(cacheName);export const requestNotificationPermission=()=>serviceWorkerManager.requestNotificationPermission();export const sendMessageToServiceWorker=message=>serviceWorkerManager.sendMessageToServiceWorker(message);export const triggerBackgroundSync=tag=>serviceWorkerManager.triggerBackgroundSync(tag);export const isOnline=()=>serviceWorkerManager.isOnline();export const addOnlineListener=callback=>serviceWorkerManager.addOnlineListener(callback);export const addOfflineListener=callback=>serviceWorkerManager.addOfflineListener(callback);export const removeOnlineListener=callback=>serviceWorkerManager.removeOnlineListener(callback);export const removeOfflineListener=callback=>serviceWorkerManager.removeOfflineListener(callback);// Export the manager instance for advanced usage\nexport default serviceWorkerManager;","map":{"version":3,"names":["ServiceWorkerManager","constructor","registration","updateAvailable","register","navigator","console","log","serviceWorker","scope","addEventListener","newWorker","installing","state","controller","notifyUpdateAvailable","window","location","reload","event","handleServiceWorkerMessage","data","error","message","type","payload","Notification","permission","body","icon","update","skipWaiting","waiting","postMessage","unregister","getCacheNames","caches","keys","clearAllCaches","cacheNames","Promise","all","map","cacheName","delete","clearCache","getCacheSize","cache","open","length","requestNotificationPermission","requestPermission","sendMessageToServiceWorker","active","triggerBackgroundSync","tag","ready","sync","isOnline","onLine","addOnlineListener","callback","addOfflineListener","removeOnlineListener","removeEventListener","removeOfflineListener","serviceWorkerManager","registerServiceWorker","process","env","NODE_ENV","registrations","getRegistrations","updateServiceWorker","unregisterServiceWorker"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/serviceWorker.ts"],"sourcesContent":["// Service Worker Registration Utility\r\n// Handles service worker installation, updates, and communication\r\n\r\ninterface ServiceWorkerMessage {\r\n  type: string;\r\n  payload?: any;\r\n}\r\n\r\nclass ServiceWorkerManager {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private updateAvailable = false;\r\n\r\n  async register(): Promise<boolean> {\r\n    if (!('serviceWorker' in navigator)) {\r\n      console.log('Service Worker not supported');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      this.registration = await navigator.serviceWorker.register('/sw.js', {\r\n        scope: '/',\r\n      });\r\n\r\n      console.log('Service Worker registered successfully:', this.registration);\r\n\r\n      // Listen for updates\r\n      this.registration.addEventListener('updatefound', () => {\r\n        const newWorker = this.registration!.installing;\r\n        if (newWorker) {\r\n          newWorker.addEventListener('statechange', () => {\r\n            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\r\n              this.updateAvailable = true;\r\n              this.notifyUpdateAvailable();\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      // Handle controller change\r\n      navigator.serviceWorker.addEventListener('controllerchange', () => {\r\n        console.log('Service Worker controller changed');\r\n        window.location.reload();\r\n      });\r\n\r\n      // Listen for messages from service worker\r\n      navigator.serviceWorker.addEventListener('message', (event) => {\r\n        this.handleServiceWorkerMessage(event.data);\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Service Worker registration failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private handleServiceWorkerMessage(message: ServiceWorkerMessage) {\r\n    switch (message.type) {\r\n      case 'CACHE_UPDATED':\r\n        console.log('Cache updated:', message.payload);\r\n        break;\r\n      case 'SYNC_COMPLETED':\r\n        console.log('Background sync completed');\r\n        break;\r\n      case 'SYNC_FAILED':\r\n        console.error('Background sync failed:', message.payload);\r\n        break;\r\n      default:\r\n        console.log('Unknown service worker message:', message);\r\n    }\r\n  }\r\n\r\n  private notifyUpdateAvailable() {\r\n    // You can implement a custom update notification here\r\n    // For now, we'll just log it\r\n    console.log('Service Worker update available');\r\n    \r\n    // Example: Show a notification to the user\r\n    if ('Notification' in window && Notification.permission === 'granted') {\r\n      new Notification('FinanceApp Update Available', {\r\n        body: 'A new version is available. Click to update.',\r\n        icon: '/favicon.ico',\r\n      });\r\n    }\r\n  }\r\n\r\n  async update(): Promise<void> {\r\n    if (this.registration && this.updateAvailable) {\r\n      await this.registration.update();\r\n    }\r\n  }\r\n\r\n  async skipWaiting(): Promise<void> {\r\n    if (this.registration && this.registration.waiting) {\r\n      this.registration.waiting.postMessage({ type: 'SKIP_WAITING' });\r\n    }\r\n  }\r\n\r\n  async unregister(): Promise<boolean> {\r\n    if (this.registration) {\r\n      return await this.registration.unregister();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async getCacheNames(): Promise<string[]> {\r\n    if (!('caches' in window)) {\r\n      return [];\r\n    }\r\n    return await caches.keys();\r\n  }\r\n\r\n  async clearAllCaches(): Promise<void> {\r\n    if (!('caches' in window)) {\r\n      return;\r\n    }\r\n    \r\n    const cacheNames = await caches.keys();\r\n    await Promise.all(\r\n      cacheNames.map(cacheName => caches.delete(cacheName))\r\n    );\r\n  }\r\n\r\n  async clearCache(cacheName: string): Promise<boolean> {\r\n    if (!('caches' in window)) {\r\n      return false;\r\n    }\r\n    return await caches.delete(cacheName);\r\n  }\r\n\r\n  async getCacheSize(cacheName: string): Promise<number> {\r\n    if (!('caches' in window)) {\r\n      return 0;\r\n    }\r\n    \r\n    const cache = await caches.open(cacheName);\r\n    const keys = await cache.keys();\r\n    return keys.length;\r\n  }\r\n\r\n  async requestNotificationPermission(): Promise<NotificationPermission> {\r\n    if (!('Notification' in window)) {\r\n      return 'denied';\r\n    }\r\n\r\n    if (Notification.permission === 'default') {\r\n      return await Notification.requestPermission();\r\n    }\r\n\r\n    return Notification.permission;\r\n  }\r\n\r\n  async sendMessageToServiceWorker(message: ServiceWorkerMessage): Promise<void> {\r\n    if (this.registration && this.registration.active) {\r\n      this.registration.active.postMessage(message);\r\n    }\r\n  }\r\n\r\n  async triggerBackgroundSync(tag: string): Promise<void> {\r\n    if (!('serviceWorker' in navigator) || !('sync' in window)) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await navigator.serviceWorker.ready;\r\n      await (navigator.serviceWorker as any).sync.register(tag);\r\n    } catch (error) {\r\n      console.error('Background sync registration failed:', error);\r\n    }\r\n  }\r\n\r\n  isOnline(): boolean {\r\n    return navigator.onLine;\r\n  }\r\n\r\n  addOnlineListener(callback: () => void): void {\r\n    window.addEventListener('online', callback);\r\n  }\r\n\r\n  addOfflineListener(callback: () => void): void {\r\n    window.addEventListener('offline', callback);\r\n  }\r\n\r\n  removeOnlineListener(callback: () => void): void {\r\n    window.removeEventListener('online', callback);\r\n  }\r\n\r\n  removeOfflineListener(callback: () => void): void {\r\n    window.removeEventListener('offline', callback);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst serviceWorkerManager = new ServiceWorkerManager();\r\n\r\n/**\r\n * Register service worker with development mode handling\r\n * Prevents cache issues during development by disabling SW in dev mode\r\n */\r\nexport const registerServiceWorker = async () => {\r\n  // Disable service worker in development mode to prevent cache issues\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log('Service worker disabled in development mode to prevent cache issues');\r\n    \r\n    // Unregister any existing service workers\r\n    if ('serviceWorker' in navigator) {\r\n      const registrations = await navigator.serviceWorker.getRegistrations();\r\n      for (const registration of registrations) {\r\n        await registration.unregister();\r\n        console.log('Unregistered existing service worker');\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  if ('serviceWorker' in navigator) {\r\n    try {\r\n      const registration = await navigator.serviceWorker.register('/sw.js');\r\n      console.log('Service worker registered successfully:', registration);\r\n    } catch (error) {\r\n      console.error('Service worker registration failed:', error);\r\n    }\r\n  }\r\n};\r\nexport const updateServiceWorker = () => serviceWorkerManager.update();\r\nexport const skipWaiting = () => serviceWorkerManager.skipWaiting();\r\nexport const unregisterServiceWorker = () => serviceWorkerManager.unregister();\r\nexport const clearAllCaches = () => serviceWorkerManager.clearAllCaches();\r\nexport const getCacheNames = () => serviceWorkerManager.getCacheNames();\r\nexport const clearCache = (cacheName: string) => serviceWorkerManager.clearCache(cacheName);\r\nexport const getCacheSize = (cacheName: string) => serviceWorkerManager.getCacheSize(cacheName);\r\nexport const requestNotificationPermission = () => serviceWorkerManager.requestNotificationPermission();\r\nexport const sendMessageToServiceWorker = (message: ServiceWorkerMessage) => serviceWorkerManager.sendMessageToServiceWorker(message);\r\nexport const triggerBackgroundSync = (tag: string) => serviceWorkerManager.triggerBackgroundSync(tag);\r\nexport const isOnline = () => serviceWorkerManager.isOnline();\r\nexport const addOnlineListener = (callback: () => void) => serviceWorkerManager.addOnlineListener(callback);\r\nexport const addOfflineListener = (callback: () => void) => serviceWorkerManager.addOfflineListener(callback);\r\nexport const removeOnlineListener = (callback: () => void) => serviceWorkerManager.removeOnlineListener(callback);\r\nexport const removeOfflineListener = (callback: () => void) => serviceWorkerManager.removeOfflineListener(callback);\r\n\r\n// Export the manager instance for advanced usage\r\nexport default serviceWorkerManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}