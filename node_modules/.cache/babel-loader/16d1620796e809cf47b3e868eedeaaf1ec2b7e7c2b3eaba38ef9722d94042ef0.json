{"ast":null,"code":"/**\r\n * Calculate period boundaries based on the selected period and optional custom date range\r\n */export const calculatePeriodBoundaries=(period,customRange)=>{const today=new Date();switch(period){case'day':return{startDate:new Date(today.getFullYear(),today.getMonth(),today.getDate()),endDate:today,periodLabel:'daily'};case'week':const dayOfWeek=today.getDay();const daysToSubtract=dayOfWeek===0?6:dayOfWeek-1;// Monday = 0\nreturn{startDate:new Date(today.getFullYear(),today.getMonth(),today.getDate()-daysToSubtract),endDate:today,periodLabel:'weekly'};case'month':return{startDate:new Date(today.getFullYear(),today.getMonth(),1),endDate:today,periodLabel:'monthly'};case'quarter':const currentQuarter=Math.floor(today.getMonth()/3);return{startDate:new Date(today.getFullYear(),currentQuarter*3,1),endDate:today,periodLabel:'quarterly'};case'year':return{startDate:new Date(today.getFullYear(),0,1),endDate:today,periodLabel:'yearly'};case'5year':return{startDate:new Date(today.getFullYear()-5,0,1),endDate:today,periodLabel:'5-year'};case'custom':if(customRange){return{startDate:new Date(customRange.startDate),endDate:new Date(customRange.endDate),periodLabel:customRange.label||'custom'};}// fallback to month\nreturn{startDate:new Date(today.getFullYear(),today.getMonth(),1),endDate:today,periodLabel:'monthly'};default:return{startDate:new Date(today.getFullYear(),today.getMonth(),1),endDate:today,periodLabel:'monthly'};}};/**\r\n * Calculate previous period boundaries for comparison\r\n */export const calculatePreviousPeriodBoundaries=(period,currentStartDate)=>{const today=new Date();switch(period){case'day':return{startDate:new Date(today.getFullYear(),today.getMonth(),today.getDate()-1),endDate:new Date(currentStartDate.getTime()-1)};case'week':const prevWeekDaysToSubtract=(today.getDay()===0?6:today.getDay()-1)+7;return{startDate:new Date(today.getFullYear(),today.getMonth(),today.getDate()-prevWeekDaysToSubtract),endDate:new Date(currentStartDate.getTime()-1)};case'month':return{startDate:new Date(today.getFullYear(),today.getMonth()-1,1),endDate:new Date(currentStartDate.getTime()-1)};case'quarter':const prevQuarter=Math.floor(today.getMonth()/3)-1;const prevQuarterStart=prevQuarter>=0?new Date(today.getFullYear(),prevQuarter*3,1):new Date(today.getFullYear()-1,9,1);// Q4 of previous year\nreturn{startDate:prevQuarterStart,endDate:new Date(currentStartDate.getTime()-1)};case'year':return{startDate:new Date(today.getFullYear()-1,0,1),endDate:new Date(currentStartDate.getTime()-1)};case'5year':return{startDate:new Date(today.getFullYear()-10,0,1),endDate:new Date(currentStartDate.getTime()-1)};default:return{startDate:new Date(today.getFullYear(),today.getMonth()-1,1),endDate:new Date(currentStartDate.getTime()-1)};}};/**\r\n * Filter transactions for a specific date range\r\n */export const filterTransactionsByDateRange=(transactions,startDate,endDate)=>{return transactions.filter(txn=>{const txnDate=new Date(txn.date);return txnDate>=startDate&&txnDate<=endDate;});};/**\r\n * Calculate financial summary for a given period\r\n */export const calculateFinancialSummary=function(transactions,period,customRange){let totalBalance=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;const{startDate,endDate,periodLabel}=calculatePeriodBoundaries(period,customRange);const periodTransactions=filterTransactionsByDateRange(transactions,startDate,endDate);const periodIncome=periodTransactions.filter(txn=>txn.amount>0).reduce((sum,txn)=>sum+txn.amount,0);const periodExpenses=Math.abs(periodTransactions.filter(txn=>txn.amount<0).reduce((sum,txn)=>sum+txn.amount,0));const savingsRate=periodIncome>0?(periodIncome-periodExpenses)/periodIncome:0;// Calculate previous period for comparison\nconst{startDate:prevStartDate,endDate:prevEndDate}=calculatePreviousPeriodBoundaries(period,startDate);const prevPeriodTransactions=filterTransactionsByDateRange(transactions,prevStartDate,prevEndDate);const prevPeriodIncome=prevPeriodTransactions.filter(txn=>txn.amount>0).reduce((sum,txn)=>sum+txn.amount,0);const prevPeriodExpenses=Math.abs(prevPeriodTransactions.filter(txn=>txn.amount<0).reduce((sum,txn)=>sum+txn.amount,0));return{totalBalance,monthlyIncome:Math.round(periodIncome*100)/100,monthlyExpenses:Math.round(periodExpenses*100)/100,netWorth:totalBalance,debtToIncomeRatio:periodIncome>0?periodExpenses/periodIncome:0,savingsRate:Math.max(0,savingsRate),previousPeriodIncome:prevPeriodIncome,previousPeriodExpenses:prevPeriodExpenses,periodLabel};};/**\r\n * Generate trend data for charts based on selected period\r\n */export const generateTrendData=function(transactions,period){let dataPoints=arguments.length>2&&arguments[2]!==undefined?arguments[2]:30;const today=new Date();const balanceTrend=[];const incomeTrend=[];const expenseTrend=[];const savingsTrend=[];// Determine interval based on period\nlet intervalDays;switch(period){case'day':intervalDays=1/24;// Hourly\nbreak;case'week':intervalDays=1;// Daily\nbreak;case'month':intervalDays=1;// Daily\nbreak;case'quarter':intervalDays=7;// Weekly\nbreak;case'year':intervalDays=30;// Monthly\nbreak;case'5year':intervalDays=30;// Monthly\nbreak;default:intervalDays=1;}// Generate trend data for each data point\nfor(let i=dataPoints-1;i>=0;i--){const targetDate=new Date(today);targetDate.setDate(today.getDate()-i*intervalDays);const startDate=new Date(targetDate);startDate.setDate(targetDate.getDate()-intervalDays);const periodTransactions=filterTransactionsByDateRange(transactions,startDate,targetDate);// Calculate balance at this point\nconst transactionsUpToDate=filterTransactionsByDateRange(transactions,new Date(0),targetDate);const balanceAtDate=transactionsUpToDate.reduce((sum,txn)=>sum+txn.amount,0);balanceTrend.push(Math.max(0,balanceAtDate));// Calculate income for this period\nconst periodIncome=periodTransactions.filter(txn=>txn.amount>0).reduce((sum,txn)=>sum+txn.amount,0);incomeTrend.push(periodIncome);// Calculate expenses for this period\nconst periodExpenses=Math.abs(periodTransactions.filter(txn=>txn.amount<0).reduce((sum,txn)=>sum+txn.amount,0));expenseTrend.push(periodExpenses);// Calculate savings rate for this period\nconst savingsRate=periodIncome>0?(periodIncome-periodExpenses)/periodIncome:0;savingsTrend.push(Math.max(0,savingsRate*100));// Convert to percentage\n}return{balance:balanceTrend,income:incomeTrend,expenses:expenseTrend,savings:savingsTrend};};","map":{"version":3,"names":["calculatePeriodBoundaries","period","customRange","today","Date","startDate","getFullYear","getMonth","getDate","endDate","periodLabel","dayOfWeek","getDay","daysToSubtract","currentQuarter","Math","floor","label","calculatePreviousPeriodBoundaries","currentStartDate","getTime","prevWeekDaysToSubtract","prevQuarter","prevQuarterStart","filterTransactionsByDateRange","transactions","filter","txn","txnDate","date","calculateFinancialSummary","totalBalance","arguments","length","undefined","periodTransactions","periodIncome","amount","reduce","sum","periodExpenses","abs","savingsRate","prevStartDate","prevEndDate","prevPeriodTransactions","prevPeriodIncome","prevPeriodExpenses","monthlyIncome","round","monthlyExpenses","netWorth","debtToIncomeRatio","max","previousPeriodIncome","previousPeriodExpenses","generateTrendData","dataPoints","balanceTrend","incomeTrend","expenseTrend","savingsTrend","intervalDays","i","targetDate","setDate","transactionsUpToDate","balanceAtDate","push","balance","income","expenses","savings"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/utils/periodCalculations.ts"],"sourcesContent":["import { TimePeriod, CustomDateRange, Transaction, FinancialSummary } from '../types/financial';\r\n\r\n/**\r\n * Calculate period boundaries based on the selected period and optional custom date range\r\n */\r\nexport const calculatePeriodBoundaries = (\r\n  period: TimePeriod, \r\n  customRange?: CustomDateRange\r\n): { startDate: Date; endDate: Date; periodLabel: string } => {\r\n  const today = new Date();\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate()),\r\n        endDate: today,\r\n        periodLabel: 'daily'\r\n      };\r\n    case 'week':\r\n      const dayOfWeek = today.getDay();\r\n      const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Monday = 0\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysToSubtract),\r\n        endDate: today,\r\n        periodLabel: 'weekly'\r\n      };\r\n    case 'month':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n    case 'quarter':\r\n      const currentQuarter = Math.floor(today.getMonth() / 3);\r\n      return {\r\n        startDate: new Date(today.getFullYear(), currentQuarter * 3, 1),\r\n        endDate: today,\r\n        periodLabel: 'quarterly'\r\n      };\r\n    case 'year':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), 0, 1),\r\n        endDate: today,\r\n        periodLabel: 'yearly'\r\n      };\r\n    case '5year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 5, 0, 1),\r\n        endDate: today,\r\n        periodLabel: '5-year'\r\n      };\r\n    case 'custom':\r\n      if (customRange) {\r\n        return {\r\n          startDate: new Date(customRange.startDate),\r\n          endDate: new Date(customRange.endDate),\r\n          periodLabel: customRange.label || 'custom'\r\n        };\r\n      }\r\n      // fallback to month\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n    default:\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), 1),\r\n        endDate: today,\r\n        periodLabel: 'monthly'\r\n      };\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate previous period boundaries for comparison\r\n */\r\nexport const calculatePreviousPeriodBoundaries = (\r\n  period: TimePeriod,\r\n  currentStartDate: Date\r\n): { startDate: Date; endDate: Date } => {\r\n  const today = new Date();\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'week':\r\n      const prevWeekDaysToSubtract = (today.getDay() === 0 ? 6 : today.getDay() - 1) + 7;\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth(), today.getDate() - prevWeekDaysToSubtract),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'month':\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'quarter':\r\n      const prevQuarter = Math.floor(today.getMonth() / 3) - 1;\r\n      const prevQuarterStart = prevQuarter >= 0\r\n        ? new Date(today.getFullYear(), prevQuarter * 3, 1)\r\n        : new Date(today.getFullYear() - 1, 9, 1); // Q4 of previous year\r\n      return {\r\n        startDate: prevQuarterStart,\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case 'year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 1, 0, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    case '5year':\r\n      return {\r\n        startDate: new Date(today.getFullYear() - 10, 0, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n    default:\r\n      return {\r\n        startDate: new Date(today.getFullYear(), today.getMonth() - 1, 1),\r\n        endDate: new Date(currentStartDate.getTime() - 1)\r\n      };\r\n  }\r\n};\r\n\r\n/**\r\n * Filter transactions for a specific date range\r\n */\r\nexport const filterTransactionsByDateRange = (\r\n  transactions: Transaction[],\r\n  startDate: Date,\r\n  endDate: Date\r\n): Transaction[] => {\r\n  return transactions.filter(txn => {\r\n    const txnDate = new Date(txn.date);\r\n    return txnDate >= startDate && txnDate <= endDate;\r\n  });\r\n};\r\n\r\n/**\r\n * Calculate financial summary for a given period\r\n */\r\nexport const calculateFinancialSummary = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  customRange?: CustomDateRange,\r\n  totalBalance: number = 0\r\n): FinancialSummary => {\r\n  const { startDate, endDate, periodLabel } = calculatePeriodBoundaries(period, customRange);\r\n  \r\n  const periodTransactions = filterTransactionsByDateRange(transactions, startDate, endDate);\r\n\r\n  const periodIncome = periodTransactions\r\n    .filter(txn => txn.amount > 0)\r\n    .reduce((sum, txn) => sum + txn.amount, 0);\r\n\r\n  const periodExpenses = Math.abs(\r\n    periodTransactions\r\n      .filter(txn => txn.amount < 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0)\r\n  );\r\n\r\n  const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\r\n\r\n  // Calculate previous period for comparison\r\n  const { startDate: prevStartDate, endDate: prevEndDate } = calculatePreviousPeriodBoundaries(period, startDate);\r\n  const prevPeriodTransactions = filterTransactionsByDateRange(transactions, prevStartDate, prevEndDate);\r\n\r\n  const prevPeriodIncome = prevPeriodTransactions\r\n    .filter(txn => txn.amount > 0)\r\n    .reduce((sum, txn) => sum + txn.amount, 0);\r\n\r\n  const prevPeriodExpenses = Math.abs(\r\n    prevPeriodTransactions\r\n      .filter(txn => txn.amount < 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0)\r\n  );\r\n\r\n  return {\r\n    totalBalance,\r\n    monthlyIncome: Math.round(periodIncome * 100) / 100,\r\n    monthlyExpenses: Math.round(periodExpenses * 100) / 100,\r\n    netWorth: totalBalance,\r\n    debtToIncomeRatio: periodIncome > 0 ? periodExpenses / periodIncome : 0,\r\n    savingsRate: Math.max(0, savingsRate),\r\n    previousPeriodIncome: prevPeriodIncome,\r\n    previousPeriodExpenses: prevPeriodExpenses,\r\n    periodLabel,\r\n  };\r\n};\r\n\r\n/**\r\n * Generate trend data for charts based on selected period\r\n */\r\nexport const generateTrendData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 30\r\n): {\r\n  balance: number[];\r\n  income: number[];\r\n  expenses: number[];\r\n  savings: number[];\r\n} => {\r\n  const today = new Date();\r\n  const balanceTrend: number[] = [];\r\n  const incomeTrend: number[] = [];\r\n  const expenseTrend: number[] = [];\r\n  const savingsTrend: number[] = [];\r\n\r\n  // Determine interval based on period\r\n  let intervalDays: number;\r\n  switch (period) {\r\n    case 'day':\r\n      intervalDays = 1 / 24; // Hourly\r\n      break;\r\n    case 'week':\r\n      intervalDays = 1; // Daily\r\n      break;\r\n    case 'month':\r\n      intervalDays = 1; // Daily\r\n      break;\r\n    case 'quarter':\r\n      intervalDays = 7; // Weekly\r\n      break;\r\n    case 'year':\r\n      intervalDays = 30; // Monthly\r\n      break;\r\n    case '5year':\r\n      intervalDays = 30; // Monthly\r\n      break;\r\n    default:\r\n      intervalDays = 1;\r\n  }\r\n\r\n  // Generate trend data for each data point\r\n  for (let i = dataPoints - 1; i >= 0; i--) {\r\n    const targetDate = new Date(today);\r\n    targetDate.setDate(today.getDate() - i * intervalDays);\r\n\r\n    const startDate = new Date(targetDate);\r\n    startDate.setDate(targetDate.getDate() - intervalDays);\r\n\r\n    const periodTransactions = filterTransactionsByDateRange(transactions, startDate, targetDate);\r\n\r\n    // Calculate balance at this point\r\n    const transactionsUpToDate = filterTransactionsByDateRange(transactions, new Date(0), targetDate);\r\n    const balanceAtDate = transactionsUpToDate.reduce((sum, txn) => sum + txn.amount, 0);\r\n    balanceTrend.push(Math.max(0, balanceAtDate));\r\n\r\n    // Calculate income for this period\r\n    const periodIncome = periodTransactions\r\n      .filter(txn => txn.amount > 0)\r\n      .reduce((sum, txn) => sum + txn.amount, 0);\r\n    incomeTrend.push(periodIncome);\r\n\r\n    // Calculate expenses for this period\r\n    const periodExpenses = Math.abs(\r\n      periodTransactions\r\n        .filter(txn => txn.amount < 0)\r\n        .reduce((sum, txn) => sum + txn.amount, 0)\r\n    );\r\n    expenseTrend.push(periodExpenses);\r\n\r\n    // Calculate savings rate for this period\r\n    const savingsRate = periodIncome > 0 ? (periodIncome - periodExpenses) / periodIncome : 0;\r\n    savingsTrend.push(Math.max(0, savingsRate * 100)); // Convert to percentage\r\n  }\r\n\r\n  return {\r\n    balance: balanceTrend,\r\n    income: incomeTrend,\r\n    expenses: expenseTrend,\r\n    savings: savingsTrend,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}