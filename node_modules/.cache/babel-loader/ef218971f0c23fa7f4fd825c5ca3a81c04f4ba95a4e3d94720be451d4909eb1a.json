{"ast":null,"code":"// src/constants/financial.ts\n\nexport const TAG_CATEGORIES = {\n  'Food & Dining': {\n    name: 'Food & Dining',\n    color: 'bg-green-100 text-green-800',\n    icon: '🍔',\n    isSystemTag: true\n  },\n  Groceries: {\n    name: 'Groceries',\n    color: 'bg-emerald-100 text-emerald-800',\n    icon: '🛒',\n    parentCategory: 'Food & Dining',\n    isSystemTag: true\n  },\n  Transportation: {\n    name: 'Transportation',\n    color: 'bg-blue-100 text-blue-800',\n    icon: '⛽',\n    isSystemTag: true\n  },\n  Shopping: {\n    name: 'Shopping',\n    color: 'bg-purple-100 text-purple-800',\n    icon: '🛍️',\n    isSystemTag: true\n  },\n  Entertainment: {\n    name: 'Entertainment',\n    color: 'bg-pink-100 text-pink-800',\n    icon: '🎬',\n    isSystemTag: true\n  },\n  Utilities: {\n    name: 'Utilities',\n    color: 'bg-orange-100 text-orange-800',\n    icon: '🏠',\n    isSystemTag: true\n  },\n  Healthcare: {\n    name: 'Healthcare',\n    color: 'bg-red-100 text-red-800',\n    icon: '🏥',\n    isSystemTag: true\n  },\n  Business: {\n    name: 'Business',\n    color: 'bg-gray-100 text-gray-800',\n    icon: '💼',\n    isSystemTag: true\n  },\n  Income: {\n    name: 'Income',\n    color: 'bg-teal-100 text-teal-800',\n    icon: '💰',\n    isSystemTag: true\n  },\n  Travel: {\n    name: 'Travel',\n    color: 'bg-indigo-100 text-indigo-800',\n    icon: '✈️',\n    isSystemTag: true\n  },\n  Subscriptions: {\n    name: 'Subscriptions',\n    color: 'bg-yellow-100 text-yellow-800',\n    icon: '📱',\n    isSystemTag: true\n  },\n  Other: {\n    name: 'Other',\n    color: 'bg-slate-100 text-slate-800',\n    icon: '📝',\n    isSystemTag: true\n  }\n};\nexport const MERCHANT_PATTERNS = {\n  AMAZON: {\n    cleanName: 'Amazon',\n    logo: '📦',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  EBAY: {\n    cleanName: 'eBay',\n    logo: '🏷️',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  ETSY: {\n    cleanName: 'Etsy',\n    logo: '🎨',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  STARBUCKS: {\n    cleanName: 'Starbucks',\n    logo: '☕',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  MCDONALD: {\n    cleanName: \"McDonald's\",\n    logo: '🍟',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  SUBWAY: {\n    cleanName: 'Subway',\n    logo: '🥪',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  CHIPOTLE: {\n    cleanName: 'Chipotle',\n    logo: '🌯',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  DOORDASH: {\n    cleanName: 'DoorDash',\n    logo: '🚚',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  'UBER EATS': {\n    cleanName: 'Uber Eats',\n    logo: '🍽️',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95\n  },\n  KROGER: {\n    cleanName: 'Kroger',\n    logo: '🛒',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  WALMART: {\n    cleanName: 'Walmart',\n    logo: '🏪',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  TARGET: {\n    cleanName: 'Target',\n    logo: '🎯',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95\n  },\n  COSTCO: {\n    cleanName: 'Costco',\n    logo: '📦',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  'WHOLE FOODS': {\n    cleanName: 'Whole Foods',\n    logo: '🥬',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95\n  },\n  SHELL: {\n    cleanName: 'Shell',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  EXXON: {\n    cleanName: 'ExxonMobil',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  BP: {\n    cleanName: 'BP',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  UBER: {\n    cleanName: 'Uber',\n    logo: '🚗',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  LYFT: {\n    cleanName: 'Lyft',\n    logo: '🚙',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95\n  },\n  NETFLIX: {\n    cleanName: 'Netflix',\n    logo: '🎬',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95\n  },\n  SPOTIFY: {\n    cleanName: 'Spotify',\n    logo: '🎵',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95\n  },\n  APPLE: {\n    cleanName: 'Apple',\n    logo: '🍎',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9\n  },\n  GOOGLE: {\n    cleanName: 'Google',\n    logo: '🔍',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.85\n  },\n  MICROSOFT: {\n    cleanName: 'Microsoft',\n    logo: '💻',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9\n  },\n  VERIZON: {\n    cleanName: 'Verizon',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  ATT: {\n    cleanName: 'AT&T',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  COMCAST: {\n    cleanName: 'Comcast',\n    logo: '📺',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95\n  },\n  CVS: {\n    cleanName: 'CVS Pharmacy',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95\n  },\n  WALGREENS: {\n    cleanName: 'Walgreens',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95\n  },\n  PAYROLL: {\n    cleanName: 'Salary',\n    logo: '💰',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  },\n  FREELANCE: {\n    cleanName: 'Freelance Payment',\n    logo: '💼',\n    suggestedCategory: 'Income',\n    confidence: 0.9\n  },\n  DIVIDEND: {\n    cleanName: 'Investment Dividend',\n    logo: '📈',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  },\n  INTEREST: {\n    cleanName: 'Interest Payment',\n    logo: '🏦',\n    suggestedCategory: 'Income',\n    confidence: 0.95\n  }\n};\n\n// Add some more business-focused merchant patterns\nexport const BUSINESS_MERCHANT_PATTERNS = {\n  'OFFICE DEPOT': {\n    cleanName: 'Office Depot',\n    logo: '🖥️',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  },\n  'ZOOM': {\n    cleanName: 'Zoom',\n    logo: '📹',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  },\n  'SLACK': {\n    cleanName: 'Slack',\n    logo: '💬',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  },\n  'AWS': {\n    cleanName: 'Amazon Web Services',\n    logo: '☁️',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  },\n  'GITHUB': {\n    cleanName: 'GitHub',\n    logo: '👨‍💻',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  },\n  'QUICKBOOKS': {\n    cleanName: 'QuickBooks',\n    logo: '📊',\n    suggestedCategory: 'Business',\n    confidence: 0.95\n  }\n};\n\n// FIXED: Update the generateMockTransactions function in src/constants/financial.ts\n\nexport const generateMockTransactions = (accountId, count = 10) => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions = [];\n  const today = new Date();\n  for (let i = 0; i < count; i++) {\n    const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n    const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n    const isIncome = Math.random() < 0.2; // 20% chance of income\n    const amount = isIncome ? Math.random() * 2000 + 1000 // Income: $1000-$3000\n    : -(Math.random() * 200 + 10); // Expense: $10-$210\n\n    // FIX: Better date generation that ensures current month data\n    let transactionDate;\n    if (i < count * 0.7) {\n      // 70% of transactions in current month\n      transactionDate = new Date(today.getFullYear(), today.getMonth(), Math.floor(Math.random() * today.getDate()) + 1);\n    } else {\n      // 30% of transactions in past months (for historical data)\n      transactionDate = new Date(today);\n      transactionDate.setDate(today.getDate() - Math.floor(Math.random() * 60 + 30)); // 30-90 days ago\n    }\n    transactions.push({\n      id: `txn_${accountId}_${i}`,\n      accountId,\n      description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      amount: Math.round(amount * 100) / 100,\n      date: transactionDate.toISOString().split('T')[0],\n      category: merchantInfo.suggestedCategory,\n      tags: Math.random() > 0.5 ? [merchantInfo.suggestedCategory] : [],\n      pending: Math.random() < 0.1,\n      cleanMerchant: {\n        ...merchantInfo,\n        original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    });\n  }\n  return transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n// Enhanced mock data generation in src/constants/financial.ts\n\n// Add this new function for generating historical transactions\nexport const generateHistoricalTransactions = (accountId, monthsBack = 12, transactionsPerMonth = 15) => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions = [];\n  const today = new Date();\n\n  // Generate transactions for each month going back\n  for (let monthOffset = 0; monthOffset < monthsBack; monthOffset++) {\n    const targetDate = new Date(today.getFullYear(), today.getMonth() - monthOffset, 1);\n    const daysInMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0).getDate();\n\n    // Generate seasonal spending patterns\n    const seasonalMultiplier = getSeasonalMultiplier(targetDate.getMonth());\n    const monthlyTransactionCount = Math.floor(transactionsPerMonth * seasonalMultiplier);\n    for (let i = 0; i < monthlyTransactionCount; i++) {\n      const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n      const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n\n      // More realistic income/expense patterns\n      let amount;\n      let isIncome = false;\n      if (merchantInfo.suggestedCategory === 'Income' || Math.random() < 0.15) {\n        // Income transactions (salary, freelance, etc.)\n        isIncome = true;\n        if (merchantKey.includes('PAYROLL')) {\n          amount = 3500 + Math.random() * 1500; // Salary: $3500-$5000\n        } else if (merchantKey.includes('FREELANCE')) {\n          amount = 500 + Math.random() * 2000; // Freelance: $500-$2500\n        } else {\n          amount = 100 + Math.random() * 500; // Other income: $100-$600\n        }\n      } else {\n        // Expense transactions with category-based amounts\n        amount = -getCategoryExpenseAmount(merchantInfo.suggestedCategory);\n      }\n\n      // Random day in the month\n      const dayOfMonth = Math.floor(Math.random() * daysInMonth) + 1;\n      const transactionDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), dayOfMonth);\n      transactions.push({\n        id: `txn_${accountId}_${monthOffset}_${i}`,\n        accountId,\n        description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n        amount: Math.round(amount * 100) / 100,\n        date: transactionDate.toISOString().split('T')[0],\n        category: merchantInfo.suggestedCategory,\n        tags: Math.random() > 0.3 ? [merchantInfo.suggestedCategory] : [],\n        // 70% tagged\n        pending: monthOffset === 0 && Math.random() < 0.1,\n        // Only current month can be pending\n        cleanMerchant: {\n          ...merchantInfo,\n          original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n    }\n  }\n  return transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n};\n\n// Seasonal spending multipliers (higher in holiday seasons, etc.)\nconst getSeasonalMultiplier = month => {\n  const seasonalFactors = {\n    0: 1.1,\n    // January - New Year expenses\n    1: 0.9,\n    // February - slower month\n    2: 1.0,\n    // March - normal\n    3: 1.0,\n    // April - normal\n    4: 1.1,\n    // May - spring spending\n    5: 1.2,\n    // June - vacation season\n    6: 1.2,\n    // July - vacation season\n    7: 1.1,\n    // August - back to school\n    8: 1.0,\n    // September - normal\n    9: 1.0,\n    // October - normal\n    10: 1.3,\n    // November - Black Friday\n    11: 1.4 // December - Holiday season\n  };\n  return seasonalFactors[month] || 1.0;\n};\n\n// Category-based expense amounts for more realistic spending\nconst getCategoryExpenseAmount = category => {\n  const categoryAmounts = {\n    'Food & Dining': () => 15 + Math.random() * 85,\n    // $15-$100\n    'Groceries': () => 50 + Math.random() * 150,\n    // $50-$200\n    'Transportation': () => 25 + Math.random() * 75,\n    // $25-$100\n    'Shopping': () => 30 + Math.random() * 270,\n    // $30-$300\n    'Entertainment': () => 20 + Math.random() * 80,\n    // $20-$100\n    'Utilities': () => 80 + Math.random() * 120,\n    // $80-$200\n    'Healthcare': () => 40 + Math.random() * 160,\n    // $40-$200\n    'Business': () => 25 + Math.random() * 175,\n    // $25-$200\n    'Travel': () => 100 + Math.random() * 400,\n    // $100-$500\n    'Subscriptions': () => 10 + Math.random() * 40,\n    // $10-$50\n    'Other': () => 20 + Math.random() * 80 // $20-$100\n  };\n  const amountGenerator = categoryAmounts[category];\n  return amountGenerator ? amountGenerator() : 25 + Math.random() * 75;\n};\n\n// Update the MOCK_ACCOUNTS to use historical data\nexport const MOCK_ACCOUNTS = [{\n  id: 'acc_checking',\n  name: 'Primary Checking',\n  type: 'CHECKING',\n  balance: 2543.67,\n  accountNumber: '****1234',\n  bankName: 'Chase Bank',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_checking', 15, 20) // 15 months, ~20 per month\n}, {\n  id: 'acc_savings',\n  name: 'High Yield Savings',\n  type: 'SAVINGS',\n  balance: 12750.0,\n  accountNumber: '****5678',\n  bankName: 'Ally Bank',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_savings', 15, 3) // 15 months, ~3 per month (savings has fewer transactions)\n}, {\n  id: 'acc_credit',\n  name: 'Rewards Credit Card',\n  type: 'CREDIT',\n  balance: -1247.82,\n  accountNumber: '****9012',\n  bankName: 'Chase Bank',\n  limit: 5000,\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_credit', 15, 25) // 15 months, ~25 per month (credit cards used more)\n}, {\n  id: 'acc_business',\n  name: 'Business Checking',\n  type: 'BUSINESS_CHECKING',\n  balance: 5420.33,\n  accountNumber: '****3456',\n  bankName: 'Wells Fargo',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_business', 12, 12) // 12 months, ~12 per month\n}, {\n  id: 'acc_mortgage',\n  name: 'Home Mortgage',\n  type: 'LOAN',\n  balance: -285000.00,\n  // Negative balance for loans\n  accountNumber: '****7890',\n  bankName: 'Quicken Loans',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_mortgage', 15, 1) // 15 months, ~1 per month (monthly payments)\n}, {\n  id: 'acc_student_loan_1',\n  name: 'Federal Student Loan',\n  type: 'LOAN',\n  balance: -18500.00,\n  // Negative balance for loans\n  accountNumber: '****2345',\n  bankName: 'Nelnet',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_student_loan_1', 15, 1) // 15 months, ~1 per month (monthly payments)\n}, {\n  id: 'acc_student_loan_2',\n  name: 'Private Student Loan',\n  type: 'LOAN',\n  balance: -12500.00,\n  // Negative balance for loans\n  accountNumber: '****6789',\n  bankName: 'Sallie Mae',\n  isActive: true,\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString(),\n  transactions: generateHistoricalTransactions('acc_student_loan_2', 15, 1) // 15 months, ~1 per month (monthly payments)\n}];\nexport const DEFAULT_PERIODS = ['day', 'week', 'month', 'quarter', 'year', '5year', 'custom'];\nexport const VALIDATION_RULES = {\n  ACCOUNT_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 50\n  },\n  TRANSACTION_DESCRIPTION: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 255\n  },\n  TAG_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 30,\n    PATTERN: /^[a-zA-Z0-9\\s&-]+$/\n  },\n  AMOUNT: {\n    MIN: -999999.99,\n    MAX: 999999.99\n  }\n};\nexport const ERROR_MESSAGES = {\n  BANK_CONNECTION_FAILED: 'Unable to connect to your bank. Please check your credentials.',\n  INVALID_CREDENTIALS: 'Invalid username or password.',\n  TRANSACTION_SYNC_ERROR: 'Failed to sync transactions. Please try again.',\n  ACCOUNT_NOT_FOUND: 'Account not found.',\n  INSUFFICIENT_PERMISSIONS: \"You don't have permission to perform this action.\",\n  RATE_LIMIT_EXCEEDED: 'Too many requests. Please wait and try again.',\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.'\n};","map":{"version":3,"names":["TAG_CATEGORIES","name","color","icon","isSystemTag","Groceries","parentCategory","Transportation","Shopping","Entertainment","Utilities","Healthcare","Business","Income","Travel","Subscriptions","Other","MERCHANT_PATTERNS","AMAZON","cleanName","logo","suggestedCategory","confidence","EBAY","ETSY","STARBUCKS","MCDONALD","SUBWAY","CHIPOTLE","DOORDASH","KROGER","WALMART","TARGET","COSTCO","SHELL","EXXON","BP","UBER","LYFT","NETFLIX","SPOTIFY","APPLE","GOOGLE","MICROSOFT","VERIZON","ATT","COMCAST","CVS","WALGREENS","PAYROLL","FREELANCE","DIVIDEND","INTEREST","BUSINESS_MERCHANT_PATTERNS","generateMockTransactions","accountId","count","merchants","Object","keys","transactions","today","Date","i","merchantKey","Math","floor","random","length","merchantInfo","isIncome","amount","transactionDate","getFullYear","getMonth","getDate","setDate","push","id","description","round","date","toISOString","split","category","tags","pending","cleanMerchant","original","createdAt","updatedAt","sort","a","b","getTime","generateHistoricalTransactions","monthsBack","transactionsPerMonth","monthOffset","targetDate","daysInMonth","seasonalMultiplier","getSeasonalMultiplier","monthlyTransactionCount","includes","getCategoryExpenseAmount","dayOfMonth","month","seasonalFactors","categoryAmounts","Food & Dining","amountGenerator","MOCK_ACCOUNTS","type","balance","accountNumber","bankName","isActive","limit","DEFAULT_PERIODS","VALIDATION_RULES","ACCOUNT_NAME","MIN_LENGTH","MAX_LENGTH","TRANSACTION_DESCRIPTION","TAG_NAME","PATTERN","AMOUNT","MIN","MAX","ERROR_MESSAGES","BANK_CONNECTION_FAILED","INVALID_CREDENTIALS","TRANSACTION_SYNC_ERROR","ACCOUNT_NOT_FOUND","INSUFFICIENT_PERMISSIONS","RATE_LIMIT_EXCEEDED","VALIDATION_ERROR","NETWORK_ERROR","UNKNOWN_ERROR"],"sources":["C:/Users/dliz1/Desktop/FinanceApp/src/constants/financial.ts"],"sourcesContent":["// src/constants/financial.ts\nimport {\n  TagCategory,\n  MerchantInfo,\n  Account,\n  Transaction,\n} from '../types/financial';\n\nexport const TAG_CATEGORIES: Record<string, TagCategory> = {\n  'Food & Dining': {\n    name: 'Food & Dining',\n    color: 'bg-green-100 text-green-800',\n    icon: '🍔',\n    isSystemTag: true,\n  },\n  Groceries: {\n    name: 'Groceries',\n    color: 'bg-emerald-100 text-emerald-800',\n    icon: '🛒',\n    parentCategory: 'Food & Dining',\n    isSystemTag: true,\n  },\n  Transportation: {\n    name: 'Transportation',\n    color: 'bg-blue-100 text-blue-800',\n    icon: '⛽',\n    isSystemTag: true,\n  },\n  Shopping: {\n    name: 'Shopping',\n    color: 'bg-purple-100 text-purple-800',\n    icon: '🛍️',\n    isSystemTag: true,\n  },\n  Entertainment: {\n    name: 'Entertainment',\n    color: 'bg-pink-100 text-pink-800',\n    icon: '🎬',\n    isSystemTag: true,\n  },\n  Utilities: {\n    name: 'Utilities',\n    color: 'bg-orange-100 text-orange-800',\n    icon: '🏠',\n    isSystemTag: true,\n  },\n  Healthcare: {\n    name: 'Healthcare',\n    color: 'bg-red-100 text-red-800',\n    icon: '🏥',\n    isSystemTag: true,\n  },\n  Business: {\n    name: 'Business',\n    color: 'bg-gray-100 text-gray-800',\n    icon: '💼',\n    isSystemTag: true,\n  },\n  Income: {\n    name: 'Income',\n    color: 'bg-teal-100 text-teal-800',\n    icon: '💰',\n    isSystemTag: true,\n  },\n  Travel: {\n    name: 'Travel',\n    color: 'bg-indigo-100 text-indigo-800',\n    icon: '✈️',\n    isSystemTag: true,\n  },\n  Subscriptions: {\n    name: 'Subscriptions',\n    color: 'bg-yellow-100 text-yellow-800',\n    icon: '📱',\n    isSystemTag: true,\n  },\n  Other: {\n    name: 'Other',\n    color: 'bg-slate-100 text-slate-800',\n    icon: '📝',\n    isSystemTag: true,\n  },\n};\n\nexport const MERCHANT_PATTERNS: Record<\n  string,\n  Omit<MerchantInfo, 'original'>\n> = {\n  AMAZON: {\n    cleanName: 'Amazon',\n    logo: '📦',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  EBAY: {\n    cleanName: 'eBay',\n    logo: '🏷️',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  ETSY: {\n    cleanName: 'Etsy',\n    logo: '🎨',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  STARBUCKS: {\n    cleanName: 'Starbucks',\n    logo: '☕',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  MCDONALD: {\n    cleanName: \"McDonald's\",\n    logo: '🍟',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  SUBWAY: {\n    cleanName: 'Subway',\n    logo: '🥪',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  CHIPOTLE: {\n    cleanName: 'Chipotle',\n    logo: '🌯',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  DOORDASH: {\n    cleanName: 'DoorDash',\n    logo: '🚚',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  'UBER EATS': {\n    cleanName: 'Uber Eats',\n    logo: '🍽️',\n    suggestedCategory: 'Food & Dining',\n    confidence: 0.95,\n  },\n  KROGER: {\n    cleanName: 'Kroger',\n    logo: '🛒',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  WALMART: {\n    cleanName: 'Walmart',\n    logo: '🏪',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  TARGET: {\n    cleanName: 'Target',\n    logo: '🎯',\n    suggestedCategory: 'Shopping',\n    confidence: 0.95,\n  },\n  COSTCO: {\n    cleanName: 'Costco',\n    logo: '📦',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  'WHOLE FOODS': {\n    cleanName: 'Whole Foods',\n    logo: '🥬',\n    suggestedCategory: 'Groceries',\n    confidence: 0.95,\n  },\n  SHELL: {\n    cleanName: 'Shell',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  EXXON: {\n    cleanName: 'ExxonMobil',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  BP: {\n    cleanName: 'BP',\n    logo: '⛽',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  UBER: {\n    cleanName: 'Uber',\n    logo: '🚗',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  LYFT: {\n    cleanName: 'Lyft',\n    logo: '🚙',\n    suggestedCategory: 'Transportation',\n    confidence: 0.95,\n  },\n  NETFLIX: {\n    cleanName: 'Netflix',\n    logo: '🎬',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95,\n  },\n  SPOTIFY: {\n    cleanName: 'Spotify',\n    logo: '🎵',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.95,\n  },\n  APPLE: {\n    cleanName: 'Apple',\n    logo: '🍎',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9,\n  },\n  GOOGLE: {\n    cleanName: 'Google',\n    logo: '🔍',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.85,\n  },\n  MICROSOFT: {\n    cleanName: 'Microsoft',\n    logo: '💻',\n    suggestedCategory: 'Subscriptions',\n    confidence: 0.9,\n  },\n  VERIZON: {\n    cleanName: 'Verizon',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  ATT: {\n    cleanName: 'AT&T',\n    logo: '📱',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  COMCAST: {\n    cleanName: 'Comcast',\n    logo: '📺',\n    suggestedCategory: 'Utilities',\n    confidence: 0.95,\n  },\n  CVS: {\n    cleanName: 'CVS Pharmacy',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95,\n  },\n  WALGREENS: {\n    cleanName: 'Walgreens',\n    logo: '💊',\n    suggestedCategory: 'Healthcare',\n    confidence: 0.95,\n  },\n  PAYROLL: {\n    cleanName: 'Salary',\n    logo: '💰',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n  FREELANCE: {\n    cleanName: 'Freelance Payment',\n    logo: '💼',\n    suggestedCategory: 'Income',\n    confidence: 0.9,\n  },\n  DIVIDEND: {\n    cleanName: 'Investment Dividend',\n    logo: '📈',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n  INTEREST: {\n    cleanName: 'Interest Payment',\n    logo: '🏦',\n    suggestedCategory: 'Income',\n    confidence: 0.95,\n  },\n};\n\n// Add some more business-focused merchant patterns\nexport const BUSINESS_MERCHANT_PATTERNS: Record<string, Omit<MerchantInfo, 'original'>> = {\n  'OFFICE DEPOT': {\n    cleanName: 'Office Depot',\n    logo: '🖥️',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n  'ZOOM': {\n    cleanName: 'Zoom',\n    logo: '📹',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n  'SLACK': {\n    cleanName: 'Slack',\n    logo: '💬',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n  'AWS': {\n    cleanName: 'Amazon Web Services',\n    logo: '☁️',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n  'GITHUB': {\n    cleanName: 'GitHub',\n    logo: '👨‍💻',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n  'QUICKBOOKS': {\n    cleanName: 'QuickBooks',\n    logo: '📊',\n    suggestedCategory: 'Business',\n    confidence: 0.95,\n  },\n};\n\n// FIXED: Update the generateMockTransactions function in src/constants/financial.ts\n\nexport const generateMockTransactions = (\n  accountId: string,\n  count: number = 10\n): Transaction[] => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions: Transaction[] = [];\n  const today = new Date();\n\n  for (let i = 0; i < count; i++) {\n    const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n    const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n    const isIncome = Math.random() < 0.2; // 20% chance of income\n    const amount = isIncome\n      ? Math.random() * 2000 + 1000 // Income: $1000-$3000\n      : -(Math.random() * 200 + 10); // Expense: $10-$210\n\n    // FIX: Better date generation that ensures current month data\n    let transactionDate: Date;\n    \n    if (i < count * 0.7) {\n      // 70% of transactions in current month\n      transactionDate = new Date(today.getFullYear(), today.getMonth(), Math.floor(Math.random() * today.getDate()) + 1);\n    } else {\n      // 30% of transactions in past months (for historical data)\n      transactionDate = new Date(today);\n      transactionDate.setDate(today.getDate() - Math.floor(Math.random() * 60 + 30)); // 30-90 days ago\n    }\n\n    transactions.push({\n      id: `txn_${accountId}_${i}`,\n      accountId,\n      description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      amount: Math.round(amount * 100) / 100,\n      date: transactionDate.toISOString().split('T')[0],\n      category: merchantInfo.suggestedCategory,\n      tags: Math.random() > 0.5 ? [merchantInfo.suggestedCategory] : [],\n      pending: Math.random() < 0.1,\n      cleanMerchant: {\n        ...merchantInfo,\n        original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n      },\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    });\n  }\n\n  return transactions.sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n};\n\n// Enhanced mock data generation in src/constants/financial.ts\n\n// Add this new function for generating historical transactions\nexport const generateHistoricalTransactions = (\n  accountId: string,\n  monthsBack: number = 12,\n  transactionsPerMonth: number = 15\n): Transaction[] => {\n  const merchants = Object.keys(MERCHANT_PATTERNS);\n  const transactions: Transaction[] = [];\n  const today = new Date();\n  \n  // Generate transactions for each month going back\n  for (let monthOffset = 0; monthOffset < monthsBack; monthOffset++) {\n    const targetDate = new Date(today.getFullYear(), today.getMonth() - monthOffset, 1);\n    const daysInMonth = new Date(targetDate.getFullYear(), targetDate.getMonth() + 1, 0).getDate();\n    \n    // Generate seasonal spending patterns\n    const seasonalMultiplier = getSeasonalMultiplier(targetDate.getMonth());\n    const monthlyTransactionCount = Math.floor(transactionsPerMonth * seasonalMultiplier);\n    \n    for (let i = 0; i < monthlyTransactionCount; i++) {\n      const merchantKey = merchants[Math.floor(Math.random() * merchants.length)];\n      const merchantInfo = MERCHANT_PATTERNS[merchantKey];\n      \n      // More realistic income/expense patterns\n      let amount: number;\n      let isIncome = false;\n      \n      if (merchantInfo.suggestedCategory === 'Income' || Math.random() < 0.15) {\n        // Income transactions (salary, freelance, etc.)\n        isIncome = true;\n        if (merchantKey.includes('PAYROLL')) {\n          amount = 3500 + Math.random() * 1500; // Salary: $3500-$5000\n        } else if (merchantKey.includes('FREELANCE')) {\n          amount = 500 + Math.random() * 2000; // Freelance: $500-$2500\n        } else {\n          amount = 100 + Math.random() * 500; // Other income: $100-$600\n        }\n      } else {\n        // Expense transactions with category-based amounts\n        amount = -(getCategoryExpenseAmount(merchantInfo.suggestedCategory));\n      }\n      \n      // Random day in the month\n      const dayOfMonth = Math.floor(Math.random() * daysInMonth) + 1;\n      const transactionDate = new Date(targetDate.getFullYear(), targetDate.getMonth(), dayOfMonth);\n      \n      transactions.push({\n        id: `txn_${accountId}_${monthOffset}_${i}`,\n        accountId,\n        description: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n        amount: Math.round(amount * 100) / 100,\n        date: transactionDate.toISOString().split('T')[0],\n        category: merchantInfo.suggestedCategory,\n        tags: Math.random() > 0.3 ? [merchantInfo.suggestedCategory] : [], // 70% tagged\n        pending: monthOffset === 0 && Math.random() < 0.1, // Only current month can be pending\n        cleanMerchant: {\n          ...merchantInfo,\n          original: `${merchantKey} #${Math.floor(Math.random() * 1000)}`,\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      });\n    }\n  }\n  \n  return transactions.sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n};\n\n// Seasonal spending multipliers (higher in holiday seasons, etc.)\nconst getSeasonalMultiplier = (month: number): number => {\n  const seasonalFactors = {\n    0: 1.1,  // January - New Year expenses\n    1: 0.9,  // February - slower month\n    2: 1.0,  // March - normal\n    3: 1.0,  // April - normal\n    4: 1.1,  // May - spring spending\n    5: 1.2,  // June - vacation season\n    6: 1.2,  // July - vacation season\n    7: 1.1,  // August - back to school\n    8: 1.0,  // September - normal\n    9: 1.0,  // October - normal\n    10: 1.3, // November - Black Friday\n    11: 1.4, // December - Holiday season\n  };\n  return seasonalFactors[month as keyof typeof seasonalFactors] || 1.0;\n};\n\n// Category-based expense amounts for more realistic spending\nconst getCategoryExpenseAmount = (category: string): number => {\n  const categoryAmounts = {\n    'Food & Dining': () => 15 + Math.random() * 85, // $15-$100\n    'Groceries': () => 50 + Math.random() * 150, // $50-$200\n    'Transportation': () => 25 + Math.random() * 75, // $25-$100\n    'Shopping': () => 30 + Math.random() * 270, // $30-$300\n    'Entertainment': () => 20 + Math.random() * 80, // $20-$100\n    'Utilities': () => 80 + Math.random() * 120, // $80-$200\n    'Healthcare': () => 40 + Math.random() * 160, // $40-$200\n    'Business': () => 25 + Math.random() * 175, // $25-$200\n    'Travel': () => 100 + Math.random() * 400, // $100-$500\n    'Subscriptions': () => 10 + Math.random() * 40, // $10-$50\n    'Other': () => 20 + Math.random() * 80, // $20-$100\n  };\n  \n  const amountGenerator = categoryAmounts[category as keyof typeof categoryAmounts];\n  return amountGenerator ? amountGenerator() : 25 + Math.random() * 75;\n};\n\n// Update the MOCK_ACCOUNTS to use historical data\nexport const MOCK_ACCOUNTS: Account[] = [\n  {\n    id: 'acc_checking',\n    name: 'Primary Checking',\n    type: 'CHECKING',\n    balance: 2543.67,\n    accountNumber: '****1234',\n    bankName: 'Chase Bank',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_checking', 15, 20), // 15 months, ~20 per month\n  },\n  {\n    id: 'acc_savings',\n    name: 'High Yield Savings',\n    type: 'SAVINGS',\n    balance: 12750.0,\n    accountNumber: '****5678',\n    bankName: 'Ally Bank',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_savings', 15, 3), // 15 months, ~3 per month (savings has fewer transactions)\n  },\n  {\n    id: 'acc_credit',\n    name: 'Rewards Credit Card',\n    type: 'CREDIT',\n    balance: -1247.82,\n    accountNumber: '****9012',\n    bankName: 'Chase Bank',\n    limit: 5000,\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_credit', 15, 25), // 15 months, ~25 per month (credit cards used more)\n  },\n  {\n    id: 'acc_business',\n    name: 'Business Checking',\n    type: 'BUSINESS_CHECKING',\n    balance: 5420.33,\n    accountNumber: '****3456',\n    bankName: 'Wells Fargo',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_business', 12, 12), // 12 months, ~12 per month\n  },\n  {\n    id: 'acc_mortgage',\n    name: 'Home Mortgage',\n    type: 'LOAN',\n    balance: -285000.00, // Negative balance for loans\n    accountNumber: '****7890',\n    bankName: 'Quicken Loans',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_mortgage', 15, 1), // 15 months, ~1 per month (monthly payments)\n  },\n  {\n    id: 'acc_student_loan_1',\n    name: 'Federal Student Loan',\n    type: 'LOAN',\n    balance: -18500.00, // Negative balance for loans\n    accountNumber: '****2345',\n    bankName: 'Nelnet',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_student_loan_1', 15, 1), // 15 months, ~1 per month (monthly payments)\n  },\n  {\n    id: 'acc_student_loan_2',\n    name: 'Private Student Loan',\n    type: 'LOAN',\n    balance: -12500.00, // Negative balance for loans\n    accountNumber: '****6789',\n    bankName: 'Sallie Mae',\n    isActive: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    transactions: generateHistoricalTransactions('acc_student_loan_2', 15, 1), // 15 months, ~1 per month (monthly payments)\n  },\n];\n\nexport const DEFAULT_PERIODS = ['day', 'week', 'month', 'quarter', 'year', '5year', 'custom'] as const;\n\nexport const VALIDATION_RULES = {\n  ACCOUNT_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 50,\n  },\n  TRANSACTION_DESCRIPTION: {\n    MIN_LENGTH: 1,\n    MAX_LENGTH: 255,\n  },\n  TAG_NAME: {\n    MIN_LENGTH: 2,\n    MAX_LENGTH: 30,\n    PATTERN: /^[a-zA-Z0-9\\s&-]+$/,\n  },\n  AMOUNT: {\n    MIN: -999999.99,\n    MAX: 999999.99,\n  },\n};\n\nexport const ERROR_MESSAGES = {\n  BANK_CONNECTION_FAILED:\n    'Unable to connect to your bank. Please check your credentials.',\n  INVALID_CREDENTIALS: 'Invalid username or password.',\n  TRANSACTION_SYNC_ERROR: 'Failed to sync transactions. Please try again.',\n  ACCOUNT_NOT_FOUND: 'Account not found.',\n  INSUFFICIENT_PERMISSIONS: \"You don't have permission to perform this action.\",\n  RATE_LIMIT_EXCEEDED: 'Too many requests. Please wait and try again.',\n  VALIDATION_ERROR: 'Please check your input and try again.',\n  NETWORK_ERROR: 'Network error. Please check your connection.',\n  UNKNOWN_ERROR: 'An unexpected error occurred.',\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}