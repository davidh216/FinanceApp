{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { calculateFinancialSummary, generateTrendData } from '../utils/periodCalculations';\nimport { filterTransactionsByAccountType } from '../utils/transactionUtils';\nexport const useDashboardData = ({\n  accounts,\n  accountFilter,\n  selectedPeriod,\n  customDateRange,\n  isLoading\n}) => {\n  _s();\n  // Filter accounts based on accountFilter\n  const filteredAccounts = useMemo(() => {\n    return accounts.filter(account => {\n      if (accountFilter === 'both') return true;\n      if (accountFilter === 'personal') return !account.type.includes('BUSINESS');\n      if (accountFilter === 'business') return account.type.includes('BUSINESS');\n      return true;\n    });\n  }, [accounts, accountFilter]);\n\n  // Calculate filtered total balance\n  const filteredTotalBalance = useMemo(() => {\n    return filteredAccounts.reduce((sum, account) => sum + account.balance, 0);\n  }, [filteredAccounts]);\n\n  // Get all transactions from accounts\n  const allTransactions = useMemo(() => {\n    return accounts.flatMap(account => account.transactions || []);\n  }, [accounts]);\n\n  // Calculate filtered summary using utility functions\n  const filteredSummary = useMemo(() => {\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\n    return calculateFinancialSummary(filteredTransactions, selectedPeriod, customDateRange, filteredTotalBalance);\n  }, [accounts, accountFilter, selectedPeriod, customDateRange, filteredTotalBalance]);\n\n  // Generate trend data using utility functions\n  const trendData = useMemo(() => {\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\n    return generateTrendData(filteredTransactions, selectedPeriod);\n  }, [accounts, accountFilter, selectedPeriod]);\n  const hasAccounts = accounts.length > 0;\n  return {\n    filteredAccounts,\n    filteredTotalBalance,\n    filteredSummary,\n    trendData,\n    allTransactions,\n    hasAccounts\n  };\n};\n_s(useDashboardData, \"wKPxLloxs/4xxqxkL+16IX3jPhc=\");","map":{"version":3,"names":["useMemo","calculateFinancialSummary","generateTrendData","filterTransactionsByAccountType","useDashboardData","accounts","accountFilter","selectedPeriod","customDateRange","isLoading","_s","filteredAccounts","filter","account","type","includes","filteredTotalBalance","reduce","sum","balance","allTransactions","flatMap","transactions","filteredSummary","filteredTransactions","trendData","hasAccounts","length"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/hooks/useDashboardData.ts"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { Account, Transaction, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { calculateFinancialSummary, generateTrendData } from '../utils/periodCalculations';\r\nimport { filterTransactionsByAccountType } from '../utils/transactionUtils';\r\n\r\nexport interface DashboardData {\r\n  filteredAccounts: Account[];\r\n  filteredTotalBalance: number;\r\n  filteredSummary: FinancialSummary;\r\n  trendData: any;\r\n  allTransactions: Transaction[];\r\n  hasAccounts: boolean;\r\n}\r\n\r\nexport interface UseDashboardDataProps {\r\n  accounts: Account[];\r\n  accountFilter: 'personal' | 'business' | 'both';\r\n  selectedPeriod: TimePeriod;\r\n  customDateRange?: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const useDashboardData = ({\r\n  accounts,\r\n  accountFilter,\r\n  selectedPeriod,\r\n  customDateRange,\r\n  isLoading,\r\n}: UseDashboardDataProps): DashboardData => {\r\n  // Filter accounts based on accountFilter\r\n  const filteredAccounts = useMemo(() => {\r\n    return accounts.filter((account: Account) => {\r\n      if (accountFilter === 'both') return true;\r\n      if (accountFilter === 'personal')\r\n        return !account.type.includes('BUSINESS');\r\n      if (accountFilter === 'business')\r\n        return account.type.includes('BUSINESS');\r\n      return true;\r\n    });\r\n  }, [accounts, accountFilter]);\r\n\r\n  // Calculate filtered total balance\r\n  const filteredTotalBalance = useMemo(() => {\r\n    return filteredAccounts.reduce(\r\n      (sum: number, account: Account) => sum + account.balance,\r\n      0\r\n    );\r\n  }, [filteredAccounts]);\r\n\r\n  // Get all transactions from accounts\r\n  const allTransactions = useMemo(() => {\r\n    return accounts.flatMap(account => account.transactions || []);\r\n  }, [accounts]);\r\n\r\n  // Calculate filtered summary using utility functions\r\n  const filteredSummary = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return calculateFinancialSummary(\r\n      filteredTransactions,\r\n      selectedPeriod,\r\n      customDateRange,\r\n      filteredTotalBalance\r\n    );\r\n  }, [accounts, accountFilter, selectedPeriod, customDateRange, filteredTotalBalance]);\r\n\r\n  // Generate trend data using utility functions\r\n  const trendData = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return generateTrendData(filteredTransactions, selectedPeriod);\r\n  }, [accounts, accountFilter, selectedPeriod]);\r\n\r\n  const hasAccounts = accounts.length > 0;\r\n\r\n  return {\r\n    filteredAccounts,\r\n    filteredTotalBalance,\r\n    filteredSummary,\r\n    trendData,\r\n    allTransactions,\r\n    hasAccounts,\r\n  };\r\n}; "],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,yBAAyB,EAAEC,iBAAiB,QAAQ,6BAA6B;AAC1F,SAASC,+BAA+B,QAAQ,2BAA2B;AAmB3E,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAC/BC,QAAQ;EACRC,aAAa;EACbC,cAAc;EACdC,eAAe;EACfC;AACqB,CAAC,KAAoB;EAAAC,EAAA;EAC1C;EACA,MAAMC,gBAAgB,GAAGX,OAAO,CAAC,MAAM;IACrC,OAAOK,QAAQ,CAACO,MAAM,CAAEC,OAAgB,IAAK;MAC3C,IAAIP,aAAa,KAAK,MAAM,EAAE,OAAO,IAAI;MACzC,IAAIA,aAAa,KAAK,UAAU,EAC9B,OAAO,CAACO,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC;MAC3C,IAAIT,aAAa,KAAK,UAAU,EAC9B,OAAOO,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC;MAC1C,OAAO,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,QAAQ,EAAEC,aAAa,CAAC,CAAC;;EAE7B;EACA,MAAMU,oBAAoB,GAAGhB,OAAO,CAAC,MAAM;IACzC,OAAOW,gBAAgB,CAACM,MAAM,CAC5B,CAACC,GAAW,EAAEL,OAAgB,KAAKK,GAAG,GAAGL,OAAO,CAACM,OAAO,EACxD,CACF,CAAC;EACH,CAAC,EAAE,CAACR,gBAAgB,CAAC,CAAC;;EAEtB;EACA,MAAMS,eAAe,GAAGpB,OAAO,CAAC,MAAM;IACpC,OAAOK,QAAQ,CAACgB,OAAO,CAACR,OAAO,IAAIA,OAAO,CAACS,YAAY,IAAI,EAAE,CAAC;EAChE,CAAC,EAAE,CAACjB,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMkB,eAAe,GAAGvB,OAAO,CAAC,MAAM;IACpC,MAAMwB,oBAAoB,GAAGrB,+BAA+B,CAACE,QAAQ,EAAEC,aAAa,CAAC;IACrF,OAAOL,yBAAyB,CAC9BuB,oBAAoB,EACpBjB,cAAc,EACdC,eAAe,EACfQ,oBACF,CAAC;EACH,CAAC,EAAE,CAACX,QAAQ,EAAEC,aAAa,EAAEC,cAAc,EAAEC,eAAe,EAAEQ,oBAAoB,CAAC,CAAC;;EAEpF;EACA,MAAMS,SAAS,GAAGzB,OAAO,CAAC,MAAM;IAC9B,MAAMwB,oBAAoB,GAAGrB,+BAA+B,CAACE,QAAQ,EAAEC,aAAa,CAAC;IACrF,OAAOJ,iBAAiB,CAACsB,oBAAoB,EAAEjB,cAAc,CAAC;EAChE,CAAC,EAAE,CAACF,QAAQ,EAAEC,aAAa,EAAEC,cAAc,CAAC,CAAC;EAE7C,MAAMmB,WAAW,GAAGrB,QAAQ,CAACsB,MAAM,GAAG,CAAC;EAEvC,OAAO;IACLhB,gBAAgB;IAChBK,oBAAoB;IACpBO,eAAe;IACfE,SAAS;IACTL,eAAe;IACfM;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CA3DWN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}