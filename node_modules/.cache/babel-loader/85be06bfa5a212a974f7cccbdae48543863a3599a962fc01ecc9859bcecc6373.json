{"ast":null,"code":"import{useMemo}from'react';import{calculateFinancialSummary,generateTrendData}from'../utils/periodCalculations';import{filterTransactionsByAccountType}from'../utils/transactionUtils';export const useDashboardData=_ref=>{let{accounts,accountFilter,selectedPeriod,customDateRange,isLoading}=_ref;// Filter accounts based on accountFilter\nconst filteredAccounts=useMemo(()=>{return accounts.filter(account=>{if(accountFilter==='both')return true;if(accountFilter==='personal')return!account.type.includes('BUSINESS');if(accountFilter==='business')return account.type.includes('BUSINESS');return true;});},[accounts,accountFilter]);// Calculate filtered total balance\nconst filteredTotalBalance=useMemo(()=>{return filteredAccounts.reduce((sum,account)=>sum+account.balance,0);},[filteredAccounts]);// Get all transactions from accounts\nconst allTransactions=useMemo(()=>{return accounts.flatMap(account=>account.transactions||[]);},[accounts]);// Calculate filtered summary using utility functions\nconst filteredSummary=useMemo(()=>{const filteredTransactions=filterTransactionsByAccountType(accounts,accountFilter);return calculateFinancialSummary(filteredTransactions,selectedPeriod,customDateRange,filteredTotalBalance);},[accounts,accountFilter,selectedPeriod,customDateRange,filteredTotalBalance]);// Generate trend data using utility functions\nconst trendData=useMemo(()=>{const filteredTransactions=filterTransactionsByAccountType(accounts,accountFilter);return generateTrendData(filteredTransactions,selectedPeriod);},[accounts,accountFilter,selectedPeriod]);const hasAccounts=accounts.length>0;return{filteredAccounts,filteredTotalBalance,filteredSummary,trendData,allTransactions,hasAccounts};};","map":{"version":3,"names":["useMemo","calculateFinancialSummary","generateTrendData","filterTransactionsByAccountType","useDashboardData","_ref","accounts","accountFilter","selectedPeriod","customDateRange","isLoading","filteredAccounts","filter","account","type","includes","filteredTotalBalance","reduce","sum","balance","allTransactions","flatMap","transactions","filteredSummary","filteredTransactions","trendData","hasAccounts","length"],"sources":["C:/Users/X2DHHWAN/Desktop/Finance-App/src/hooks/useDashboardData.ts"],"sourcesContent":["import { useMemo } from 'react';\r\nimport { Account, Transaction, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { calculateFinancialSummary, generateTrendData } from '../utils/periodCalculations';\r\nimport { filterTransactionsByAccountType } from '../utils/transactionUtils';\r\n\r\nexport interface DashboardData {\r\n  filteredAccounts: Account[];\r\n  filteredTotalBalance: number;\r\n  filteredSummary: FinancialSummary;\r\n  trendData: any;\r\n  allTransactions: Transaction[];\r\n  hasAccounts: boolean;\r\n}\r\n\r\nexport interface UseDashboardDataProps {\r\n  accounts: Account[];\r\n  accountFilter: 'personal' | 'business' | 'both';\r\n  selectedPeriod: TimePeriod;\r\n  customDateRange?: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const useDashboardData = ({\r\n  accounts,\r\n  accountFilter,\r\n  selectedPeriod,\r\n  customDateRange,\r\n  isLoading,\r\n}: UseDashboardDataProps): DashboardData => {\r\n  // Filter accounts based on accountFilter\r\n  const filteredAccounts = useMemo(() => {\r\n    return accounts.filter((account: Account) => {\r\n      if (accountFilter === 'both') return true;\r\n      if (accountFilter === 'personal')\r\n        return !account.type.includes('BUSINESS');\r\n      if (accountFilter === 'business')\r\n        return account.type.includes('BUSINESS');\r\n      return true;\r\n    });\r\n  }, [accounts, accountFilter]);\r\n\r\n  // Calculate filtered total balance\r\n  const filteredTotalBalance = useMemo(() => {\r\n    return filteredAccounts.reduce(\r\n      (sum: number, account: Account) => sum + account.balance,\r\n      0\r\n    );\r\n  }, [filteredAccounts]);\r\n\r\n  // Get all transactions from accounts\r\n  const allTransactions = useMemo(() => {\r\n    return accounts.flatMap(account => account.transactions || []);\r\n  }, [accounts]);\r\n\r\n  // Calculate filtered summary using utility functions\r\n  const filteredSummary = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return calculateFinancialSummary(\r\n      filteredTransactions,\r\n      selectedPeriod,\r\n      customDateRange,\r\n      filteredTotalBalance\r\n    );\r\n  }, [accounts, accountFilter, selectedPeriod, customDateRange, filteredTotalBalance]);\r\n\r\n  // Generate trend data using utility functions\r\n  const trendData = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return generateTrendData(filteredTransactions, selectedPeriod);\r\n  }, [accounts, accountFilter, selectedPeriod]);\r\n\r\n  const hasAccounts = accounts.length > 0;\r\n\r\n  return {\r\n    filteredAccounts,\r\n    filteredTotalBalance,\r\n    filteredSummary,\r\n    trendData,\r\n    allTransactions,\r\n    hasAccounts,\r\n  };\r\n}; "],"mappings":"AAAA,OAASA,OAAO,KAAQ,OAAO,CAE/B,OAASC,yBAAyB,CAAEC,iBAAiB,KAAQ,6BAA6B,CAC1F,OAASC,+BAA+B,KAAQ,2BAA2B,CAmB3E,MAAO,MAAM,CAAAC,gBAAgB,CAAGC,IAAA,EAMY,IANX,CAC/BC,QAAQ,CACRC,aAAa,CACbC,cAAc,CACdC,eAAe,CACfC,SACqB,CAAC,CAAAL,IAAA,CACtB;AACA,KAAM,CAAAM,gBAAgB,CAAGX,OAAO,CAAC,IAAM,CACrC,MAAO,CAAAM,QAAQ,CAACM,MAAM,CAAEC,OAAgB,EAAK,CAC3C,GAAIN,aAAa,GAAK,MAAM,CAAE,MAAO,KAAI,CACzC,GAAIA,aAAa,GAAK,UAAU,CAC9B,MAAO,CAACM,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,CAC3C,GAAIR,aAAa,GAAK,UAAU,CAC9B,MAAO,CAAAM,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,CAC1C,MAAO,KAAI,CACb,CAAC,CAAC,CACJ,CAAC,CAAE,CAACT,QAAQ,CAAEC,aAAa,CAAC,CAAC,CAE7B;AACA,KAAM,CAAAS,oBAAoB,CAAGhB,OAAO,CAAC,IAAM,CACzC,MAAO,CAAAW,gBAAgB,CAACM,MAAM,CAC5B,CAACC,GAAW,CAAEL,OAAgB,GAAKK,GAAG,CAAGL,OAAO,CAACM,OAAO,CACxD,CACF,CAAC,CACH,CAAC,CAAE,CAACR,gBAAgB,CAAC,CAAC,CAEtB;AACA,KAAM,CAAAS,eAAe,CAAGpB,OAAO,CAAC,IAAM,CACpC,MAAO,CAAAM,QAAQ,CAACe,OAAO,CAACR,OAAO,EAAIA,OAAO,CAACS,YAAY,EAAI,EAAE,CAAC,CAChE,CAAC,CAAE,CAAChB,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAiB,eAAe,CAAGvB,OAAO,CAAC,IAAM,CACpC,KAAM,CAAAwB,oBAAoB,CAAGrB,+BAA+B,CAACG,QAAQ,CAAEC,aAAa,CAAC,CACrF,MAAO,CAAAN,yBAAyB,CAC9BuB,oBAAoB,CACpBhB,cAAc,CACdC,eAAe,CACfO,oBACF,CAAC,CACH,CAAC,CAAE,CAACV,QAAQ,CAAEC,aAAa,CAAEC,cAAc,CAAEC,eAAe,CAAEO,oBAAoB,CAAC,CAAC,CAEpF;AACA,KAAM,CAAAS,SAAS,CAAGzB,OAAO,CAAC,IAAM,CAC9B,KAAM,CAAAwB,oBAAoB,CAAGrB,+BAA+B,CAACG,QAAQ,CAAEC,aAAa,CAAC,CACrF,MAAO,CAAAL,iBAAiB,CAACsB,oBAAoB,CAAEhB,cAAc,CAAC,CAChE,CAAC,CAAE,CAACF,QAAQ,CAAEC,aAAa,CAAEC,cAAc,CAAC,CAAC,CAE7C,KAAM,CAAAkB,WAAW,CAAGpB,QAAQ,CAACqB,MAAM,CAAG,CAAC,CAEvC,MAAO,CACLhB,gBAAgB,CAChBK,oBAAoB,CACpBO,eAAe,CACfE,SAAS,CACTL,eAAe,CACfM,WACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}