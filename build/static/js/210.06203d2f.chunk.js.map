{"version":3,"file":"static/js/210.06203d2f.chunk.js","mappings":"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","sources":["services/budgetService.ts","hooks/useBudget.ts","components/charts/BaseChart.tsx","utils/chartUtils.ts","components/charts/BudgetVsActualChart.tsx","components/charts/ChartFactory.tsx","components/charts/ChartContainer.tsx","utils/exportUtils.ts","components/dashboard/Dashboard.tsx","hooks/useDashboardData.ts","hooks/useCharts.ts","components/dashboard/DashboardHeader.tsx"],"sourcesContent":["import { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { \r\n  getDocs, \r\n  getDoc, \r\n  setDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy, \r\n  limit, \r\n  onSnapshot,\r\n  addDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  QueryConstraint,\r\n  DocumentData,\r\n  collection,\r\n  doc\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\nexport interface BudgetServiceConfig {\r\n  useMockData: boolean;\r\n  apiBaseUrl?: string;\r\n  apiKey?: string;\r\n}\r\n\r\nexport interface BudgetServiceResponse<T> {\r\n  data: T;\r\n  error?: string;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface BudgetService {\r\n  // Budget operations\r\n  createBudget(budget: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget>;\r\n  getBudgets(userId: string): Promise<Budget[]>;\r\n  getBudget(id: string): Promise<Budget | null>;\r\n  updateBudget(id: string, updates: Partial<Budget>): Promise<Budget>;\r\n  deleteBudget(id: string): Promise<boolean>;\r\n  \r\n  // Budget progress and analytics\r\n  getBudgetProgress(budgetId: string): Promise<BudgetProgress>;\r\n  getBudgetSummary(userId: string): Promise<BudgetSummary>;\r\n  calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert(budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert>;\r\n  getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]>;\r\n  updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert>;\r\n  \r\n  // Real-time subscriptions\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void;\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void;\r\n}\r\n\r\nclass MockBudgetService implements BudgetService {\r\n  private budgets: Budget[] = [];\r\n  private alerts: BudgetAlert[] = [];\r\n\r\n  constructor() {\r\n    console.log('🔍 MockBudgetService constructor called');\r\n    this.generateMockBudgets();\r\n  }\r\n\r\n  private generateMockBudgets(): void {\r\n    console.log('🔍 MockBudgetService.generateMockBudgets called');\r\n    const budgetData = [\r\n      {\r\n        category: 'Food & Dining',\r\n        amount: 800,\r\n        spent: 720, // 90% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Transportation',\r\n        amount: 400,\r\n        spent: 450, // 112.5% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Shopping',\r\n        amount: 600,\r\n        spent: 480, // 80% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Entertainment',\r\n        amount: 300,\r\n        spent: 330, // 110% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Utilities',\r\n        amount: 250,\r\n        spent: 200, // 80% - on track\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Healthcare',\r\n        amount: 150,\r\n        spent: 180, // 120% - over budget\r\n        period: 'month' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Travel',\r\n        amount: 1200,\r\n        spent: 900, // 75% - on track\r\n        period: 'quarter' as TimePeriod,\r\n      },\r\n      {\r\n        category: 'Home Improvement',\r\n        amount: 2000,\r\n        spent: 2200, // 110% - over budget\r\n        period: 'quarter' as TimePeriod,\r\n      },\r\n    ];\r\n    \r\n    budgetData.forEach((data, index) => {\r\n      this.budgets.push({\r\n        id: `budget-${index}`,\r\n        userId: 'demo-user', // Changed from 'mock-user' to 'demo-user'\r\n        category: data.category,\r\n        amount: data.amount,\r\n        period: data.period,\r\n        startDate: new Date().toISOString(),\r\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n        spent: data.spent,\r\n        remaining: data.amount - data.spent,\r\n        alerts: [],\r\n        isActive: true,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const budget: Budget = {\r\n      ...budgetData,\r\n      id: `budget-${Date.now()}`,\r\n      userId: 'demo-user', // Changed from 'mock-user' to 'demo-user'\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.budgets.push(budget);\r\n    return budget;\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    console.log('🔍 MockBudgetService.getBudgets called with userId:', userId);\r\n    console.log('🔍 Total budgets in service:', this.budgets.length);\r\n    console.log('🔍 Budgets for userId:', this.budgets.filter(budget => budget.userId === userId).length);\r\n    return this.budgets.filter(budget => budget.userId === userId);\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.budgets.find(budget => budget.id === id) || null;\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    this.budgets[index] = {\r\n      ...this.budgets[index],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    return this.budgets[index];\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n    \r\n    this.budgets.splice(index, 1);\r\n    return true;\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    const percentageUsed = (budget.spent / budget.amount) * 100;\r\n    const isOverBudget = budget.spent > budget.amount;\r\n    const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n    const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n    \r\n    return {\r\n      budgetId,\r\n      spent: budget.spent,\r\n      remaining: budget.remaining,\r\n      percentageUsed,\r\n      isOverBudget,\r\n      daysRemaining: Math.max(0, daysRemaining),\r\n      projectedSpending,\r\n    };\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const userBudgets = this.budgets.filter(budget => budget.userId === userId && budget.isActive);\r\n    const totalBudgeted = userBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n    const totalSpent = userBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n    const totalRemaining = totalBudgeted - totalSpent;\r\n    const overBudgetCategories = userBudgets\r\n      .filter(budget => budget.spent > budget.amount)\r\n      .map(budget => budget.category);\r\n    \r\n    const upcomingAlerts = this.alerts.filter(alert => \r\n      userBudgets.some(budget => budget.id === alert.id && !alert.triggered)\r\n    );\r\n    \r\n    return {\r\n      totalBudgets: userBudgets.length,\r\n      totalBudgeted,\r\n      totalSpent,\r\n      totalRemaining,\r\n      overBudgetCategories,\r\n      upcomingAlerts,\r\n    };\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      return 0;\r\n    }\r\n    \r\n    // Filter transactions by category and date range\r\n    const relevantTransactions = transactions.filter(tx => \r\n      tx.category === budget.category &&\r\n      new Date(tx.date) >= new Date(budget.startDate) &&\r\n      new Date(tx.date) <= new Date(budget.endDate) &&\r\n      tx.amount < 0 // Only expenses\r\n    );\r\n    \r\n    return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const alert: BudgetAlert = {\r\n      ...alertData,\r\n      id: `alert-${Date.now()}`,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.alerts.push(alert);\r\n    return alert;\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.alerts.filter(alert => alert.id === budgetId);\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const index = this.alerts.findIndex(alert => alert.id === alertId);\r\n    if (index === -1) {\r\n      throw new Error('Alert not found');\r\n    }\r\n    \r\n    this.alerts[index] = {\r\n      ...this.alerts[index],\r\n      ...updates,\r\n    };\r\n    \r\n    return this.alerts[index];\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(() => {\r\n      const userBudgets = this.budgets.filter(budget => budget.userId === userId);\r\n      callback(userBudgets);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(async () => {\r\n      const progress = await this.getBudgetProgress(budgetId);\r\n      callback(progress);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n}\r\n\r\nclass FirebaseBudgetService implements BudgetService {\r\n  private config: BudgetServiceConfig;\r\n  private userId: string;\r\n\r\n  constructor(config: BudgetServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n  }\r\n\r\n  private getUserBudgetsCollection() {\r\n    return collection(db, 'users', this.userId, 'budgets');\r\n  }\r\n\r\n  private getBudgetDocRef(budgetId: string) {\r\n    return doc(db, 'users', this.userId, 'budgets', budgetId);\r\n  }\r\n\r\n  private convertTimestamp(timestamp: Timestamp | string): string {\r\n    if (typeof timestamp === 'string') return timestamp;\r\n    return timestamp.toDate().toISOString();\r\n  }\r\n\r\n  private convertToTimestamp(dateString: string): Timestamp {\r\n    return Timestamp.fromDate(new Date(dateString));\r\n  }\r\n\r\n  private convertFirestoreToBudget(doc: DocumentData): Budget {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      userId: data.userId,\r\n      category: data.category,\r\n      amount: data.amount,\r\n      period: data.period,\r\n      startDate: this.convertTimestamp(data.startDate),\r\n      endDate: this.convertTimestamp(data.endDate),\r\n      spent: data.spent || 0,\r\n      remaining: data.remaining || data.amount,\r\n      alerts: data.alerts || [],\r\n      isActive: data.isActive !== false,\r\n      createdAt: this.convertTimestamp(data.createdAt || serverTimestamp()),\r\n      updatedAt: this.convertTimestamp(data.updatedAt || serverTimestamp()),\r\n    };\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const budgetDoc = {\r\n        ...budgetData,\r\n        userId: this.userId,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      const docRef = await addDoc(budgetsRef, budgetDoc);\r\n      const budgetSnap = await getDoc(docRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Failed to create budget');\r\n    } catch (error) {\r\n      console.error('Error creating budget:', error);\r\n      throw new Error('Failed to create budget');\r\n    }\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const querySnapshot = await getDocs(budgetsRef);\r\n      \r\n      return querySnapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n    } catch (error) {\r\n      console.error('Error fetching budgets:', error);\r\n      throw new Error('Failed to fetch budgets');\r\n    }\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching budget:', error);\r\n      throw new Error('Failed to fetch budget');\r\n    }\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const updatedBudget = {\r\n        ...updates,\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      await updateDoc(budgetRef, updatedBudget);\r\n      \r\n      // Fetch updated budget\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Budget not found');\r\n    } catch (error) {\r\n      console.error('Error updating budget:', error);\r\n      throw new Error('Failed to update budget');\r\n    }\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      await deleteDoc(budgetRef);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting budget:', error);\r\n      throw new Error('Failed to delete budget');\r\n    }\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const percentageUsed = (budget.spent / budget.amount) * 100;\r\n      const isOverBudget = budget.spent > budget.amount;\r\n      const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n      const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n      \r\n      return {\r\n        budgetId,\r\n        spent: budget.spent,\r\n        remaining: budget.remaining,\r\n        percentageUsed,\r\n        isOverBudget,\r\n        daysRemaining: Math.max(0, daysRemaining),\r\n        projectedSpending,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget progress:', error);\r\n      throw new Error('Failed to calculate budget progress');\r\n    }\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    try {\r\n      const budgets = await this.getBudgets(userId);\r\n      const activeBudgets = budgets.filter(budget => budget.isActive);\r\n      \r\n      const totalBudgeted = activeBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n      const totalSpent = activeBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n      const totalRemaining = totalBudgeted - totalSpent;\r\n      const overBudgetCategories = activeBudgets\r\n        .filter(budget => budget.spent > budget.amount)\r\n        .map(budget => budget.category);\r\n      \r\n      const upcomingAlerts = activeBudgets.flatMap(budget => \r\n        budget.alerts.filter(alert => !alert.triggered)\r\n      );\r\n      \r\n      return {\r\n        totalBudgets: activeBudgets.length,\r\n        totalBudgeted,\r\n        totalSpent,\r\n        totalRemaining,\r\n        overBudgetCategories,\r\n        upcomingAlerts,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget summary:', error);\r\n      throw new Error('Failed to calculate budget summary');\r\n    }\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        return 0;\r\n      }\r\n      \r\n      // Filter transactions by category and date range\r\n      const relevantTransactions = transactions.filter(tx => \r\n        tx.category === budget.category &&\r\n        new Date(tx.date) >= new Date(budget.startDate) &&\r\n        new Date(tx.date) <= new Date(budget.endDate) &&\r\n        tx.amount < 0 // Only expenses\r\n      );\r\n      \r\n      return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n    } catch (error) {\r\n      console.error('Error calculating budget spending:', error);\r\n      throw new Error('Failed to calculate budget spending');\r\n    }\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const alert: BudgetAlert = {\r\n        ...alertData,\r\n        id: `alert-${Date.now()}`,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      \r\n      // Add alert to budget\r\n      const updatedAlerts = [...budget.alerts, alert];\r\n      await this.updateBudget(budgetId, { alerts: updatedAlerts });\r\n      \r\n      return alert;\r\n    } catch (error) {\r\n      console.error('Error creating budget alert:', error);\r\n      throw new Error('Failed to create budget alert');\r\n    }\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      return budget?.alerts || [];\r\n    } catch (error) {\r\n      console.error('Error fetching budget alerts:', error);\r\n      throw new Error('Failed to fetch budget alerts');\r\n    }\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    try {\r\n      // Find budget containing this alert\r\n      const budgets = await this.getBudgets(this.userId);\r\n      const budgetWithAlert = budgets.find(budget => \r\n        budget.alerts.some(alert => alert.id === alertId)\r\n      );\r\n      \r\n      if (!budgetWithAlert) {\r\n        throw new Error('Alert not found');\r\n      }\r\n      \r\n      // Update the alert\r\n      const updatedAlerts = budgetWithAlert.alerts.map(alert => \r\n        alert.id === alertId ? { ...alert, ...updates } : alert\r\n      );\r\n      \r\n      await this.updateBudget(budgetWithAlert.id, { alerts: updatedAlerts });\r\n      \r\n      const updatedAlert = updatedAlerts.find(alert => alert.id === alertId);\r\n      if (!updatedAlert) {\r\n        throw new Error('Failed to update alert');\r\n      }\r\n      \r\n      return updatedAlert;\r\n    } catch (error) {\r\n      console.error('Error updating budget alert:', error);\r\n      throw new Error('Failed to update budget alert');\r\n    }\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    const budgetsRef = this.getUserBudgetsCollection();\r\n    return onSnapshot(budgetsRef, (snapshot) => {\r\n      const budgets = snapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n      callback(budgets);\r\n    });\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    const budgetRef = this.getBudgetDocRef(budgetId);\r\n    return onSnapshot(budgetRef, async (snapshot: any) => {\r\n      if (snapshot.exists()) {\r\n        const progress = await this.getBudgetProgress(budgetId);\r\n        callback(progress);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBudgetService(config: BudgetServiceConfig, userId?: string): BudgetService {\r\n  console.log('🔍 createBudgetService called with config:', config, 'userId:', userId);\r\n  if (config.useMockData) {\r\n    console.log('🔍 Creating MockBudgetService');\r\n    return new MockBudgetService();\r\n  } else {\r\n    if (!userId) {\r\n      throw new Error('User ID is required for Firebase BudgetService');\r\n    }\r\n    console.log('🔍 Creating FirebaseBudgetService');\r\n    return new FirebaseBudgetService(config, userId);\r\n  }\r\n}\r\n\r\n// Export classes for testing\r\nexport { MockBudgetService, FirebaseBudgetService };\r\n\r\n// Default export for convenience\r\nexport default createBudgetService; ","import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { createBudgetService, BudgetServiceConfig } from '../services/budgetService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface UseBudgetConfig {\r\n  useMockData?: boolean;\r\n}\r\n\r\ninterface UseBudgetReturn {\r\n  // Budget data\r\n  budgets: Budget[];\r\n  budgetSummary: BudgetSummary | null;\r\n  selectedBudget: Budget | null;\r\n  \r\n  // Loading states\r\n  isLoading: boolean;\r\n  isCreating: boolean;\r\n  isUpdating: boolean;\r\n  isDeleting: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  \r\n  // Budget operations\r\n  createBudget: (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => Promise<Budget>;\r\n  updateBudget: (id: string, updates: Partial<Budget>) => Promise<Budget>;\r\n  deleteBudget: (id: string) => Promise<boolean>;\r\n  selectBudget: (budget: Budget | null) => void;\r\n  \r\n  // Budget progress\r\n  getBudgetProgress: (budgetId: string) => Promise<BudgetProgress>;\r\n  calculateBudgetSpending: (budgetId: string, transactions: any[]) => Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert: (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => Promise<BudgetAlert>;\r\n  getBudgetAlerts: (budgetId: string) => Promise<BudgetAlert[]>;\r\n  updateBudgetAlert: (alertId: string, updates: Partial<BudgetAlert>) => Promise<BudgetAlert>;\r\n  \r\n  // Utility functions\r\n  refreshBudgets: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useBudget = (config: UseBudgetConfig = {}): UseBudgetReturn => {\r\n  const { currentUser } = useAuth();\r\n  const [budgets, setBudgets] = useState<Budget[]>([]);\r\n  const [budgetSummary, setBudgetSummary] = useState<BudgetSummary | null>(null);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Create budget service instance\r\n  const budgetService = useMemo(() => {\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return null;\r\n    \r\n    const serviceConfig: BudgetServiceConfig = {\r\n      useMockData: config.useMockData ?? true, // Default to mock data for development\r\n    };\r\n    \r\n    return createBudgetService(serviceConfig, userId);\r\n  }, [currentUser?.id, config.useMockData]);\r\n\r\n  // Load budgets on mount and when user changes\r\n  useEffect(() => {\r\n    if (!budgetService) return;\r\n\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return;\r\n\r\n    const loadBudgets = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const [budgetsData, summaryData] = await Promise.all([\r\n          budgetService.getBudgets(userId),\r\n          budgetService.getBudgetSummary(userId),\r\n        ]);\r\n        \r\n        setBudgets(budgetsData);\r\n        setBudgetSummary(summaryData);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to load budgets');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBudgets();\r\n\r\n    // Subscribe to real-time updates\r\n    const unsubscribe = budgetService.subscribeToBudgets(userId, (updatedBudgets) => {\r\n      setBudgets(updatedBudgets);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  // Budget operations\r\n  const createBudget = useCallback(async (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsCreating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newBudget = await budgetService.createBudget(budgetData);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => [...prev, newBudget]);\r\n      \r\n      // Refresh summary\r\n      const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                        new URLSearchParams(window.location.search).get('demo') === 'true';\r\n      const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n      \r\n      if (userId) {\r\n        const summary = await budgetService.getBudgetSummary(userId);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return newBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsCreating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const updateBudget = useCallback(async (id: string, updates: Partial<Budget>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsUpdating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const updatedBudget = await budgetService.updateBudget(id, updates);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => prev.map(budget => \r\n        budget.id === id ? updatedBudget : budget\r\n      ));\r\n      \r\n      // Update selected budget if it's the one being updated\r\n      if (selectedBudget?.id === id) {\r\n        setSelectedBudget(updatedBudget);\r\n      }\r\n      \r\n      // Refresh summary\r\n      const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                        new URLSearchParams(window.location.search).get('demo') === 'true';\r\n      const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n      \r\n      if (userId) {\r\n        const summary = await budgetService.getBudgetSummary(userId);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return updatedBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const deleteBudget = useCallback(async (id: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const success = await budgetService.deleteBudget(id);\r\n      \r\n      if (success) {\r\n        // Update local state\r\n        setBudgets(prev => prev.filter(budget => budget.id !== id));\r\n        \r\n        // Clear selected budget if it's the one being deleted\r\n        if (selectedBudget?.id === id) {\r\n          setSelectedBudget(null);\r\n        }\r\n        \r\n        // Refresh summary\r\n        const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                          new URLSearchParams(window.location.search).get('demo') === 'true';\r\n        const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n        \r\n        if (userId) {\r\n          const summary = await budgetService.getBudgetSummary(userId);\r\n          setBudgetSummary(summary);\r\n        }\r\n      }\r\n      \r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const selectBudget = useCallback((budget: Budget | null) => {\r\n    setSelectedBudget(budget);\r\n  }, []);\r\n\r\n  // Budget progress operations\r\n  const getBudgetProgress = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetProgress(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const calculateBudgetSpending = useCallback(async (budgetId: string, transactions: any[]) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.calculateBudgetSpending(budgetId, transactions);\r\n  }, [budgetService]);\r\n\r\n  // Budget alert operations\r\n  const createBudgetAlert = useCallback(async (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.createBudgetAlert(budgetId, alert);\r\n  }, [budgetService]);\r\n\r\n  const getBudgetAlerts = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetAlerts(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const updateBudgetAlert = useCallback(async (alertId: string, updates: Partial<BudgetAlert>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.updateBudgetAlert(alertId, updates);\r\n  }, [budgetService]);\r\n\r\n  // Utility functions\r\n  const refreshBudgets = useCallback(async () => {\r\n    if (!budgetService) return;\r\n\r\n    // Check if we're in demo mode\r\n    const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                      new URLSearchParams(window.location.search).get('demo') === 'true';\r\n    \r\n    // Use demo user ID if in demo mode, otherwise require current user\r\n    const userId = isDemoMode ? 'demo-user' : currentUser?.id;\r\n    \r\n    if (!userId) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [budgetsData, summaryData] = await Promise.all([\r\n        budgetService.getBudgets(userId),\r\n        budgetService.getBudgetSummary(userId),\r\n      ]);\r\n      \r\n      setBudgets(budgetsData);\r\n      setBudgetSummary(summaryData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to refresh budgets');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // Budget data\r\n    budgets,\r\n    budgetSummary,\r\n    selectedBudget,\r\n    \r\n    // Loading states\r\n    isLoading,\r\n    isCreating,\r\n    isUpdating,\r\n    isDeleting,\r\n    \r\n    // Error states\r\n    error,\r\n    \r\n    // Budget operations\r\n    createBudget,\r\n    updateBudget,\r\n    deleteBudget,\r\n    selectBudget,\r\n    \r\n    // Budget progress\r\n    getBudgetProgress,\r\n    calculateBudgetSpending,\r\n    \r\n    // Budget alerts\r\n    createBudgetAlert,\r\n    getBudgetAlerts,\r\n    updateBudgetAlert,\r\n    \r\n    // Utility functions\r\n    refreshBudgets,\r\n    clearError,\r\n  };\r\n}; ","import React, { useRef, useEffect, useState } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\nexport interface BaseChartProps {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: Array<{\r\n      label: string;\r\n      data: number[];\r\n      backgroundColor?: string | string[];\r\n      borderColor?: string | string[];\r\n      borderWidth?: number;\r\n      fill?: boolean;\r\n      tension?: number;\r\n    }>;\r\n  };\r\n  options?: any;\r\n  height?: string | number;\r\n  width?: string | number;\r\n  className?: string;\r\n  onChartClick?: (event: any, elements: any[]) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport const BaseChart: React.FC<BaseChartProps> = ({\r\n  type,\r\n  data,\r\n  options = {},\r\n  height = 400,\r\n  width = '100%',\r\n  className = '',\r\n  onChartClick,\r\n  loading = false,\r\n  error = null,\r\n}) => {\r\n  const chartRef = useRef<ChartJS>(null);\r\n  const [chartInstance, setChartInstance] = useState<ChartJS | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      setChartInstance(chartRef.current);\r\n    }\r\n  }, []);\r\n\r\n  // Handle chart click events\r\n  const handleClick = (event: any, elements: any[]) => {\r\n    if (onChartClick) {\r\n      onChartClick(event, elements);\r\n    }\r\n  };\r\n\r\n  // Default options based on chart type\r\n  const getDefaultOptions = () => {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'bottom' as const,\r\n          labels: {\r\n            usePointStyle: true,\r\n            padding: 20,\r\n            font: {\r\n              size: 12,\r\n            },\r\n            color: '#374151',\r\n          },\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          titleColor: '#fff',\r\n          bodyColor: '#fff',\r\n          borderColor: 'rgba(255, 255, 255, 0.1)',\r\n          borderWidth: 1,\r\n          cornerRadius: 8,\r\n          displayColors: true,\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              const label = context.dataset.label || '';\r\n              const value = context.parsed.y || context.parsed;\r\n              return `${label}: $${value.toLocaleString()}`;\r\n            },\r\n          },\r\n        },\r\n      },\r\n      onClick: handleClick,\r\n    };\r\n\r\n    switch (type) {\r\n      case 'line':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                maxRotation: 45,\r\n                color: '#6B7280',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.1)',\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n                callback: function(value: any) {\r\n                  return '$' + value.toLocaleString();\r\n                },\r\n              },\r\n            },\r\n          },\r\n          elements: {\r\n            point: {\r\n              radius: 4,\r\n              hoverRadius: 6,\r\n            },\r\n            line: {\r\n              tension: 0.4,\r\n            },\r\n          },\r\n        };\r\n      case 'bar':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.1)',\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n                callback: function(value: any) {\r\n                  return '$' + value.toLocaleString();\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n      case 'doughnut':\r\n      case 'pie':\r\n        return {\r\n          ...baseOptions,\r\n          cutout: type === 'doughnut' ? '60%' : undefined,\r\n          plugins: {\r\n            ...baseOptions.plugins,\r\n            legend: {\r\n              ...baseOptions.plugins.legend,\r\n              position: 'right' as const,\r\n            },\r\n            tooltip: {\r\n              ...baseOptions.plugins.tooltip,\r\n              callbacks: {\r\n                label: function(context: any) {\r\n                  const label = context.label || '';\r\n                  const value = context.parsed;\r\n                  const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                  const percentage = ((value / total) * 100).toFixed(1);\r\n                  return `${label}: $${value.toLocaleString()} (${percentage}%)`;\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n      default:\r\n        return baseOptions;\r\n    }\r\n  };\r\n\r\n  const mergedOptions = {\r\n    ...getDefaultOptions(),\r\n    ...options,\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div \r\n        className={`flex items-center justify-center bg-gray-50 rounded-lg ${className}`}\r\n        style={{ height, width }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\r\n          <p className=\"text-gray-500 text-sm\">Loading chart...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div \r\n        className={`flex items-center justify-center bg-red-50 rounded-lg ${className}`}\r\n        style={{ height, width }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 mb-2\">\r\n            <svg className=\"w-8 h-8 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n            </svg>\r\n          </div>\r\n          <p className=\"text-red-600 text-sm\">{error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className={`relative ${className}`}\r\n      style={{ height, width }}\r\n    >\r\n      <Chart\r\n        ref={chartRef}\r\n        type={type}\r\n        data={data}\r\n        options={mergedOptions}\r\n      />\r\n    </div>\r\n  );\r\n}; ","import { Transaction, Account, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { format, subDays, subWeeks, subMonths, subQuarters, subYears, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, startOfQuarter, endOfQuarter, startOfYear, endOfYear } from 'date-fns';\r\n\r\nexport interface ChartDataPoint {\r\n  label: string;\r\n  value: number;\r\n  date: string;\r\n}\r\n\r\nexport interface ChartDataset {\r\n  label: string;\r\n  data: number[];\r\n  backgroundColor?: string | string[];\r\n  borderColor?: string | string[];\r\n  borderWidth?: number;\r\n  fill?: boolean;\r\n  tension?: number;\r\n}\r\n\r\nexport interface ChartConfig {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: ChartDataset[];\r\n  };\r\n  options: any;\r\n}\r\n\r\n// Color palette for charts\r\nexport const CHART_COLORS = {\r\n  primary: '#3B82F6',\r\n  secondary: '#10B981',\r\n  accent: '#F59E0B',\r\n  danger: '#EF4444',\r\n  warning: '#F97316',\r\n  info: '#06B6D4',\r\n  success: '#22C55E',\r\n  purple: '#8B5CF6',\r\n  pink: '#EC4899',\r\n  gray: '#6B7280',\r\n  lightGray: '#E5E7EB',\r\n  darkGray: '#374151',\r\n  // Additional colors for charts\r\n  blue: '#3B82F6',\r\n  red: '#EF4444',\r\n  orange: '#F97316',\r\n  green: '#22C55E',\r\n};\r\n\r\n// Generate gradient colors for charts\r\nexport const generateGradientColors = (baseColor: string, opacity: number = 0.1): string => {\r\n  return `${baseColor}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// Process transactions for balance trend chart\r\nexport const processBalanceTrendData = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): ChartDataPoint[] => {\r\n  const dataPointsArray: ChartDataPoint[] = [];\r\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n  \r\n  // Get date range based on period\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    // Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\r\n    const balanceChange = transactions\r\n      .filter(t => new Date(t.date) <= currentDate)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const balance = totalBalance + balanceChange;\r\n    \r\n    dataPointsArray.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: balance,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return dataPointsArray;\r\n};\r\n\r\n// Process transactions for income vs expenses chart\r\nexport const processIncomeExpenseData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): { income: ChartDataPoint[], expenses: ChartDataPoint[] } => {\r\n  const incomeData: ChartDataPoint[] = [];\r\n  const expenseData: ChartDataPoint[] = [];\r\n  \r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    let currentDate: Date;\r\n    \r\n    // Calculate the correct date based on period\r\n    switch (period) {\r\n      case 'day':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + i);\r\n        break;\r\n      case 'week':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setDate(startDate.getDate() + (i * 7));\r\n        break;\r\n      case 'month':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n        break;\r\n      case 'quarter':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + (i * 3));\r\n        break;\r\n      case 'year':\r\n        currentDate = new Date(startDate);\r\n        currentDate.setFullYear(startDate.getFullYear() + i);\r\n        break;\r\n      default:\r\n        currentDate = new Date(startDate);\r\n        currentDate.setMonth(startDate.getMonth() + i);\r\n    }\r\n    \r\n    const periodStart = getPeriodStart(currentDate, period);\r\n    const periodEnd = getPeriodEnd(currentDate, period);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.date);\r\n      return transactionDate >= periodStart && transactionDate <= periodEnd;\r\n    });\r\n    \r\n    const income = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const expenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    incomeData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: income,\r\n      date: currentDate.toISOString(),\r\n    });\r\n    \r\n    expenseData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: expenses,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return { income: incomeData, expenses: expenseData };\r\n};\r\n\r\n// Process transactions for category spending breakdown\r\nexport const processCategorySpendingData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const categoryMap = new Map<string, number>();\r\n  \r\n  // Get date range based on period - same logic as other charts\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, 30); // Last 30 days for daily view\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, 12); // Last 12 weeks\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, 12); // Last 12 months\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, 4); // Last 4 quarters\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, 5); // Last 5 years\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, 12);\r\n  }\r\n\r\n  // Filter transactions for the period\r\n  const periodTransactions = transactions.filter(t => {\r\n    const transactionDate = new Date(t.date);\r\n    return transactionDate >= startDate && transactionDate <= endDate && t.amount < 0;\r\n  });\r\n\r\n  // Group by category\r\n  periodTransactions.forEach(transaction => {\r\n    const category = transaction.category || 'Uncategorized';\r\n    const amount = Math.abs(transaction.amount);\r\n    categoryMap.set(category, (categoryMap.get(category) || 0) + amount);\r\n  });\r\n\r\n  // Convert to chart data points\r\n  const dataPoints: ChartDataPoint[] = Array.from(categoryMap.entries())\r\n    .map(([category, amount]) => ({\r\n      label: category,\r\n      value: amount,\r\n      date: new Date().toISOString(),\r\n    }))\r\n    .sort((a, b) => b.value - a.value)\r\n    .slice(0, 8); // Top 8 categories\r\n\r\n  return dataPoints;\r\n};\r\n\r\n// Process data for savings rate progress chart\r\nexport const processSavingsRateData = (\r\n  summary: FinancialSummary,\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const currentSavingsRate = summary.savingsRate * 100;\r\n  const targetSavingsRate = 20; // 20% target\r\n  \r\n  return [\r\n    {\r\n      label: 'Current',\r\n      value: currentSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n    {\r\n      label: 'Target',\r\n      value: targetSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n  ];\r\n};\r\n\r\n// Helper functions\r\nconst getDateFormat = (period: TimePeriod): string => {\r\n  switch (period) {\r\n    case 'day':\r\n      return 'MMM dd';\r\n    case 'week':\r\n      return 'MMM dd';\r\n    case 'month':\r\n      return 'MMM yyyy';\r\n    case 'quarter':\r\n      return 'Qo yyyy';\r\n    case 'year':\r\n      return 'yyyy';\r\n    default:\r\n      return 'MMM dd';\r\n  }\r\n};\r\n\r\nconst getPeriodStart = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return startOfDay(date);\r\n    case 'week':\r\n      return startOfWeek(date);\r\n    case 'month':\r\n      return startOfMonth(date);\r\n    case 'quarter':\r\n      return startOfQuarter(date);\r\n    case 'year':\r\n      return startOfYear(date);\r\n    default:\r\n      return startOfMonth(date);\r\n  }\r\n};\r\n\r\nconst getPeriodEnd = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return endOfDay(date);\r\n    case 'week':\r\n      return endOfWeek(date);\r\n    case 'month':\r\n      return endOfMonth(date);\r\n    case 'quarter':\r\n      return endOfQuarter(date);\r\n    case 'year':\r\n      return endOfYear(date);\r\n    default:\r\n      return endOfMonth(date);\r\n  }\r\n};\r\n\r\n// Default chart options\r\nexport const getDefaultChartOptions = (type: 'line' | 'bar' | 'doughnut' | 'pie') => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(255, 255, 255, 0.1)',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y || context.parsed;\r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  switch (type) {\r\n    case 'line':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 4,\r\n            hoverRadius: 6,\r\n          },\r\n          line: {\r\n            tension: 0.4,\r\n          },\r\n        },\r\n      };\r\n    case 'bar':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'doughnut':\r\n    case 'pie':\r\n      return {\r\n        ...baseOptions,\r\n        cutout: type === 'doughnut' ? '60%' : undefined,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            ...baseOptions.plugins.legend,\r\n            position: 'right' as const,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; ","import React, { useMemo } from 'react';\r\nimport { BaseChart } from './BaseChart';\r\nimport { Budget, Transaction, TimePeriod } from '../../types/financial';\r\nimport { CHART_COLORS } from '../../utils/chartUtils';\r\n\r\ninterface BudgetVsActualChartProps {\r\n  budgets: Budget[];\r\n  transactions: Transaction[];\r\n  period: TimePeriod;\r\n  height?: number;\r\n  className?: string;\r\n  onDataPointClick?: (dataPoint: any) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport const BudgetVsActualChart: React.FC<BudgetVsActualChartProps> = ({\r\n  budgets,\r\n  transactions,\r\n  period,\r\n  height = 300,\r\n  className = '',\r\n  onDataPointClick,\r\n  loading = false,\r\n  error = null,\r\n}) => {\r\n  const chartData = useMemo(() => {\r\n    if (!budgets.length) {\r\n      return { labels: [], datasets: [] };\r\n    }\r\n\r\n    // Filter active budgets\r\n    const activeBudgets = budgets.filter(budget => budget.isActive);\r\n    \r\n    // Calculate actual spending for each budget category\r\n    const budgetVsActual = activeBudgets.map(budget => {\r\n      const relevantTransactions = transactions.filter(tx => \r\n        tx.category === budget.category &&\r\n        new Date(tx.date) >= new Date(budget.startDate) &&\r\n        new Date(tx.date) <= new Date(budget.endDate) &&\r\n        tx.amount < 0 // Only expenses\r\n      );\r\n      \r\n      const actualSpending = Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n      \r\n      return {\r\n        category: budget.category,\r\n        budgeted: budget.amount,\r\n        actual: actualSpending,\r\n        remaining: budget.amount - actualSpending,\r\n        percentage: (actualSpending / budget.amount) * 100,\r\n      };\r\n    });\r\n\r\n    // Sort by percentage (most over budget first)\r\n    budgetVsActual.sort((a, b) => b.percentage - a.percentage);\r\n\r\n    const labels = budgetVsActual.map(item => item.category);\r\n    const budgetedData = budgetVsActual.map(item => item.budgeted);\r\n    const actualData = budgetVsActual.map(item => item.actual);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Budgeted',\r\n          data: budgetedData,\r\n          backgroundColor: CHART_COLORS.blue,\r\n          borderColor: CHART_COLORS.blue,\r\n          borderWidth: 2,\r\n          borderRadius: 4,\r\n          borderSkipped: false,\r\n        },\r\n        {\r\n          label: 'Actual',\r\n          data: actualData,\r\n          backgroundColor: budgetVsActual.map(item => \r\n            item.percentage > 100 ? CHART_COLORS.red : \r\n            item.percentage > 80 ? CHART_COLORS.orange : \r\n            CHART_COLORS.green\r\n          ),\r\n          borderColor: budgetVsActual.map(item => \r\n            item.percentage > 100 ? CHART_COLORS.red : \r\n            item.percentage > 80 ? CHART_COLORS.orange : \r\n            CHART_COLORS.green\r\n          ),\r\n          borderWidth: 2,\r\n          borderRadius: 4,\r\n          borderSkipped: false,\r\n        },\r\n      ],\r\n    };\r\n  }, [budgets, transactions, period]);\r\n\r\n  const chartOptions = useMemo(() => ({\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      title: {\r\n        display: false,\r\n      },\r\n             legend: {\r\n         display: false,\r\n       },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: '#374151',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y;\r\n            const category = context.label;\r\n            \r\n            // Find the budget data for this category\r\n            const budgetData = budgets.find(b => b.category === category);\r\n            if (budgetData && context.datasetIndex === 1) { // Actual spending\r\n              const percentage = (value / budgetData.amount) * 100;\r\n              const status = percentage > 100 ? 'Over Budget' : \r\n                           percentage > 80 ? 'Near Limit' : 'On Track';\r\n              return `${label}: $${value.toLocaleString()} (${percentage.toFixed(1)}% - ${status})`;\r\n            }\r\n            \r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 45,\r\n          minRotation: 0,\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          color: 'rgba(0, 0, 0, 0.1)',\r\n        },\r\n        ticks: {\r\n          callback: function(value: any) {\r\n            return '$' + value.toLocaleString();\r\n          },\r\n        },\r\n      },\r\n    },\r\n    interaction: {\r\n      intersect: false,\r\n      mode: 'index' as const,\r\n    },\r\n  }), [budgets]);\r\n\r\n  const handleChartClick = (event: any, elements: any[]) => {\r\n    if (elements.length > 0 && onDataPointClick) {\r\n      const dataIndex = elements[0].index;\r\n      const datasetIndex = elements[0].datasetIndex;\r\n      const category = chartData.labels[dataIndex];\r\n      \r\n      const budget = budgets.find(b => b.category === category);\r\n      if (budget) {\r\n        onDataPointClick({\r\n          category,\r\n          budgeted: budget.amount,\r\n          actual: chartData.datasets[1].data[dataIndex],\r\n          type: datasetIndex === 0 ? 'budgeted' : 'actual',\r\n          budget,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center text-red-600\">\r\n          <p>Error loading budget chart: {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!budgets.length) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500\">\r\n            No budgets found. Create budgets to see spending comparisons.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n     return (\r\n     <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n       <BaseChart\r\n        type=\"bar\"\r\n        data={chartData}\r\n        options={chartOptions}\r\n        height={height}\r\n        width=\"100%\"\r\n        onChartClick={handleChartClick}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    </div>\r\n  );\r\n}; ","import React, { useMemo } from 'react';\r\nimport { Transaction, Account, TimePeriod, Budget } from '../../types/financial';\r\nimport { BaseChart } from './BaseChart';\r\nimport { BudgetVsActualChart } from './BudgetVsActualChart';\r\nimport { \r\n  processBalanceTrendData, \r\n  processIncomeExpenseData, \r\n  processCategorySpendingData,\r\n  CHART_COLORS \r\n} from '../../utils/chartUtils';\r\n\r\nexport type ChartType = 'balance' | 'income-expense' | 'category' | 'budget-vs-actual';\r\n\r\nexport interface ChartConfig {\r\n  type: ChartType;\r\n  title: string;\r\n  description: string;\r\n  height?: number;\r\n  width?: string | number;\r\n  className?: string;\r\n  options?: any;\r\n}\r\n\r\nexport interface ChartFactoryProps {\r\n  chartType: ChartType;\r\n  transactions: Transaction[];\r\n  accounts: Account[];\r\n  period: TimePeriod;\r\n  budgets?: Budget[];\r\n  height?: number;\r\n  className?: string;\r\n  onDataPointClick?: (dataPoint: any, chartType: ChartType) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  customOptions?: any;\r\n}\r\n\r\nexport const ChartFactory: React.FC<ChartFactoryProps> = ({\r\n  chartType,\r\n  transactions,\r\n  accounts,\r\n  period,\r\n  budgets = [],\r\n  height = 300,\r\n  className = '',\r\n  onDataPointClick,\r\n  loading = false,\r\n  error = null,\r\n  customOptions = {},\r\n}) => {\r\n  const chartConfig = useMemo(() => getChartConfig(chartType, period), [chartType, period]);\r\n\r\n  const chartData = useMemo(() => {\r\n    switch (chartType) {\r\n      case 'balance': {\r\n        const dataPoints = processBalanceTrendData(transactions, accounts, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Balance',\r\n            data: dataPoints.map(point => point.value),\r\n            borderColor: CHART_COLORS.primary,\r\n            backgroundColor: CHART_COLORS.primary + '20',\r\n            fill: true,\r\n            tension: 0.4,\r\n          }]\r\n        };\r\n      }\r\n      case 'income-expense': {\r\n        const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n        return {\r\n          labels: income.map(point => point.label),\r\n          datasets: [\r\n            {\r\n              label: 'Income',\r\n              data: income.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.success,\r\n              borderColor: CHART_COLORS.success,\r\n            },\r\n            {\r\n              label: 'Expenses',\r\n              data: expenses.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.danger,\r\n              borderColor: CHART_COLORS.danger,\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      case 'category': {\r\n        const dataPoints = processCategorySpendingData(transactions, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Spending',\r\n            data: dataPoints.map(point => point.value),\r\n            backgroundColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n            borderColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n          }]\r\n        };\r\n      }\r\n      case 'budget-vs-actual':\r\n        // Budget vs actual is handled by dedicated component\r\n        return { labels: [], datasets: [] };\r\n      default:\r\n        return { labels: [], datasets: [] };\r\n    }\r\n  }, [chartType, transactions, accounts, period]);\r\n\r\n  const chartOptions = useMemo(() => {\r\n    const baseOptions = getBaseOptions(chartType, chartConfig.title);\r\n    return { ...baseOptions, ...customOptions };\r\n  }, [chartType, chartConfig.title, customOptions]);\r\n\r\n  const handleChartClick = (event: any, elements: any[]) => {\r\n    if (elements.length > 0 && onDataPointClick) {\r\n      const dataIndex = elements[0].index;\r\n      const datasetIndex = elements[0].datasetIndex;\r\n      \r\n      // Get the appropriate data point based on chart type\r\n      let dataPoint: any;\r\n      switch (chartType) {\r\n        case 'balance':\r\n          dataPoint = processBalanceTrendData(transactions, accounts, period)[dataIndex];\r\n          break;\r\n        case 'income-expense':\r\n          const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n          dataPoint = datasetIndex === 0 ? income[dataIndex] : expenses[dataIndex];\r\n          dataPoint.type = datasetIndex === 0 ? 'income' : 'expense';\r\n          break;\r\n        case 'category':\r\n          dataPoint = processCategorySpendingData(transactions, period)[dataIndex];\r\n          break;\r\n        default:\r\n          dataPoint = null;\r\n      }\r\n      \r\n      if (dataPoint) {\r\n        onDataPointClick(dataPoint, chartType);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Special handling for budget vs actual chart\r\n  if (chartType === 'budget-vs-actual') {\r\n    return (\r\n      <BudgetVsActualChart\r\n        budgets={budgets}\r\n        transactions={transactions}\r\n        period={period}\r\n        height={height}\r\n        className={className}\r\n        onDataPointClick={(dataPoint) => onDataPointClick?.(dataPoint, chartType)}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center text-red-600\">\r\n          <p>Error loading chart: {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n      <BaseChart\r\n        type={getChartType(chartType)}\r\n        data={chartData}\r\n        options={chartOptions}\r\n        height={height}\r\n        width=\"100%\"\r\n        onChartClick={handleChartClick}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions\r\nconst getChartConfig = (chartType: ChartType, period: TimePeriod): { title: string; description: string } => {\r\n  const periodText = period.charAt(0).toUpperCase() + period.slice(1);\r\n  \r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        title: 'Balance Trend',\r\n        description: `Shows your account balance over the ${period} period`\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        title: 'Income vs Expenses',\r\n        description: `Compares your income and expenses for the ${period}`\r\n      };\r\n    case 'category':\r\n      return {\r\n        title: 'Spending by Category',\r\n        description: `Breakdown of your spending by category for the ${period}`\r\n      };\r\n    case 'budget-vs-actual':\r\n      return {\r\n        title: 'Budget vs Actual',\r\n        description: `Shows how your spending compares to your budget for the ${period}`\r\n      };\r\n    default:\r\n      return {\r\n        title: 'Chart',\r\n        description: 'Financial data visualization'\r\n      };\r\n  }\r\n};\r\n\r\nconst getChartType = (chartType: ChartType): 'line' | 'bar' | 'doughnut' | 'pie' => {\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return 'line';\r\n    case 'income-expense':\r\n      return 'bar';\r\n    case 'category':\r\n      return 'doughnut';\r\n    case 'budget-vs-actual':\r\n      return 'bar';\r\n    default:\r\n      return 'line';\r\n  }\r\n};\r\n\r\nconst getBaseOptions = (chartType: ChartType, title: string) => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n         plugins: {\r\n       title: {\r\n         display: false,\r\n       },\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n          color: '#374151',\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: '#374151',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Add chart-specific options\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          y: {\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const value = context.parsed.y;\r\n                return `Balance: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.dataset.label || '';\r\n                const value = context.parsed.y;\r\n                return `${label}: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'category':\r\n      return {\r\n        ...baseOptions,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            position: 'right' as const,\r\n            labels: {\r\n              usePointStyle: true,\r\n              padding: 15,\r\n              font: {\r\n                size: 11,\r\n              },\r\n            },\r\n          },\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.label || '';\r\n                const value = context.parsed;\r\n                const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                const percentage = ((value / total) * 100).toFixed(1);\r\n                return `${label}: $${value.toLocaleString()} (${percentage}%)`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { Transaction, Account, TimePeriod, Budget } from '../../types/financial';\r\nimport { ChartFactory, ChartType } from './ChartFactory';\r\nimport { Button } from '../ui/Button';\r\nimport { Download, Maximize2, Minimize2, RefreshCw } from 'lucide-react';\r\n\r\n/**\r\n * ChartContainer - Financial Analytics Dashboard\r\n * \r\n * Layout Changes (Sprint 6):\r\n * - Changed from horizontal columns to vertical rows layout\r\n * - Improved mobile experience and data flow\r\n * - Charts start collapsed (200px height) and can expand to 600px\r\n * - Removed redundant container header, moved export button to individual charts\r\n * - Maintained ChartFactory pattern and performance optimizations\r\n */\r\n\r\ninterface ChartContainerProps {\r\n  transactions: Transaction[];\r\n  accounts: Account[];\r\n  period: TimePeriod;\r\n  budgets?: Budget[];\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  onExport?: () => void;\r\n  onRefresh?: () => void;\r\n}\r\n\r\nconst CHART_CONFIGS: Array<{\r\n  type: ChartType;\r\n  title: string;\r\n  description: string;\r\n}> = [\r\n  {\r\n    type: 'balance',\r\n    title: 'Balance Trend',\r\n    description: 'Track your account balance over time'\r\n  },\r\n  {\r\n    type: 'income-expense',\r\n    title: 'Income vs Expenses',\r\n    description: 'Compare your income and spending patterns'\r\n  },\r\n  {\r\n    type: 'category',\r\n    title: 'Spending by Category',\r\n    description: 'See where your money is going'\r\n  },\r\n  {\r\n    type: 'budget-vs-actual',\r\n    title: 'Budget vs Actual',\r\n    description: 'Compare your spending to your budgets'\r\n  }\r\n];\r\n\r\nexport const ChartContainer: React.FC<ChartContainerProps> = ({\r\n  transactions,\r\n  accounts,\r\n  period,\r\n  budgets = [],\r\n  loading = false,\r\n  error = null,\r\n  onExport,\r\n  onRefresh,\r\n}) => {\r\n  const [expandedChart, setExpandedChart] = useState<ChartType | null>(null);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const handleRefresh = async () => {\r\n    if (onRefresh) {\r\n      setIsRefreshing(true);\r\n      try {\r\n        await onRefresh();\r\n      } finally {\r\n        setIsRefreshing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDataPointClick = (dataPoint: any, chartType: ChartType) => {\r\n    console.log(`${chartType} data point clicked:`, dataPoint);\r\n    // You can implement navigation or detailed view here\r\n  };\r\n\r\n  const toggleChartExpansion = (chartType: ChartType) => {\r\n    setExpandedChart(expandedChart === chartType ? null : chartType);\r\n  };\r\n\r\n  const renderChartCard = (chartConfig: typeof CHART_CONFIGS[0]) => {\r\n    const isExpanded = expandedChart === chartConfig.type;\r\n    \r\n    return (\r\n      <div \r\n        key={chartConfig.type}\r\n        className=\"bg-white rounded-lg shadow-sm border transition-all duration-300\"\r\n      >\r\n                 {/* Chart Header */}\r\n         <div className=\"p-4 border-b border-gray-200\">\r\n           <div className=\"flex items-center justify-between\">\r\n             <div>\r\n               <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                 {chartConfig.title}\r\n               </h3>\r\n               <p className=\"text-sm text-gray-600\">\r\n                 {chartConfig.description}\r\n               </p>\r\n             </div>\r\n            \r\n                         <div className=\"flex items-center space-x-2\">\r\n               {/* Export Button */}\r\n               <Button\r\n                 onClick={onExport}\r\n                 disabled={loading}\r\n                 variant=\"outline\"\r\n                 size=\"sm\"\r\n                 className=\"flex items-center space-x-1\"\r\n               >\r\n                 <Download className=\"w-4 h-4\" />\r\n                 <span>Export</span>\r\n               </Button>\r\n\r\n               {/* Refresh Button */}\r\n               <Button\r\n                 onClick={handleRefresh}\r\n                 disabled={isRefreshing}\r\n                 variant=\"outline\"\r\n                 size=\"sm\"\r\n                 className=\"flex items-center space-x-1\"\r\n               >\r\n                 <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n                 <span>Refresh</span>\r\n               </Button>\r\n\r\n               {/* Expand/Collapse Button */}\r\n               <Button\r\n                 onClick={() => toggleChartExpansion(chartConfig.type)}\r\n                 variant=\"outline\"\r\n                 size=\"sm\"\r\n                 className=\"flex items-center space-x-1\"\r\n               >\r\n                 {isExpanded ? (\r\n                   <>\r\n                     <Minimize2 className=\"w-4 h-4\" />\r\n                     <span>Collapse</span>\r\n                   </>\r\n                 ) : (\r\n                   <>\r\n                     <Maximize2 className=\"w-4 h-4\" />\r\n                     <span>Expand</span>\r\n                   </>\r\n                 )}\r\n               </Button>\r\n             </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Content */}\r\n        <div className=\"p-4\">\r\n          <ChartFactory\r\n            chartType={chartConfig.type}\r\n            transactions={transactions}\r\n            accounts={accounts}\r\n            period={period}\r\n            budgets={budgets}\r\n            height={isExpanded ? 600 : 200}\r\n            loading={loading}\r\n            error={error}\r\n            onDataPointClick={handleDataPointClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n\r\n      {/* Charts Grid - Vertical rows layout for improved mobile experience and data flow */}\r\n      <div className=\"grid grid-cols-1 gap-6 max-w-full\">\r\n        {CHART_CONFIGS.map(renderChartCard)}\r\n      </div>\r\n\r\n      {/* Loading State */}\r\n      {loading && (\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"text-gray-600 mt-2\">Loading charts...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Error State */}\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg\r\n                className=\"h-5 w-5 text-red-400\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-sm text-red-800\">Error loading charts: {error}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}; ","import { Transaction, Account } from '../types/financial';\r\n\r\nexport interface ExportOptions {\r\n  format: 'csv' | 'json';\r\n  includeHeaders: boolean;\r\n  dateFormat: string;\r\n  currencyFormat: string;\r\n}\r\n\r\nexport const defaultExportOptions: ExportOptions = {\r\n  format: 'csv',\r\n  includeHeaders: true,\r\n  dateFormat: 'YYYY-MM-DD',\r\n  currencyFormat: 'USD',\r\n};\r\n\r\n// Browser-compatible CSV export function\r\nfunction convertToCSV(data: any[], headers?: string[]): string {\r\n  if (!data || data.length === 0) {\r\n    return '';\r\n  }\r\n\r\n  // Generate headers if not provided\r\n  const csvHeaders = headers || Object.keys(data[0]);\r\n  \r\n  // Create CSV header row\r\n  const headerRow = csvHeaders.map(header => `\"${header}\"`).join(',');\r\n  \r\n  // Create CSV data rows\r\n  const dataRows = data.map(row => {\r\n    return csvHeaders.map(header => {\r\n      const value = row[header];\r\n      // Handle different data types\r\n      if (value === null || value === undefined) {\r\n        return '\"\"';\r\n      }\r\n      if (typeof value === 'string') {\r\n        // Escape quotes and wrap in quotes\r\n        return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n      }\r\n      if (typeof value === 'number') {\r\n        return value.toString();\r\n      }\r\n      if (typeof value === 'boolean') {\r\n        return value ? 'true' : 'false';\r\n      }\r\n      if (value instanceof Date) {\r\n        return `\"${value.toISOString().split('T')[0]}\"`;\r\n      }\r\n      // For objects/arrays, convert to JSON string\r\n      return `\"${JSON.stringify(value).replace(/\"/g, '\"\"')}\"`;\r\n    }).join(',');\r\n  });\r\n  \r\n  return [headerRow, ...dataRows].join('\\n');\r\n}\r\n\r\n// Format currency for display\r\nfunction formatCurrency(amount: number, currency: string = 'USD'): string {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: currency,\r\n  }).format(amount);\r\n}\r\n\r\n// Format date for display\r\nfunction formatDate(date: string | Date, format: string = 'YYYY-MM-DD'): string {\r\n  const d = new Date(date);\r\n  const year = d.getFullYear();\r\n  const month = String(d.getMonth() + 1).padStart(2, '0');\r\n  const day = String(d.getDate()).padStart(2, '0');\r\n  \r\n  switch (format) {\r\n    case 'MM/DD/YYYY':\r\n      return `${month}/${day}/${year}`;\r\n    case 'DD/MM/YYYY':\r\n      return `${day}/${month}/${year}`;\r\n    case 'YYYY-MM-DD':\r\n    default:\r\n      return `${year}-${month}-${day}`;\r\n  }\r\n}\r\n\r\n// Export transactions to CSV\r\nexport function exportTransactionsToCSV(\r\n  transactions: Transaction[],\r\n  options: Partial<ExportOptions> = {}\r\n): string {\r\n  const opts = { ...defaultExportOptions, ...options };\r\n  \r\n  const csvData = transactions.map(transaction => ({\r\n    Date: formatDate(transaction.date, opts.dateFormat),\r\n    Description: transaction.description,\r\n    Amount: formatCurrency(transaction.amount, opts.currencyFormat),\r\n    Category: transaction.category,\r\n    AccountID: transaction.accountId,\r\n    Tags: transaction.tags?.join(', ') || '',\r\n    Merchant: transaction.cleanMerchant?.cleanName || '',\r\n    TransactionID: transaction.id,\r\n    Status: transaction.pending ? 'Pending' : 'Cleared',\r\n    Notes: transaction.notes || '',\r\n  }));\r\n  \r\n  const headers = opts.includeHeaders ? [\r\n    'Date', 'Description', 'Amount', 'Category', 'AccountID', 'Tags', 'Merchant', 'TransactionID', 'Status', 'Notes'\r\n  ] : undefined;\r\n  \r\n  return convertToCSV(csvData, headers);\r\n}\r\n\r\n// Export accounts to CSV\r\nexport function exportAccountsToCSV(\r\n  accounts: Account[],\r\n  options: Partial<ExportOptions> = {}\r\n): string {\r\n  const opts = { ...defaultExportOptions, ...options };\r\n  \r\n  const csvData = accounts.map(account => ({\r\n    AccountName: account.name,\r\n    AccountType: account.type,\r\n    Balance: formatCurrency(account.balance, opts.currencyFormat),\r\n    BankName: account.bankName || '',\r\n    AccountNumber: account.accountNumber || '',\r\n    Status: account.isActive ? 'Active' : 'Inactive',\r\n    LastUpdated: formatDate(account.updatedAt || new Date(), opts.dateFormat),\r\n  }));\r\n  \r\n  const headers = opts.includeHeaders ? [\r\n    'AccountName', 'AccountType', 'Balance', 'BankName', 'AccountNumber', 'Status', 'LastUpdated'\r\n  ] : undefined;\r\n  \r\n  return convertToCSV(csvData, headers);\r\n}\r\n\r\n// Export financial summary to CSV\r\nexport function exportSummaryToCSV(\r\n  summary: {\r\n    totalBalance: number;\r\n    totalIncome: number;\r\n    totalExpenses: number;\r\n    netSavings: number;\r\n    period: string;\r\n  },\r\n  options: Partial<ExportOptions> = {}\r\n): string {\r\n  const opts = { ...defaultExportOptions, ...options };\r\n  \r\n  const csvData = [{\r\n    Period: summary.period,\r\n    TotalBalance: formatCurrency(summary.totalBalance, opts.currencyFormat),\r\n    TotalIncome: formatCurrency(summary.totalIncome, opts.currencyFormat),\r\n    TotalExpenses: formatCurrency(summary.totalExpenses, opts.currencyFormat),\r\n    NetSavings: formatCurrency(summary.netSavings, opts.currencyFormat),\r\n  }];\r\n  \r\n  const headers = opts.includeHeaders ? [\r\n    'Period', 'TotalBalance', 'TotalIncome', 'TotalExpenses', 'NetSavings'\r\n  ] : undefined;\r\n  \r\n  return convertToCSV(csvData, headers);\r\n}\r\n\r\n// Download file function\r\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/csv'): void {\r\n  const blob = new Blob([content], { type: mimeType });\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  // Clean up the URL object\r\n  URL.revokeObjectURL(url);\r\n}\r\n\r\n// Export transactions with download\r\nexport function exportTransactions(\r\n  transactions: Transaction[],\r\n  filename: string = 'transactions.csv',\r\n  options: Partial<ExportOptions> = {}\r\n): void {\r\n  const csvContent = exportTransactionsToCSV(transactions, options);\r\n  downloadFile(csvContent, filename);\r\n}\r\n\r\n// Export accounts with download\r\nexport function exportAccounts(\r\n  accounts: Account[],\r\n  filename: string = 'accounts.csv',\r\n  options: Partial<ExportOptions> = {}\r\n): void {\r\n  const csvContent = exportAccountsToCSV(accounts, options);\r\n  downloadFile(csvContent, filename);\r\n}\r\n\r\n// Export summary with download\r\nexport function exportSummary(\r\n  summary: {\r\n    totalBalance: number;\r\n    totalIncome: number;\r\n    totalExpenses: number;\r\n    netSavings: number;\r\n    period: string;\r\n  },\r\n  filename: string = 'financial-summary.csv',\r\n  options: Partial<ExportOptions> = {}\r\n): void {\r\n  const csvContent = exportSummaryToCSV(summary, options);\r\n  downloadFile(csvContent, filename);\r\n}\r\n\r\n// Export to JSON\r\nexport function exportToJSON(\r\n  data: any,\r\n  filename: string = 'data.json'\r\n): void {\r\n  const jsonContent = JSON.stringify(data, null, 2);\r\n  downloadFile(jsonContent, filename, 'application/json');\r\n} ","import React, { Suspense, useState } from 'react';\r\nimport { useFinancial } from '../../contexts/FinancialContext';\r\nimport { Budget } from '../../types/financial';\r\nimport { DashboardHeader } from './DashboardHeader';\r\nimport { DEFAULT_PERIODS } from '../../constants/financial';\r\nimport { Button } from '../ui/Button';\r\nimport { FullScreenSpinner, InlineSpinner } from '../ui/LoadingSpinner';\r\nimport {\r\n  Building,\r\n  Plus,\r\n  Upload,\r\n  Download,\r\n} from 'lucide-react';\r\nimport { ChartContainer } from '../charts';\r\nimport { useCharts } from '../../hooks/useCharts';\r\nimport { useDashboardData } from '../../hooks/useDashboardData';\r\nimport { useBudget } from '../../hooks/useBudget';\r\n\r\n// Lazy load components for code splitting\r\nconst AccountDetail = React.lazy(() => import('../accounts/AccountDetail').then(module => ({ default: module.AccountDetail })));\r\nconst KPISection = React.lazy(() => import('./KPISection').then(module => ({ default: module.KPISection })));\r\nconst AccountOverview = React.lazy(() => import('./AccountOverview').then(module => ({ default: module.AccountOverview })));\r\nconst RecentActivity = React.lazy(() => import('./RecentActivity').then(module => ({ default: module.RecentActivity })));\r\nconst BudgetOverview = React.lazy(() => import('../budget/BudgetOverview').then(module => ({ default: module.BudgetOverview })));\r\nconst BudgetForm = React.lazy(() => import('../budget/BudgetForm').then(module => ({ default: module.BudgetForm })));\r\n\r\nexport const Dashboard: React.FC = () => {\r\n  const {\r\n    state,\r\n    viewAccountDetail,\r\n    accountFilter,\r\n    changePeriod,\r\n  } = useFinancial();\r\n\r\n  // Budget management state\r\n  const [showBudgetForm, setShowBudgetForm] = useState(false);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n\r\n  // Use budget hook\r\n  const { budgets } = useBudget();\r\n\r\n  // Use consolidated dashboard data hook\r\n  const dashboardData = useDashboardData({\r\n    accounts: state.accounts,\r\n    accountFilter,\r\n    selectedPeriod: state.selectedPeriod,\r\n    customDateRange: state.customDateRange,\r\n    isLoading: state.isLoading,\r\n  });\r\n\r\n  const { filteredAccounts, filteredSummary, trendData, allTransactions, hasAccounts } = dashboardData;\r\n  const isLoading = state.isLoading;\r\n\r\n  // Use charts hook\r\n  const {\r\n    isExporting,\r\n    exportError,\r\n    handleExportTransactions,\r\n    handleExportSummary,\r\n    refreshCharts,\r\n  } = useCharts(allTransactions, filteredAccounts, state.selectedPeriod, state.filters);\r\n\r\n  // Check if we're in demo mode\r\n  const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                    new URLSearchParams(window.location.search).get('demo') === 'true';\r\n\r\n  // Add routing logic for account-detail screen with lazy loading\r\n  if (state.currentScreen === 'account-detail') {\r\n    return (\r\n      <Suspense fallback={<FullScreenSpinner text=\"Loading Account Details...\" />}>\r\n        <AccountDetail />\r\n      </Suspense>\r\n    );\r\n  }\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return <FullScreenSpinner text=\"Loading your financial data...\" />;\r\n  }\r\n\r\n  // Empty state - no accounts connected\r\n  if (!hasAccounts) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50\">\r\n        <DashboardHeader />\r\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n          <div className=\"text-center py-12\">\r\n            <Building className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n              Welcome to FinanceApp\r\n            </h2>\r\n            <p className=\"text-gray-600 mb-8 max-w-md mx-auto\">\r\n              Connect your bank accounts to get started with smart financial\r\n              management. We'll help you track spending, categorize\r\n              transactions, and gain insights into your financial health.\r\n            </p>\r\n            <Button onClick={() => alert('Bank connection coming soon!')}>\r\n              Connect Your First Account\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Feature Preview */}\r\n          <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">📊</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Smart Analytics\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Get insights into your spending patterns and financial trends\r\n                with interactive charts and KPIs.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">🎯</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Budget Management\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Set budgets, track spending, and get alerts when you're\r\n                approaching your limits.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">🔒</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Secure & Private\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Your data is protected with 256-bit encryption and\r\n                industry-leading security practices.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main dashboard with data\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n\r\n      <DashboardHeader />\r\n\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Demo Mode Banner */}\r\n        {isDemoMode && (\r\n          <div className=\"mb-6 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-4 shadow-lg\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <span className=\"text-2xl\">🎯</span>\r\n                <div>\r\n                  <h3 className=\"font-semibold text-lg\">Demo Mode Active</h3>\r\n                  <p className=\"text-blue-100 text-sm\">\r\n                    You're viewing sample data. Sign in to connect your real accounts.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <button\r\n                onClick={() => {\r\n                  localStorage.removeItem('financeapp-demo-mode');\r\n                  window.location.href = '/';\r\n                }}\r\n                className=\"bg-white bg-opacity-20 hover:bg-opacity-30 px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\r\n              >\r\n                Sign In\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n\r\n\r\n        {/* Error Display */}\r\n        {state.error && (\r\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg\r\n                  className=\"h-5 w-5 text-red-400\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm text-red-800\">{state.error}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Period Selector - Centered above KPI Section */}\r\n        <div className=\"flex justify-center mb-6\">\r\n          <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\r\n            {DEFAULT_PERIODS.map((period) => (\r\n              <button\r\n                key={period}\r\n                onClick={() => {\r\n                  if (period === 'custom') {\r\n                    // Handle custom date picker\r\n                    alert('Custom date picker coming soon!');\r\n                  } else {\r\n                    changePeriod(period as any);\r\n                  }\r\n                }}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  state.selectedPeriod === period\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                {period === 'day'\r\n                  ? 'D'\r\n                  : period === 'week'\r\n                  ? 'W'\r\n                  : period === 'month'\r\n                  ? 'M'\r\n                  : period === 'quarter'\r\n                  ? 'Q'\r\n                  : period === 'year'\r\n                  ? 'Y'\r\n                  : period === '5year'\r\n                  ? '5Y'\r\n                  : period === 'custom'\r\n                  ? 'Custom'\r\n                  : period}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* KPI Section */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <KPISection\r\n              summary={filteredSummary}\r\n              totalBalance={filteredSummary.totalBalance}\r\n              period={state.selectedPeriod}\r\n              budgets={budgets}\r\n              balanceTrend={trendData?.balance}\r\n              incomeTrend={trendData?.income}\r\n              expenseTrend={trendData?.expenses}\r\n              savingsTrend={trendData?.savings}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Account Overview */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <AccountOverview\r\n              accounts={filteredAccounts}\r\n              onAccountSelect={viewAccountDetail}\r\n              accountFilter={accountFilter}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Charts Section */}\r\n        <div className=\"mb-6\">\r\n          <ChartContainer\r\n            transactions={allTransactions}\r\n            accounts={filteredAccounts}\r\n            period={state.selectedPeriod}\r\n            budgets={budgets}\r\n            loading={isLoading}\r\n            error={state.error}\r\n            onExport={handleExportTransactions}\r\n            onRefresh={refreshCharts}\r\n          />\r\n        </div>\r\n\r\n        {/* Budget Section */}\r\n        <div className=\"mb-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">Budget Management</h2>\r\n            <Button\r\n              onClick={() => setShowBudgetForm(true)}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Plus className=\"w-4 h-4\" />\r\n              <span>Add Budget</span>\r\n            </Button>\r\n          </div>\r\n          \r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <BudgetOverview\r\n              onBudgetSelect={setSelectedBudget}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <RecentActivity\r\n              accounts={filteredAccounts}\r\n              limit={10}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Export Section - Hidden for now */}\r\n        {/* <div className=\"bg-white rounded-lg shadow-sm border p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Export Data</h3>\r\n          <div className=\"flex flex-wrap gap-3\">\r\n            <Button\r\n              onClick={handleExportTransactions}\r\n              disabled={isExporting}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Download className=\"w-4 h-4\" />\r\n              <span>{isExporting ? 'Exporting...' : 'Export Transactions'}</span>\r\n            </Button>\r\n            <Button\r\n              onClick={handleExportSummary}\r\n              disabled={isExporting}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Upload className=\"w-4 h-4\" />\r\n              <span>{isExporting ? 'Exporting...' : 'Export Summary'}</span>\r\n            </Button>\r\n          </div>\r\n          {exportError && (\r\n            <p className=\"text-red-600 text-sm mt-2\">{exportError}</p>\r\n          )}\r\n        </div> */}\r\n      </main>\r\n\r\n      {/* Budget Form Modal */}\r\n      {showBudgetForm && (\r\n        <Suspense fallback={<FullScreenSpinner text=\"Loading Budget Form...\" />}>\r\n          <BudgetForm\r\n            budget={selectedBudget}\r\n            onSave={(budget) => {\r\n              // TODO: Save budget\r\n              setShowBudgetForm(false);\r\n            }}\r\n            onCancel={() => setShowBudgetForm(false)}\r\n            isOpen={showBudgetForm}\r\n          />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { useMemo } from 'react';\r\nimport { Account, Transaction, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { calculateFinancialSummary, generateTrendData } from '../utils/periodCalculations';\r\nimport { filterTransactionsByAccountType } from '../utils/transactionUtils';\r\n\r\nexport interface DashboardData {\r\n  filteredAccounts: Account[];\r\n  filteredTotalBalance: number;\r\n  filteredSummary: FinancialSummary;\r\n  trendData: any;\r\n  allTransactions: Transaction[];\r\n  hasAccounts: boolean;\r\n}\r\n\r\nexport interface UseDashboardDataProps {\r\n  accounts: Account[];\r\n  accountFilter: 'personal' | 'business' | 'both';\r\n  selectedPeriod: TimePeriod;\r\n  customDateRange?: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const useDashboardData = ({\r\n  accounts,\r\n  accountFilter,\r\n  selectedPeriod,\r\n  customDateRange,\r\n  isLoading,\r\n}: UseDashboardDataProps): DashboardData => {\r\n  // Filter accounts based on accountFilter\r\n  const filteredAccounts = useMemo(() => {\r\n    return accounts.filter((account: Account) => {\r\n      if (accountFilter === 'both') return true;\r\n      if (accountFilter === 'personal')\r\n        return !account.type.includes('BUSINESS');\r\n      if (accountFilter === 'business')\r\n        return account.type.includes('BUSINESS');\r\n      return true;\r\n    });\r\n  }, [accounts, accountFilter]);\r\n\r\n  // Calculate filtered total balance\r\n  const filteredTotalBalance = useMemo(() => {\r\n    return filteredAccounts.reduce(\r\n      (sum: number, account: Account) => sum + account.balance,\r\n      0\r\n    );\r\n  }, [filteredAccounts]);\r\n\r\n  // Get all transactions from accounts\r\n  const allTransactions = useMemo(() => {\r\n    return accounts.flatMap(account => account.transactions || []);\r\n  }, [accounts]);\r\n\r\n  // Calculate filtered summary using utility functions\r\n  const filteredSummary = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return calculateFinancialSummary(\r\n      filteredTransactions,\r\n      selectedPeriod,\r\n      customDateRange,\r\n      filteredTotalBalance\r\n    );\r\n  }, [accounts, accountFilter, selectedPeriod, customDateRange, filteredTotalBalance]);\r\n\r\n  // Generate trend data using utility functions\r\n  const trendData = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return generateTrendData(filteredTransactions, selectedPeriod);\r\n  }, [accounts, accountFilter, selectedPeriod]);\r\n\r\n  const hasAccounts = accounts.length > 0;\r\n\r\n  return {\r\n    filteredAccounts,\r\n    filteredTotalBalance,\r\n    filteredSummary,\r\n    trendData,\r\n    allTransactions,\r\n    hasAccounts,\r\n  };\r\n}; ","import { useMemo, useState, useCallback } from 'react';\r\nimport { Transaction, Account, TimePeriod, FilterOptions } from '../types/financial';\r\nimport { exportTransactions, exportSummary } from '../utils/exportUtils';\r\n\r\nexport interface ChartData {\r\n  balanceTrend: any;\r\n  incomeExpense: any;\r\n  categorySpending: any;\r\n  summary: {\r\n    totalBalance: number;\r\n    totalIncome: number;\r\n    totalExpenses: number;\r\n    netFlow: number;\r\n    savingsRate: number;\r\n    topCategory: string;\r\n    topCategoryAmount: number;\r\n  };\r\n}\r\n\r\nexport const useCharts = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  filters: FilterOptions\r\n) => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [exportError, setExportError] = useState<string | null>(null);\r\n\r\n  // Calculate summary statistics\r\n  const summary = useMemo(() => {\r\n    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      // Apply basic period filtering (you can enhance this)\r\n      const transactionDate = new Date(t.date);\r\n      const now = new Date();\r\n      let startDate: Date;\r\n      \r\n      switch (period) {\r\n        case 'day':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n          break;\r\n        case 'week':\r\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n          break;\r\n        case 'month':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n          break;\r\n        case 'quarter':\r\n          const quarter = Math.floor(now.getMonth() / 3);\r\n          startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n          break;\r\n        case 'year':\r\n          startDate = new Date(now.getFullYear(), 0, 1);\r\n          break;\r\n        default:\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n      }\r\n      \r\n      return transactionDate >= startDate && transactionDate <= now;\r\n    });\r\n\r\n    const totalIncome = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const totalExpenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    const netFlow = totalIncome - totalExpenses;\r\n    const savingsRate = totalIncome > 0 ? (netFlow / totalIncome) * 100 : 0;\r\n\r\n    // Calculate top category\r\n    const categoryMap = new Map<string, number>();\r\n    periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .forEach(t => {\r\n        const category = t.category || 'Uncategorized';\r\n        categoryMap.set(category, (categoryMap.get(category) || 0) + Math.abs(t.amount));\r\n      });\r\n\r\n    const topCategory = Array.from(categoryMap.entries())\r\n      .sort(([, a], [, b]) => b - a)[0] || ['None', 0];\r\n\r\n    return {\r\n      totalBalance,\r\n      totalIncome,\r\n      totalExpenses,\r\n      netFlow,\r\n      savingsRate,\r\n      topCategory: topCategory[0],\r\n      topCategoryAmount: topCategory[1],\r\n    };\r\n  }, [transactions, accounts, period]);\r\n\r\n  // Export functionality\r\n  const handleExportTransactions = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      // Filter transactions based on current filters\r\n      let filteredTransactions = [...transactions];\r\n      \r\n      // Apply basic filtering (you can enhance this based on your FilterOptions)\r\n      if (filters.dateRange) {\r\n        filteredTransactions = filteredTransactions.filter(t => {\r\n          const transactionDate = new Date(t.date);\r\n          const startDate = new Date(filters.dateRange!.start);\r\n          const endDate = new Date(filters.dateRange!.end);\r\n          return transactionDate >= startDate && transactionDate <= endDate;\r\n        });\r\n      }\r\n      \r\n      if (filters.categories && filters.categories.length > 0) {\r\n        filteredTransactions = filteredTransactions.filter(t =>\r\n          filters.categories!.includes(t.category)\r\n        );\r\n      }\r\n      \r\n      const filename = `transactions_${period}_${new Date().toISOString().split('T')[0]}.csv`;\r\n      exportTransactions(filteredTransactions, filename);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [transactions, filters, period]);\r\n\r\n  const handleExportSummary = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      const summaryData = {\r\n        totalBalance: summary.totalBalance,\r\n        totalIncome: summary.totalIncome,\r\n        totalExpenses: summary.totalExpenses,\r\n        netSavings: summary.netFlow,\r\n        period: period,\r\n      };\r\n      \r\n      const filename = `financial_summary_${period}_${new Date().toISOString().split('T')[0]}.csv`;\r\n      exportSummary(summaryData, filename);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [summary, period]);\r\n\r\n  // Chart data processing\r\n  const chartData = useMemo((): ChartData => {\r\n    return {\r\n      balanceTrend: {\r\n        transactions,\r\n        accounts,\r\n        period,\r\n      },\r\n      incomeExpense: {\r\n        transactions,\r\n        period,\r\n      },\r\n      categorySpending: {\r\n        transactions,\r\n        period,\r\n      },\r\n      summary,\r\n    };\r\n  }, [transactions, accounts, period, summary]);\r\n\r\n  // Refresh functionality\r\n  const refreshCharts = useCallback(() => {\r\n    // This would typically trigger a data refresh\r\n    // For now, we'll just return a promise that resolves immediately\r\n    return Promise.resolve();\r\n  }, []);\r\n\r\n  return {\r\n    chartData,\r\n    summary,\r\n    isExporting,\r\n    exportError,\r\n    handleExportTransactions,\r\n    handleExportSummary,\r\n    refreshCharts,\r\n  };\r\n}; ","import React from 'react';\r\nimport { useFinancial } from '../../contexts/FinancialContext';\r\nimport { ThemeToggle } from '../ui/ThemeToggle';\r\nimport { Bell, Eye, EyeOff, RefreshCw, LogOut } from 'lucide-react';\r\n\r\n/**\r\n * DashboardHeader - Main Navigation Header\r\n * \r\n * Layout Changes (Sprint 6):\r\n * - Temporarily hidden DateRangePicker for improved layout focus\r\n * - Maintained all other functionality and accessibility features\r\n * - Period selector remains available in main dashboard area\r\n */\r\n\r\nexport const DashboardHeader: React.FC = () => {\r\n  const {\r\n    state,\r\n    isPrivacyMode,\r\n    togglePrivacyMode,\r\n    accountFilter,\r\n    setAccountFilter,\r\n  } = useFinancial();\r\n\r\n  const handleRefresh = () => {\r\n    // For now, just show an alert. In a real app, this would refresh the data\r\n    alert('Refreshing data...');\r\n  };\r\n\r\n  // Check if we're in demo mode\r\n  const isDemoMode = localStorage.getItem('financeapp-demo-mode') === 'true' || \r\n                    new URLSearchParams(window.location.search).get('demo') === 'true';\r\n\r\n  const handleExitDemo = () => {\r\n    // Clear demo mode and redirect to login\r\n    localStorage.removeItem('financeapp-demo-mode');\r\n    window.location.href = '/';\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-white shadow-sm border-b sticky top-0 z-40\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex items-center justify-between h-16\">\r\n          {/* Logo and Brand */}\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 flex items-center\">\r\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mr-3\">\r\n                <span className=\"text-white font-bold text-sm\">F</span>\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-xl font-semibold text-gray-900\">\r\n                  FinanceApp\r\n                </h1>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded\">\r\n                    DEMO\r\n                  </span>\r\n                  {isDemoMode && (\r\n                    <button\r\n                      onClick={handleExitDemo}\r\n                      className=\"text-xs bg-red-100 text-red-800 px-2 py-0.5 rounded hover:bg-red-200 transition-colors flex items-center space-x-1\"\r\n                      title=\"Exit Demo Mode\"\r\n                    >\r\n                      <LogOut className=\"w-3 h-3\" />\r\n                      <span>Exit Demo</span>\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Account Type Filter - Centered */}\r\n          {state.accounts.length > 0 && (\r\n            <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\r\n              <button\r\n                onClick={() => setAccountFilter('personal')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'personal'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Personal\r\n              </button>\r\n              <button\r\n                onClick={() => setAccountFilter('business')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'business'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Business\r\n              </button>\r\n              <button\r\n                onClick={() => setAccountFilter('both')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'both'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Both\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Theme Toggle - Hidden for now */}\r\n            {/* <ThemeToggle /> */}\r\n\r\n            {/* Refresh Button */}\r\n            <button\r\n              onClick={handleRefresh}\r\n              className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors\"\r\n              title=\"Refresh data\"\r\n            >\r\n              <RefreshCw className=\"w-5 h-5\" />\r\n            </button>\r\n\r\n            {/* Privacy Toggle */}\r\n            <button\r\n              onClick={togglePrivacyMode}\r\n              className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors\"\r\n              title={isPrivacyMode ? 'Show amounts' : 'Hide amounts'}\r\n            >\r\n              {isPrivacyMode ? (\r\n                <EyeOff className=\"w-5 h-5\" />\r\n              ) : (\r\n                <Eye className=\"w-5 h-5\" />\r\n              )}\r\n            </button>\r\n\r\n            {/* Notifications */}\r\n            <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors relative\">\r\n              <Bell className=\"w-5 h-5\" />\r\n              <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\r\n            </button>\r\n\r\n            {/* User Avatar */}\r\n            <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\r\n              <span className=\"text-white text-sm font-medium\">JD</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Date Range Picker - Temporarily hidden for layout improvement */}\r\n      {/* <DateRangePicker\r\n        value={state.customDateRange ? {\r\n          startDate: new Date(state.customDateRange.startDate),\r\n          endDate: new Date(state.customDateRange.endDate),\r\n          label: state.customDateRange.label,\r\n        } : undefined}\r\n        onChange={handleDateRangeSelect}\r\n        onClose={() => setIsDatePickerOpen(false)}\r\n      /> */}\r\n    </header>\r\n  );\r\n};\r\n"],"names":["MockBudgetService","constructor","budgets","alerts","console","log","this","generateMockBudgets","category","amount","spent","period","forEach","data","index","push","id","userId","startDate","Date","toISOString","endDate","now","remaining","isActive","createdAt","updatedAt","createBudget","budgetData","Promise","resolve","setTimeout","budget","getBudgets","length","filter","getBudget","find","updateBudget","updates","findIndex","Error","deleteBudget","splice","getBudgetProgress","budgetId","b","percentageUsed","isOverBudget","daysRemaining","Math","ceil","getTime","projectedSpending","max","getBudgetSummary","userBudgets","totalBudgeted","reduce","sum","totalSpent","totalRemaining","overBudgetCategories","map","upcomingAlerts","alert","some","triggered","totalBudgets","calculateBudgetSpending","transactions","relevantTransactions","tx","date","abs","createBudgetAlert","alertData","getBudgetAlerts","updateBudgetAlert","alertId","subscribeToBudgets","callback","subscribeToBudgetProgress","async","progress","FirebaseBudgetService","config","getUserBudgetsCollection","collection","db","getBudgetDocRef","doc","convertTimestamp","timestamp","toDate","convertToTimestamp","dateString","Timestamp","fromDate","convertFirestoreToBudget","serverTimestamp","budgetsRef","budgetDoc","docRef","addDoc","budgetSnap","getDoc","exists","error","getDocs","docs","budgetRef","updatedBudget","updateDoc","deleteDoc","activeBudgets","flatMap","updatedAlerts","budgetWithAlert","updatedAlert","onSnapshot","snapshot","createBudgetService","useMockData","useBudget","arguments","undefined","currentUser","useAuth","setBudgets","useState","budgetSummary","setBudgetSummary","selectedBudget","setSelectedBudget","isLoading","setIsLoading","isCreating","setIsCreating","isUpdating","setIsUpdating","isDeleting","setIsDeleting","setError","budgetService","useMemo","_config$useMockData","localStorage","getItem","URLSearchParams","window","location","search","get","useEffect","budgetsData","summaryData","all","err","message","loadBudgets","updatedBudgets","useCallback","newBudget","prev","summary","errorMessage","success","selectBudget","refreshBudgets","clearError","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Filler","BaseChart","_ref","type","options","height","width","className","onChartClick","loading","chartRef","useRef","chartInstance","setChartInstance","current","handleClick","event","elements","mergedOptions","getDefaultOptions","baseOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","usePointStyle","padding","font","size","color","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","cornerRadius","displayColors","callbacks","label","context","dataset","parsed","y","toLocaleString","onClick","scales","x","grid","display","ticks","maxRotation","beginAtZero","value","point","radius","hoverRadius","line","tension","cutout","percentage","a","toFixed","_jsx","style","children","_jsxs","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","Chart","ref","CHART_COLORS","primary","secondary","accent","danger","warning","info","purple","pink","gray","lightGray","darkGray","blue","red","orange","green","processBalanceTrendData","accounts","dataPoints","dataPointsArray","totalBalance","account","balance","subDays","subWeeks","subMonths","subQuarters","subYears","i","currentDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","t","format","getDateFormat","processIncomeExpenseData","incomeData","expenseData","periodStart","getPeriodStart","periodEnd","getPeriodEnd","periodTransactions","transactionDate","income","expenses","processCategorySpendingData","categoryMap","Map","transaction","set","Array","from","entries","sort","slice","startOfDay","startOfWeek","startOfMonth","startOfQuarter","startOfYear","endOfDay","endOfWeek","endOfMonth","endOfQuarter","endOfYear","BudgetVsActualChart","onDataPointClick","chartData","datasets","budgetVsActual","actualSpending","budgeted","actual","item","budgetedData","actualData","borderRadius","borderSkipped","chartOptions","title","datasetIndex","status","minRotation","interaction","intersect","mode","handleChartClick","dataIndex","ChartFactory","chartType","customOptions","chartConfig","getChartConfig","_","Object","values","keys","getBaseOptions","dataPoint","getChartType","charAt","toUpperCase","description","CHART_CONFIGS","ChartContainer","onExport","onRefresh","expandedChart","setExpandedChart","isRefreshing","setIsRefreshing","handleRefresh","handleDataPointClick","isExpanded","Button","disabled","variant","Download","RefreshCw","toggleChartExpansion","_Fragment","Minimize2","Maximize2","fillRule","clipRule","defaultExportOptions","includeHeaders","dateFormat","currencyFormat","convertToCSV","headers","csvHeaders","header","join","row","replace","toString","split","JSON","stringify","formatCurrency","currency","Intl","NumberFormat","formatDate","year","month","String","padStart","day","downloadFile","content","filename","blob","Blob","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","exportTransactions","csvContent","opts","_transaction$tags","_transaction$cleanMer","Description","Amount","Category","AccountID","accountId","Tags","tags","Merchant","cleanMerchant","cleanName","TransactionID","Status","pending","Notes","notes","exportTransactionsToCSV","exportSummary","Period","TotalBalance","TotalIncome","totalIncome","TotalExpenses","totalExpenses","NetSavings","netSavings","exportSummaryToCSV","AccountDetail","React","then","module","default","KPISection","AccountOverview","RecentActivity","BudgetOverview","BudgetForm","Dashboard","state","viewAccountDetail","accountFilter","changePeriod","useFinancial","showBudgetForm","setShowBudgetForm","dashboardData","selectedPeriod","customDateRange","filteredAccounts","includes","filteredTotalBalance","allTransactions","filteredSummary","filteredTransactions","filterTransactionsByAccountType","calculateFinancialSummary","trendData","generateTrendData","hasAccounts","useDashboardData","isExporting","exportError","handleExportTransactions","handleExportSummary","refreshCharts","useCharts","filters","setIsExporting","setExportError","quarter","floor","netFlow","savingsRate","topCategory","_ref2","topCategoryAmount","dateRange","start","end","categories","balanceTrend","incomeExpense","categorySpending","isDemoMode","currentScreen","Suspense","fallback","FullScreenSpinner","text","DashboardHeader","removeItem","DEFAULT_PERIODS","InlineSpinner","incomeTrend","expenseTrend","savingsTrend","savings","onAccountSelect","Plus","onBudgetSelect","limit","onSave","onCancel","isOpen","Building","isPrivacyMode","togglePrivacyMode","setAccountFilter","handleExitDemo","LogOut","EyeOff","Eye","Bell"],"sourceRoot":""}