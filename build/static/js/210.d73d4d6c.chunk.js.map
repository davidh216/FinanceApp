{"version":3,"file":"static/js/210.d73d4d6c.chunk.js","mappings":"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","sources":["services/budgetService.ts","hooks/useBudget.ts","components/ui/DateRangePicker.tsx","components/ui/ThemeToggle.tsx","components/dashboard/DashboardHeader.tsx","components/charts/BaseChart.tsx","utils/chartUtils.ts","components/charts/BudgetVsActualChart.tsx","components/charts/ChartFactory.tsx","components/charts/ChartContainer.tsx","utils/exportUtils.ts","hooks/useCharts.ts","components/dashboard/Dashboard.tsx","hooks/useDashboardData.ts"],"sourcesContent":["import { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { \r\n  getDocs, \r\n  getDoc, \r\n  setDoc, \r\n  updateDoc, \r\n  deleteDoc, \r\n  query, \r\n  where, \r\n  orderBy, \r\n  limit, \r\n  onSnapshot,\r\n  addDoc,\r\n  serverTimestamp,\r\n  Timestamp,\r\n  QueryConstraint,\r\n  DocumentData,\r\n  collection,\r\n  doc\r\n} from 'firebase/firestore';\r\nimport { db } from '../config/firebase';\r\n\r\nexport interface BudgetServiceConfig {\r\n  useMockData: boolean;\r\n  apiBaseUrl?: string;\r\n  apiKey?: string;\r\n}\r\n\r\nexport interface BudgetServiceResponse<T> {\r\n  data: T;\r\n  error?: string;\r\n  loading: boolean;\r\n}\r\n\r\nexport interface BudgetService {\r\n  // Budget operations\r\n  createBudget(budget: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget>;\r\n  getBudgets(userId: string): Promise<Budget[]>;\r\n  getBudget(id: string): Promise<Budget | null>;\r\n  updateBudget(id: string, updates: Partial<Budget>): Promise<Budget>;\r\n  deleteBudget(id: string): Promise<boolean>;\r\n  \r\n  // Budget progress and analytics\r\n  getBudgetProgress(budgetId: string): Promise<BudgetProgress>;\r\n  getBudgetSummary(userId: string): Promise<BudgetSummary>;\r\n  calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert(budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert>;\r\n  getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]>;\r\n  updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert>;\r\n  \r\n  // Real-time subscriptions\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void;\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void;\r\n}\r\n\r\nclass MockBudgetService implements BudgetService {\r\n  private budgets: Budget[] = [];\r\n  private alerts: BudgetAlert[] = [];\r\n\r\n  constructor() {\r\n    this.generateMockBudgets();\r\n  }\r\n\r\n  private generateMockBudgets(): void {\r\n    const categories = ['Food & Dining', 'Transportation', 'Shopping', 'Entertainment', 'Utilities', 'Healthcare'];\r\n    const periods: TimePeriod[] = ['month', 'quarter', 'year'];\r\n    \r\n    categories.forEach((category, index) => {\r\n      const period = periods[index % periods.length];\r\n      const amount = Math.random() * 1000 + 200; // $200-$1200\r\n      const spent = Math.random() * amount;\r\n      \r\n      this.budgets.push({\r\n        id: `budget-${index}`,\r\n        userId: 'mock-user',\r\n        category,\r\n        amount,\r\n        period,\r\n        startDate: new Date().toISOString(),\r\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n        spent,\r\n        remaining: amount - spent,\r\n        alerts: [],\r\n        isActive: true,\r\n        createdAt: new Date().toISOString(),\r\n        updatedAt: new Date().toISOString(),\r\n      });\r\n    });\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const budget: Budget = {\r\n      ...budgetData,\r\n      id: `budget-${Date.now()}`,\r\n      userId: 'mock-user',\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.budgets.push(budget);\r\n    return budget;\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    return this.budgets.filter(budget => budget.userId === userId);\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.budgets.find(budget => budget.id === id) || null;\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    this.budgets[index] = {\r\n      ...this.budgets[index],\r\n      ...updates,\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n    \r\n    return this.budgets[index];\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    \r\n    const index = this.budgets.findIndex(budget => budget.id === id);\r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n    \r\n    this.budgets.splice(index, 1);\r\n    return true;\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      throw new Error('Budget not found');\r\n    }\r\n    \r\n    const percentageUsed = (budget.spent / budget.amount) * 100;\r\n    const isOverBudget = budget.spent > budget.amount;\r\n    const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n    const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n    \r\n    return {\r\n      budgetId,\r\n      spent: budget.spent,\r\n      remaining: budget.remaining,\r\n      percentageUsed,\r\n      isOverBudget,\r\n      daysRemaining: Math.max(0, daysRemaining),\r\n      projectedSpending,\r\n    };\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const userBudgets = this.budgets.filter(budget => budget.userId === userId && budget.isActive);\r\n    const totalBudgeted = userBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n    const totalSpent = userBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n    const totalRemaining = totalBudgeted - totalSpent;\r\n    const overBudgetCategories = userBudgets\r\n      .filter(budget => budget.spent > budget.amount)\r\n      .map(budget => budget.category);\r\n    \r\n    const upcomingAlerts = this.alerts.filter(alert => \r\n      userBudgets.some(budget => budget.id === alert.id && !alert.triggered)\r\n    );\r\n    \r\n    return {\r\n      totalBudgets: userBudgets.length,\r\n      totalBudgeted,\r\n      totalSpent,\r\n      totalRemaining,\r\n      overBudgetCategories,\r\n      upcomingAlerts,\r\n    };\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    \r\n    const budget = this.budgets.find(b => b.id === budgetId);\r\n    if (!budget) {\r\n      return 0;\r\n    }\r\n    \r\n    // Filter transactions by category and date range\r\n    const relevantTransactions = transactions.filter(tx => \r\n      tx.category === budget.category &&\r\n      new Date(tx.date) >= new Date(budget.startDate) &&\r\n      new Date(tx.date) <= new Date(budget.endDate) &&\r\n      tx.amount < 0 // Only expenses\r\n    );\r\n    \r\n    return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const alert: BudgetAlert = {\r\n      ...alertData,\r\n      id: `alert-${Date.now()}`,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n    \r\n    this.alerts.push(alert);\r\n    return alert;\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    await new Promise(resolve => setTimeout(resolve, 50));\r\n    return this.alerts.filter(alert => alert.id === budgetId);\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const index = this.alerts.findIndex(alert => alert.id === alertId);\r\n    if (index === -1) {\r\n      throw new Error('Alert not found');\r\n    }\r\n    \r\n    this.alerts[index] = {\r\n      ...this.alerts[index],\r\n      ...updates,\r\n    };\r\n    \r\n    return this.alerts[index];\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(() => {\r\n      const userBudgets = this.budgets.filter(budget => budget.userId === userId);\r\n      callback(userBudgets);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    // Mock subscription - just call once with current data\r\n    setTimeout(async () => {\r\n      const progress = await this.getBudgetProgress(budgetId);\r\n      callback(progress);\r\n    }, 100);\r\n    \r\n    // Return unsubscribe function\r\n    return () => {};\r\n  }\r\n}\r\n\r\nclass FirebaseBudgetService implements BudgetService {\r\n  private config: BudgetServiceConfig;\r\n  private userId: string;\r\n\r\n  constructor(config: BudgetServiceConfig, userId: string) {\r\n    this.config = config;\r\n    this.userId = userId;\r\n  }\r\n\r\n  private getUserBudgetsCollection() {\r\n    return collection(db, 'users', this.userId, 'budgets');\r\n  }\r\n\r\n  private getBudgetDocRef(budgetId: string) {\r\n    return doc(db, 'users', this.userId, 'budgets', budgetId);\r\n  }\r\n\r\n  private convertTimestamp(timestamp: Timestamp | string): string {\r\n    if (typeof timestamp === 'string') return timestamp;\r\n    return timestamp.toDate().toISOString();\r\n  }\r\n\r\n  private convertToTimestamp(dateString: string): Timestamp {\r\n    return Timestamp.fromDate(new Date(dateString));\r\n  }\r\n\r\n  private convertFirestoreToBudget(doc: DocumentData): Budget {\r\n    const data = doc.data();\r\n    return {\r\n      id: doc.id,\r\n      userId: data.userId,\r\n      category: data.category,\r\n      amount: data.amount,\r\n      period: data.period,\r\n      startDate: this.convertTimestamp(data.startDate),\r\n      endDate: this.convertTimestamp(data.endDate),\r\n      spent: data.spent || 0,\r\n      remaining: data.remaining || data.amount,\r\n      alerts: data.alerts || [],\r\n      isActive: data.isActive !== false,\r\n      createdAt: this.convertTimestamp(data.createdAt || serverTimestamp()),\r\n      updatedAt: this.convertTimestamp(data.updatedAt || serverTimestamp()),\r\n    };\r\n  }\r\n\r\n  async createBudget(budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>): Promise<Budget> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const budgetDoc = {\r\n        ...budgetData,\r\n        userId: this.userId,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      const docRef = await addDoc(budgetsRef, budgetDoc);\r\n      const budgetSnap = await getDoc(docRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Failed to create budget');\r\n    } catch (error) {\r\n      console.error('Error creating budget:', error);\r\n      throw new Error('Failed to create budget');\r\n    }\r\n  }\r\n\r\n  async getBudgets(userId: string): Promise<Budget[]> {\r\n    try {\r\n      const budgetsRef = this.getUserBudgetsCollection();\r\n      const querySnapshot = await getDocs(budgetsRef);\r\n      \r\n      return querySnapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n    } catch (error) {\r\n      console.error('Error fetching budgets:', error);\r\n      throw new Error('Failed to fetch budgets');\r\n    }\r\n  }\r\n\r\n  async getBudget(id: string): Promise<Budget | null> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      \r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Error fetching budget:', error);\r\n      throw new Error('Failed to fetch budget');\r\n    }\r\n  }\r\n\r\n  async updateBudget(id: string, updates: Partial<Budget>): Promise<Budget> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      const updatedBudget = {\r\n        ...updates,\r\n        updatedAt: serverTimestamp(),\r\n      };\r\n      \r\n      await updateDoc(budgetRef, updatedBudget);\r\n      \r\n      // Fetch updated budget\r\n      const budgetSnap = await getDoc(budgetRef);\r\n      if (budgetSnap.exists()) {\r\n        return this.convertFirestoreToBudget(budgetSnap);\r\n      }\r\n      \r\n      throw new Error('Budget not found');\r\n    } catch (error) {\r\n      console.error('Error updating budget:', error);\r\n      throw new Error('Failed to update budget');\r\n    }\r\n  }\r\n\r\n  async deleteBudget(id: string): Promise<boolean> {\r\n    try {\r\n      const budgetRef = this.getBudgetDocRef(id);\r\n      await deleteDoc(budgetRef);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting budget:', error);\r\n      throw new Error('Failed to delete budget');\r\n    }\r\n  }\r\n\r\n  async getBudgetProgress(budgetId: string): Promise<BudgetProgress> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const percentageUsed = (budget.spent / budget.amount) * 100;\r\n      const isOverBudget = budget.spent > budget.amount;\r\n      const daysRemaining = Math.ceil((new Date(budget.endDate).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\r\n      const projectedSpending = budget.spent + (budget.spent / (30 - daysRemaining)) * daysRemaining;\r\n      \r\n      return {\r\n        budgetId,\r\n        spent: budget.spent,\r\n        remaining: budget.remaining,\r\n        percentageUsed,\r\n        isOverBudget,\r\n        daysRemaining: Math.max(0, daysRemaining),\r\n        projectedSpending,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget progress:', error);\r\n      throw new Error('Failed to calculate budget progress');\r\n    }\r\n  }\r\n\r\n  async getBudgetSummary(userId: string): Promise<BudgetSummary> {\r\n    try {\r\n      const budgets = await this.getBudgets(userId);\r\n      const activeBudgets = budgets.filter(budget => budget.isActive);\r\n      \r\n      const totalBudgeted = activeBudgets.reduce((sum, budget) => sum + budget.amount, 0);\r\n      const totalSpent = activeBudgets.reduce((sum, budget) => sum + budget.spent, 0);\r\n      const totalRemaining = totalBudgeted - totalSpent;\r\n      const overBudgetCategories = activeBudgets\r\n        .filter(budget => budget.spent > budget.amount)\r\n        .map(budget => budget.category);\r\n      \r\n      const upcomingAlerts = activeBudgets.flatMap(budget => \r\n        budget.alerts.filter(alert => !alert.triggered)\r\n      );\r\n      \r\n      return {\r\n        totalBudgets: activeBudgets.length,\r\n        totalBudgeted,\r\n        totalSpent,\r\n        totalRemaining,\r\n        overBudgetCategories,\r\n        upcomingAlerts,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error calculating budget summary:', error);\r\n      throw new Error('Failed to calculate budget summary');\r\n    }\r\n  }\r\n\r\n  async calculateBudgetSpending(budgetId: string, transactions: any[]): Promise<number> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        return 0;\r\n      }\r\n      \r\n      // Filter transactions by category and date range\r\n      const relevantTransactions = transactions.filter(tx => \r\n        tx.category === budget.category &&\r\n        new Date(tx.date) >= new Date(budget.startDate) &&\r\n        new Date(tx.date) <= new Date(budget.endDate) &&\r\n        tx.amount < 0 // Only expenses\r\n      );\r\n      \r\n      return Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n    } catch (error) {\r\n      console.error('Error calculating budget spending:', error);\r\n      throw new Error('Failed to calculate budget spending');\r\n    }\r\n  }\r\n\r\n  async createBudgetAlert(budgetId: string, alertData: Omit<BudgetAlert, 'id' | 'createdAt'>): Promise<BudgetAlert> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      if (!budget) {\r\n        throw new Error('Budget not found');\r\n      }\r\n      \r\n      const alert: BudgetAlert = {\r\n        ...alertData,\r\n        id: `alert-${Date.now()}`,\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n      \r\n      // Add alert to budget\r\n      const updatedAlerts = [...budget.alerts, alert];\r\n      await this.updateBudget(budgetId, { alerts: updatedAlerts });\r\n      \r\n      return alert;\r\n    } catch (error) {\r\n      console.error('Error creating budget alert:', error);\r\n      throw new Error('Failed to create budget alert');\r\n    }\r\n  }\r\n\r\n  async getBudgetAlerts(budgetId: string): Promise<BudgetAlert[]> {\r\n    try {\r\n      const budget = await this.getBudget(budgetId);\r\n      return budget?.alerts || [];\r\n    } catch (error) {\r\n      console.error('Error fetching budget alerts:', error);\r\n      throw new Error('Failed to fetch budget alerts');\r\n    }\r\n  }\r\n\r\n  async updateBudgetAlert(alertId: string, updates: Partial<BudgetAlert>): Promise<BudgetAlert> {\r\n    try {\r\n      // Find budget containing this alert\r\n      const budgets = await this.getBudgets(this.userId);\r\n      const budgetWithAlert = budgets.find(budget => \r\n        budget.alerts.some(alert => alert.id === alertId)\r\n      );\r\n      \r\n      if (!budgetWithAlert) {\r\n        throw new Error('Alert not found');\r\n      }\r\n      \r\n      // Update the alert\r\n      const updatedAlerts = budgetWithAlert.alerts.map(alert => \r\n        alert.id === alertId ? { ...alert, ...updates } : alert\r\n      );\r\n      \r\n      await this.updateBudget(budgetWithAlert.id, { alerts: updatedAlerts });\r\n      \r\n      const updatedAlert = updatedAlerts.find(alert => alert.id === alertId);\r\n      if (!updatedAlert) {\r\n        throw new Error('Failed to update alert');\r\n      }\r\n      \r\n      return updatedAlert;\r\n    } catch (error) {\r\n      console.error('Error updating budget alert:', error);\r\n      throw new Error('Failed to update budget alert');\r\n    }\r\n  }\r\n\r\n  subscribeToBudgets(userId: string, callback: (budgets: Budget[]) => void): () => void {\r\n    const budgetsRef = this.getUserBudgetsCollection();\r\n    return onSnapshot(budgetsRef, (snapshot) => {\r\n      const budgets = snapshot.docs.map(doc => this.convertFirestoreToBudget(doc));\r\n      callback(budgets);\r\n    });\r\n  }\r\n\r\n  subscribeToBudgetProgress(budgetId: string, callback: (progress: BudgetProgress) => void): () => void {\r\n    const budgetRef = this.getBudgetDocRef(budgetId);\r\n    return onSnapshot(budgetRef, async (snapshot: any) => {\r\n      if (snapshot.exists()) {\r\n        const progress = await this.getBudgetProgress(budgetId);\r\n        callback(progress);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function createBudgetService(config: BudgetServiceConfig, userId?: string): BudgetService {\r\n  if (config.useMockData) {\r\n    return new MockBudgetService();\r\n  } else {\r\n    if (!userId) {\r\n      throw new Error('User ID is required for Firebase BudgetService');\r\n    }\r\n    return new FirebaseBudgetService(config, userId);\r\n  }\r\n}\r\n\r\n// Export classes for testing\r\nexport { MockBudgetService, FirebaseBudgetService };\r\n\r\n// Default export for convenience\r\nexport default createBudgetService; ","import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Budget, BudgetProgress, BudgetSummary, BudgetAlert, TimePeriod } from '../types/financial';\r\nimport { createBudgetService, BudgetServiceConfig } from '../services/budgetService';\r\nimport { useAuth } from '../contexts/AuthContext';\r\n\r\ninterface UseBudgetConfig {\r\n  useMockData?: boolean;\r\n}\r\n\r\ninterface UseBudgetReturn {\r\n  // Budget data\r\n  budgets: Budget[];\r\n  budgetSummary: BudgetSummary | null;\r\n  selectedBudget: Budget | null;\r\n  \r\n  // Loading states\r\n  isLoading: boolean;\r\n  isCreating: boolean;\r\n  isUpdating: boolean;\r\n  isDeleting: boolean;\r\n  \r\n  // Error states\r\n  error: string | null;\r\n  \r\n  // Budget operations\r\n  createBudget: (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => Promise<Budget>;\r\n  updateBudget: (id: string, updates: Partial<Budget>) => Promise<Budget>;\r\n  deleteBudget: (id: string) => Promise<boolean>;\r\n  selectBudget: (budget: Budget | null) => void;\r\n  \r\n  // Budget progress\r\n  getBudgetProgress: (budgetId: string) => Promise<BudgetProgress>;\r\n  calculateBudgetSpending: (budgetId: string, transactions: any[]) => Promise<number>;\r\n  \r\n  // Budget alerts\r\n  createBudgetAlert: (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => Promise<BudgetAlert>;\r\n  getBudgetAlerts: (budgetId: string) => Promise<BudgetAlert[]>;\r\n  updateBudgetAlert: (alertId: string, updates: Partial<BudgetAlert>) => Promise<BudgetAlert>;\r\n  \r\n  // Utility functions\r\n  refreshBudgets: () => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nexport const useBudget = (config: UseBudgetConfig = {}): UseBudgetReturn => {\r\n  const { currentUser } = useAuth();\r\n  const [budgets, setBudgets] = useState<Budget[]>([]);\r\n  const [budgetSummary, setBudgetSummary] = useState<BudgetSummary | null>(null);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [isUpdating, setIsUpdating] = useState(false);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Create budget service instance\r\n  const budgetService = useMemo(() => {\r\n    if (!currentUser?.id) return null;\r\n    \r\n    const serviceConfig: BudgetServiceConfig = {\r\n      useMockData: config.useMockData ?? true, // Default to mock data for development\r\n    };\r\n    \r\n    return createBudgetService(serviceConfig, currentUser.id);\r\n  }, [currentUser?.id, config.useMockData]);\r\n\r\n  // Load budgets on mount and when user changes\r\n  useEffect(() => {\r\n    if (!budgetService || !currentUser?.id) return;\r\n\r\n    const loadBudgets = async () => {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      try {\r\n        const [budgetsData, summaryData] = await Promise.all([\r\n          budgetService.getBudgets(currentUser.id),\r\n          budgetService.getBudgetSummary(currentUser.id),\r\n        ]);\r\n        \r\n        setBudgets(budgetsData);\r\n        setBudgetSummary(summaryData);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to load budgets');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBudgets();\r\n\r\n    // Subscribe to real-time updates\r\n    const unsubscribe = budgetService.subscribeToBudgets(currentUser.id, (updatedBudgets) => {\r\n      setBudgets(updatedBudgets);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  // Budget operations\r\n  const createBudget = useCallback(async (budgetData: Omit<Budget, 'id' | 'userId' | 'createdAt' | 'updatedAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsCreating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const newBudget = await budgetService.createBudget(budgetData);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => [...prev, newBudget]);\r\n      \r\n      // Refresh summary\r\n      if (currentUser?.id) {\r\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return newBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to create budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsCreating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const updateBudget = useCallback(async (id: string, updates: Partial<Budget>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsUpdating(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const updatedBudget = await budgetService.updateBudget(id, updates);\r\n      \r\n      // Update local state\r\n      setBudgets(prev => prev.map(budget => \r\n        budget.id === id ? updatedBudget : budget\r\n      ));\r\n      \r\n      // Update selected budget if it's the one being updated\r\n      if (selectedBudget?.id === id) {\r\n        setSelectedBudget(updatedBudget);\r\n      }\r\n      \r\n      // Refresh summary\r\n      if (currentUser?.id) {\r\n        const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n        setBudgetSummary(summary);\r\n      }\r\n      \r\n      return updatedBudget;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsUpdating(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const deleteBudget = useCallback(async (id: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n\r\n    setIsDeleting(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const success = await budgetService.deleteBudget(id);\r\n      \r\n      if (success) {\r\n        // Update local state\r\n        setBudgets(prev => prev.filter(budget => budget.id !== id));\r\n        \r\n        // Clear selected budget if it's the one being deleted\r\n        if (selectedBudget?.id === id) {\r\n          setSelectedBudget(null);\r\n        }\r\n        \r\n        // Refresh summary\r\n        if (currentUser?.id) {\r\n          const summary = await budgetService.getBudgetSummary(currentUser.id);\r\n          setBudgetSummary(summary);\r\n        }\r\n      }\r\n      \r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete budget';\r\n      setError(errorMessage);\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsDeleting(false);\r\n    }\r\n  }, [budgetService, currentUser?.id, selectedBudget]);\r\n\r\n  const selectBudget = useCallback((budget: Budget | null) => {\r\n    setSelectedBudget(budget);\r\n  }, []);\r\n\r\n  // Budget progress operations\r\n  const getBudgetProgress = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetProgress(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const calculateBudgetSpending = useCallback(async (budgetId: string, transactions: any[]) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.calculateBudgetSpending(budgetId, transactions);\r\n  }, [budgetService]);\r\n\r\n  // Budget alert operations\r\n  const createBudgetAlert = useCallback(async (budgetId: string, alert: Omit<BudgetAlert, 'id' | 'createdAt'>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.createBudgetAlert(budgetId, alert);\r\n  }, [budgetService]);\r\n\r\n  const getBudgetAlerts = useCallback(async (budgetId: string) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.getBudgetAlerts(budgetId);\r\n  }, [budgetService]);\r\n\r\n  const updateBudgetAlert = useCallback(async (alertId: string, updates: Partial<BudgetAlert>) => {\r\n    if (!budgetService) {\r\n      throw new Error('Budget service not available');\r\n    }\r\n    \r\n    return await budgetService.updateBudgetAlert(alertId, updates);\r\n  }, [budgetService]);\r\n\r\n  // Utility functions\r\n  const refreshBudgets = useCallback(async () => {\r\n    if (!budgetService || !currentUser?.id) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const [budgetsData, summaryData] = await Promise.all([\r\n        budgetService.getBudgets(currentUser.id),\r\n        budgetService.getBudgetSummary(currentUser.id),\r\n      ]);\r\n      \r\n      setBudgets(budgetsData);\r\n      setBudgetSummary(summaryData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Failed to refresh budgets');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [budgetService, currentUser?.id]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  return {\r\n    // Budget data\r\n    budgets,\r\n    budgetSummary,\r\n    selectedBudget,\r\n    \r\n    // Loading states\r\n    isLoading,\r\n    isCreating,\r\n    isUpdating,\r\n    isDeleting,\r\n    \r\n    // Error states\r\n    error,\r\n    \r\n    // Budget operations\r\n    createBudget,\r\n    updateBudget,\r\n    deleteBudget,\r\n    selectBudget,\r\n    \r\n    // Budget progress\r\n    getBudgetProgress,\r\n    calculateBudgetSpending,\r\n    \r\n    // Budget alerts\r\n    createBudgetAlert,\r\n    getBudgetAlerts,\r\n    updateBudgetAlert,\r\n    \r\n    // Utility functions\r\n    refreshBudgets,\r\n    clearError,\r\n  };\r\n}; ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { format, subDays, subWeeks, subMonths, startOfDay, endOfDay } from 'date-fns';\r\nimport { Calendar, ChevronLeft, ChevronRight, X } from 'lucide-react';\r\nimport { Button } from './Button';\r\n\r\nexport interface DateRange {\r\n  startDate: Date;\r\n  endDate: Date;\r\n  label: string;\r\n}\r\n\r\ninterface DateRangePickerProps {\r\n  value?: DateRange;\r\n  onChange: (range: DateRange) => void;\r\n  onClose?: () => void;\r\n  className?: string;\r\n}\r\n\r\nconst PRESET_RANGES = [\r\n  {\r\n    label: 'Today',\r\n    getRange: () => ({\r\n      startDate: startOfDay(new Date()),\r\n      endDate: endOfDay(new Date()),\r\n    }),\r\n  },\r\n  {\r\n    label: 'Yesterday',\r\n    getRange: () => ({\r\n      startDate: startOfDay(subDays(new Date(), 1)),\r\n      endDate: endOfDay(subDays(new Date(), 1)),\r\n    }),\r\n  },\r\n  {\r\n    label: 'Last 7 days',\r\n    getRange: () => ({\r\n      startDate: startOfDay(subDays(new Date(), 6)),\r\n      endDate: endOfDay(new Date()),\r\n    }),\r\n  },\r\n  {\r\n    label: 'Last 30 days',\r\n    getRange: () => ({\r\n      startDate: startOfDay(subDays(new Date(), 29)),\r\n      endDate: endOfDay(new Date()),\r\n    }),\r\n  },\r\n  {\r\n    label: 'Last 90 days',\r\n    getRange: () => ({\r\n      startDate: startOfDay(subDays(new Date(), 89)),\r\n      endDate: endOfDay(new Date()),\r\n    }),\r\n  },\r\n  {\r\n    label: 'This month',\r\n    getRange: () => ({\r\n      startDate: startOfDay(new Date(new Date().getFullYear(), new Date().getMonth(), 1)),\r\n      endDate: endOfDay(new Date()),\r\n    }),\r\n  },\r\n  {\r\n    label: 'Last month',\r\n    getRange: () => {\r\n      const now = new Date();\r\n      const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n      return {\r\n        startDate: startOfDay(lastMonth),\r\n        endDate: endOfDay(new Date(now.getFullYear(), now.getMonth(), 0)),\r\n      };\r\n    },\r\n  },\r\n];\r\n\r\nexport const DateRangePicker: React.FC<DateRangePickerProps> = ({\r\n  value,\r\n  onChange,\r\n  onClose,\r\n  className = '',\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [tempRange, setTempRange] = useState<DateRange | null>(value || null);\r\n  const [currentMonth, setCurrentMonth] = useState(new Date());\r\n  const pickerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (pickerRef.current && !pickerRef.current.contains(event.target as Node)) {\r\n        setIsOpen(false);\r\n        onClose?.();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      setTempRange(value);\r\n    }\r\n  }, [value]);\r\n\r\n  const handlePresetClick = (preset: typeof PRESET_RANGES[0]) => {\r\n    const range = preset.getRange();\r\n    const newRange: DateRange = {\r\n      ...range,\r\n      label: preset.label,\r\n    };\r\n    setTempRange(newRange);\r\n    onChange(newRange);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleApply = () => {\r\n    if (tempRange) {\r\n      onChange(tempRange);\r\n      setIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setTempRange(value || null);\r\n    setIsOpen(false);\r\n    onClose?.();\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setTempRange(null);\r\n    onChange({\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      label: 'Custom',\r\n    });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const navigateMonth = (direction: 'prev' | 'next') => {\r\n    setCurrentMonth(prev => {\r\n      const newMonth = new Date(prev);\r\n      if (direction === 'prev') {\r\n        newMonth.setMonth(newMonth.getMonth() - 1);\r\n      } else {\r\n        newMonth.setMonth(newMonth.getMonth() + 1);\r\n      }\r\n      return newMonth;\r\n    });\r\n  };\r\n\r\n  const getDaysInMonth = (date: Date) => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth();\r\n    const firstDay = new Date(year, month, 1);\r\n    const lastDay = new Date(year, month + 1, 0);\r\n    const daysInMonth = lastDay.getDate();\r\n    const startingDayOfWeek = firstDay.getDay();\r\n\r\n    const days = [];\r\n    \r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < startingDayOfWeek; i++) {\r\n      days.push(null);\r\n    }\r\n\r\n    // Add all days in the month\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      days.push(new Date(year, month, i));\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const isDateInRange = (date: Date) => {\r\n    if (!tempRange) return false;\r\n    return date >= tempRange.startDate && date <= tempRange.endDate;\r\n  };\r\n\r\n  const isDateSelected = (date: Date) => {\r\n    if (!tempRange) return false;\r\n    return (\r\n      format(date, 'yyyy-MM-dd') === format(tempRange.startDate, 'yyyy-MM-dd') ||\r\n      format(date, 'yyyy-MM-dd') === format(tempRange.endDate, 'yyyy-MM-dd')\r\n    );\r\n  };\r\n\r\n  const handleDateClick = (date: Date) => {\r\n    if (!tempRange) {\r\n      setTempRange({\r\n        startDate: date,\r\n        endDate: date,\r\n        label: 'Custom',\r\n      });\r\n    } else if (date < tempRange.startDate) {\r\n      setTempRange({\r\n        ...tempRange,\r\n        startDate: date,\r\n      });\r\n    } else {\r\n      setTempRange({\r\n        ...tempRange,\r\n        endDate: date,\r\n      });\r\n    }\r\n  };\r\n\r\n  const displayValue = value ? `${format(value.startDate, 'MMM dd')} - ${format(value.endDate, 'MMM dd')}` : 'Select date range';\r\n\r\n  return (\r\n    <div className={`relative ${className}`} ref={pickerRef}>\r\n      <Button\r\n        variant=\"outline\"\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className=\"flex items-center space-x-2 min-w-[200px] justify-between\"\r\n      >\r\n        <Calendar className=\"w-4 h-4\" />\r\n        <span className=\"truncate\">{displayValue}</span>\r\n        {value && (\r\n          <X\r\n            className=\"w-4 h-4 text-gray-400 hover:text-gray-600\"\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              handleClear();\r\n            }}\r\n          />\r\n        )}\r\n      </Button>\r\n\r\n      {isOpen && (\r\n        <div className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50 min-w-[600px]\">\r\n          <div className=\"p-4\">\r\n            <div className=\"flex gap-4\">\r\n              {/* Preset Ranges */}\r\n              <div className=\"w-48 border-r border-gray-200 pr-4\">\r\n                <h3 className=\"font-medium text-gray-900 mb-3\">Quick Select</h3>\r\n                <div className=\"space-y-2\">\r\n                  {PRESET_RANGES.map((preset) => (\r\n                    <button\r\n                      key={preset.label}\r\n                      onClick={() => handlePresetClick(preset)}\r\n                      className=\"w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded-md transition-colors\"\r\n                    >\r\n                      {preset.label}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Calendar */}\r\n              <div className=\"flex-1\">\r\n                <div className=\"flex items-center justify-between mb-4\">\r\n                  <button\r\n                    onClick={() => navigateMonth('prev')}\r\n                    className=\"p-1 hover:bg-gray-100 rounded\"\r\n                  >\r\n                    <ChevronLeft className=\"w-4 h-4\" />\r\n                  </button>\r\n                  <h3 className=\"font-medium text-gray-900\">\r\n                    {format(currentMonth, 'MMMM yyyy')}\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => navigateMonth('next')}\r\n                    className=\"p-1 hover:bg-gray-100 rounded\"\r\n                  >\r\n                    <ChevronRight className=\"w-4 h-4\" />\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Calendar Grid */}\r\n                <div className=\"grid grid-cols-7 gap-1 mb-4\">\r\n                  {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day) => (\r\n                    <div key={day} className=\"text-center text-xs font-medium text-gray-500 py-2\">\r\n                      {day}\r\n                    </div>\r\n                  ))}\r\n                  \r\n                  {getDaysInMonth(currentMonth).map((date, index) => (\r\n                    <div key={index} className=\"text-center\">\r\n                      {date ? (\r\n                        <button\r\n                          onClick={() => handleDateClick(date)}\r\n                          className={`w-8 h-8 text-sm rounded-full transition-colors ${\r\n                            isDateSelected(date)\r\n                              ? 'bg-blue-600 text-white'\r\n                              : isDateInRange(date)\r\n                              ? 'bg-blue-100 text-blue-900'\r\n                              : 'hover:bg-gray-100'\r\n                          }`}\r\n                        >\r\n                          {date.getDate()}\r\n                        </button>\r\n                      ) : (\r\n                        <div className=\"w-8 h-8\" />\r\n                      )}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                {/* Selected Range Display */}\r\n                {tempRange && (\r\n                  <div className=\"text-sm text-gray-600 mb-4\">\r\n                    <div>Start: {format(tempRange.startDate, 'MMM dd, yyyy')}</div>\r\n                    <div>End: {format(tempRange.endDate, 'MMM dd, yyyy')}</div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Action Buttons */}\r\n                <div className=\"flex justify-end space-x-2\">\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={handleCancel}>\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    size=\"sm\"\r\n                    onClick={handleApply}\r\n                    disabled={!tempRange}\r\n                  >\r\n                    Apply\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Moon, Sun, Eye, EyeOff } from 'lucide-react';\r\nimport { Button } from './Button';\r\n\r\ninterface ThemeToggleProps {\r\n  className?: string;\r\n}\r\n\r\ntype Theme = 'light' | 'dark' | 'high-contrast';\r\n\r\nexport const ThemeToggle: React.FC<ThemeToggleProps> = ({ className = '' }) => {\r\n  const [theme, setTheme] = useState<Theme>('light');\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Load saved theme from localStorage\r\n    const savedTheme = localStorage.getItem('finance-app-theme') as Theme;\r\n    if (savedTheme) {\r\n      setTheme(savedTheme);\r\n      applyTheme(savedTheme);\r\n    }\r\n  }, []);\r\n\r\n  const applyTheme = (newTheme: Theme) => {\r\n    const root = document.documentElement;\r\n    \r\n    // Remove all theme classes\r\n    root.classList.remove('theme-light', 'theme-dark', 'theme-high-contrast');\r\n    \r\n    // Add new theme class\r\n    root.classList.add(`theme-${newTheme}`);\r\n    \r\n    // Apply theme-specific styles\r\n    switch (newTheme) {\r\n      case 'dark':\r\n        root.style.setProperty('--bg-primary', '#1f2937');\r\n        root.style.setProperty('--bg-secondary', '#374151');\r\n        root.style.setProperty('--text-primary', '#f9fafb');\r\n        root.style.setProperty('--text-secondary', '#d1d5db');\r\n        root.style.setProperty('--border-color', '#4b5563');\r\n        break;\r\n      case 'high-contrast':\r\n        root.style.setProperty('--bg-primary', '#000000');\r\n        root.style.setProperty('--bg-secondary', '#ffffff');\r\n        root.style.setProperty('--text-primary', '#ffffff');\r\n        root.style.setProperty('--text-secondary', '#000000');\r\n        root.style.setProperty('--border-color', '#ffffff');\r\n        break;\r\n      default: // light\r\n        root.style.setProperty('--bg-primary', '#ffffff');\r\n        root.style.setProperty('--bg-secondary', '#f9fafb');\r\n        root.style.setProperty('--text-primary', '#1f2937');\r\n        root.style.setProperty('--text-secondary', '#6b7280');\r\n        root.style.setProperty('--border-color', '#e5e7eb');\r\n    }\r\n    \r\n    // Save to localStorage\r\n    localStorage.setItem('finance-app-theme', newTheme);\r\n  };\r\n\r\n  const handleThemeChange = (newTheme: Theme) => {\r\n    setTheme(newTheme);\r\n    applyTheme(newTheme);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const getThemeIcon = (themeType: Theme) => {\r\n    switch (themeType) {\r\n      case 'dark':\r\n        return <Moon className=\"w-4 h-4\" />;\r\n      case 'high-contrast':\r\n        return <Eye className=\"w-4 h-4\" />;\r\n      default:\r\n        return <Sun className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  const getThemeLabel = (themeType: Theme) => {\r\n    switch (themeType) {\r\n      case 'dark':\r\n        return 'Dark Mode';\r\n      case 'high-contrast':\r\n        return 'High Contrast';\r\n      default:\r\n        return 'Light Mode';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <Button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        variant=\"outline\"\r\n        size=\"sm\"\r\n        className=\"flex items-center space-x-2\"\r\n        aria-label=\"Toggle theme\"\r\n        aria-expanded={isOpen}\r\n        aria-haspopup=\"true\"\r\n      >\r\n        {getThemeIcon(theme)}\r\n        <span>Theme</span>\r\n      </Button>\r\n\r\n      {isOpen && (\r\n        <div className=\"absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50\">\r\n          <div className=\"py-1\">\r\n            {(['light', 'dark', 'high-contrast'] as Theme[]).map((themeOption) => (\r\n              <button\r\n                key={themeOption}\r\n                onClick={() => handleThemeChange(themeOption)}\r\n                className={`w-full flex items-center space-x-3 px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${\r\n                  theme === themeOption ? 'bg-blue-50 dark:bg-blue-900 text-blue-700 dark:text-blue-300' : ''\r\n                }`}\r\n                aria-label={`Switch to ${getThemeLabel(themeOption)}`}\r\n              >\r\n                {getThemeIcon(themeOption)}\r\n                <span>{getThemeLabel(themeOption)}</span>\r\n                {theme === themeOption && (\r\n                  <div className=\"ml-auto w-2 h-2 bg-blue-600 rounded-full\" />\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Click outside to close */}\r\n      {isOpen && (\r\n        <div\r\n          className=\"fixed inset-0 z-40\"\r\n          onClick={() => setIsOpen(false)}\r\n          aria-hidden=\"true\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// CSS Variables for theme support\r\nconst themeStyles = `\r\n  :root {\r\n    --bg-primary: #ffffff;\r\n    --bg-secondary: #f9fafb;\r\n    --text-primary: #1f2937;\r\n    --text-secondary: #6b7280;\r\n    --border-color: #e5e7eb;\r\n  }\r\n\r\n  .theme-dark {\r\n    --bg-primary: #1f2937;\r\n    --bg-secondary: #374151;\r\n    --text-primary: #f9fafb;\r\n    --text-secondary: #d1d5db;\r\n    --border-color: #4b5563;\r\n  }\r\n\r\n  .theme-high-contrast {\r\n    --bg-primary: #000000;\r\n    --bg-secondary: #ffffff;\r\n    --text-primary: #ffffff;\r\n    --text-secondary: #000000;\r\n    --border-color: #ffffff;\r\n  }\r\n\r\n  /* Apply theme variables to common elements */\r\n  body {\r\n    background-color: var(--bg-primary);\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .bg-white {\r\n    background-color: var(--bg-primary);\r\n  }\r\n\r\n  .bg-gray-50 {\r\n    background-color: var(--bg-secondary);\r\n  }\r\n\r\n  .text-gray-900 {\r\n    color: var(--text-primary);\r\n  }\r\n\r\n  .text-gray-600 {\r\n    color: var(--text-secondary);\r\n  }\r\n\r\n  .border-gray-200 {\r\n    border-color: var(--border-color);\r\n  }\r\n\r\n  /* High contrast specific styles */\r\n  .theme-high-contrast * {\r\n    border-width: 2px !important;\r\n  }\r\n\r\n  .theme-high-contrast button,\r\n  .theme-high-contrast input,\r\n  .theme-high-contrast select {\r\n    border: 2px solid var(--border-color) !important;\r\n  }\r\n\r\n  .theme-high-contrast .focus\\\\:ring-2:focus {\r\n    box-shadow: 0 0 0 4px var(--border-color) !important;\r\n  }\r\n`;\r\n\r\n// Inject theme styles\r\nif (typeof document !== 'undefined') {\r\n  const style = document.createElement('style');\r\n  style.textContent = themeStyles;\r\n  document.head.appendChild(style);\r\n} ","import React, { useState } from 'react';\r\nimport { useFinancial } from '../../contexts/FinancialContext';\r\nimport { DateRangePicker, DateRange } from '../ui/DateRangePicker';\r\nimport { ThemeToggle } from '../ui/ThemeToggle';\r\nimport { Bell, Eye, EyeOff, RefreshCw } from 'lucide-react';\r\n\r\nexport const DashboardHeader: React.FC = () => {\r\n  const {\r\n    state,\r\n    setCustomDateRange,\r\n    isPrivacyMode,\r\n    togglePrivacyMode,\r\n    accountFilter,\r\n    setAccountFilter,\r\n  } = useFinancial();\r\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\r\n\r\n  const handleDateRangeSelect = (range: DateRange) => {\r\n    setCustomDateRange(range.startDate.toISOString(), range.endDate.toISOString(), range.label);\r\n  };\r\n\r\n  const handleRefresh = () => {\r\n    // For now, just show an alert. In a real app, this would refresh the data\r\n    alert('Refreshing data...');\r\n  };\r\n\r\n  return (\r\n    <header className=\"bg-white shadow-sm border-b sticky top-0 z-40\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex items-center justify-between h-16\">\r\n          {/* Logo and Brand */}\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 flex items-center\">\r\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mr-3\">\r\n                <span className=\"text-white font-bold text-sm\">F</span>\r\n              </div>\r\n              <div>\r\n                <h1 className=\"text-xl font-semibold text-gray-900\">\r\n                  FinanceApp\r\n                </h1>\r\n                <div className=\"flex items-center\">\r\n                  <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded\">\r\n                    DEMO\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Account Type Filter - Centered */}\r\n          {state.accounts.length > 0 && (\r\n            <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\r\n              <button\r\n                onClick={() => setAccountFilter('personal')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'personal'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Personal\r\n              </button>\r\n              <button\r\n                onClick={() => setAccountFilter('business')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'business'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Business\r\n              </button>\r\n              <button\r\n                onClick={() => setAccountFilter('both')}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  accountFilter === 'both'\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                Both\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {/* Actions */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            {/* Theme Toggle */}\r\n            <ThemeToggle />\r\n\r\n            {/* Refresh Button */}\r\n            <button\r\n              onClick={handleRefresh}\r\n              className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors\"\r\n              title=\"Refresh data\"\r\n            >\r\n              <RefreshCw className=\"w-5 h-5\" />\r\n            </button>\r\n\r\n            {/* Privacy Toggle */}\r\n            <button\r\n              onClick={togglePrivacyMode}\r\n              className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors\"\r\n              title={isPrivacyMode ? 'Show amounts' : 'Hide amounts'}\r\n            >\r\n              {isPrivacyMode ? (\r\n                <EyeOff className=\"w-5 h-5\" />\r\n              ) : (\r\n                <Eye className=\"w-5 h-5\" />\r\n              )}\r\n            </button>\r\n\r\n            {/* Notifications */}\r\n            <button className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors relative\">\r\n              <Bell className=\"w-5 h-5\" />\r\n              <span className=\"absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\r\n            </button>\r\n\r\n            {/* User Avatar */}\r\n            <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center\">\r\n              <span className=\"text-white text-sm font-medium\">JD</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Date Range Picker */}\r\n      <DateRangePicker\r\n        value={state.customDateRange ? {\r\n          startDate: new Date(state.customDateRange.startDate),\r\n          endDate: new Date(state.customDateRange.endDate),\r\n          label: state.customDateRange.label,\r\n        } : undefined}\r\n        onChange={handleDateRangeSelect}\r\n        onClose={() => setIsDatePickerOpen(false)}\r\n      />\r\n    </header>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n} from 'chart.js';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\nexport interface BaseChartProps {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: Array<{\r\n      label: string;\r\n      data: number[];\r\n      backgroundColor?: string | string[];\r\n      borderColor?: string | string[];\r\n      borderWidth?: number;\r\n      fill?: boolean;\r\n      tension?: number;\r\n    }>;\r\n  };\r\n  options?: any;\r\n  height?: string | number;\r\n  width?: string | number;\r\n  className?: string;\r\n  onChartClick?: (event: any, elements: any[]) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport const BaseChart: React.FC<BaseChartProps> = ({\r\n  type,\r\n  data,\r\n  options = {},\r\n  height = 400,\r\n  width = '100%',\r\n  className = '',\r\n  onChartClick,\r\n  loading = false,\r\n  error = null,\r\n}) => {\r\n  const chartRef = useRef<ChartJS>(null);\r\n  const [chartInstance, setChartInstance] = useState<ChartJS | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      setChartInstance(chartRef.current);\r\n    }\r\n  }, []);\r\n\r\n  // Handle chart click events\r\n  const handleClick = (event: any, elements: any[]) => {\r\n    if (onChartClick) {\r\n      onChartClick(event, elements);\r\n    }\r\n  };\r\n\r\n  // Default options based on chart type\r\n  const getDefaultOptions = () => {\r\n    const baseOptions = {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          position: 'bottom' as const,\r\n          labels: {\r\n            usePointStyle: true,\r\n            padding: 20,\r\n            font: {\r\n              size: 12,\r\n            },\r\n            color: '#374151',\r\n          },\r\n        },\r\n        tooltip: {\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          titleColor: '#fff',\r\n          bodyColor: '#fff',\r\n          borderColor: 'rgba(255, 255, 255, 0.1)',\r\n          borderWidth: 1,\r\n          cornerRadius: 8,\r\n          displayColors: true,\r\n          callbacks: {\r\n            label: function(context: any) {\r\n              const label = context.dataset.label || '';\r\n              const value = context.parsed.y || context.parsed;\r\n              return `${label}: $${value.toLocaleString()}`;\r\n            },\r\n          },\r\n        },\r\n      },\r\n      onClick: handleClick,\r\n    };\r\n\r\n    switch (type) {\r\n      case 'line':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                maxRotation: 45,\r\n                color: '#6B7280',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.1)',\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n                callback: function(value: any) {\r\n                  return '$' + value.toLocaleString();\r\n                },\r\n              },\r\n            },\r\n          },\r\n          elements: {\r\n            point: {\r\n              radius: 4,\r\n              hoverRadius: 6,\r\n            },\r\n            line: {\r\n              tension: 0.4,\r\n            },\r\n          },\r\n        };\r\n      case 'bar':\r\n        return {\r\n          ...baseOptions,\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                display: false,\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n              },\r\n            },\r\n            y: {\r\n              beginAtZero: true,\r\n              grid: {\r\n                color: 'rgba(0, 0, 0, 0.1)',\r\n              },\r\n              ticks: {\r\n                color: '#6B7280',\r\n                callback: function(value: any) {\r\n                  return '$' + value.toLocaleString();\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n      case 'doughnut':\r\n      case 'pie':\r\n        return {\r\n          ...baseOptions,\r\n          cutout: type === 'doughnut' ? '60%' : undefined,\r\n          plugins: {\r\n            ...baseOptions.plugins,\r\n            legend: {\r\n              ...baseOptions.plugins.legend,\r\n              position: 'right' as const,\r\n            },\r\n            tooltip: {\r\n              ...baseOptions.plugins.tooltip,\r\n              callbacks: {\r\n                label: function(context: any) {\r\n                  const label = context.label || '';\r\n                  const value = context.parsed;\r\n                  const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                  const percentage = ((value / total) * 100).toFixed(1);\r\n                  return `${label}: $${value.toLocaleString()} (${percentage}%)`;\r\n                },\r\n              },\r\n            },\r\n          },\r\n        };\r\n      default:\r\n        return baseOptions;\r\n    }\r\n  };\r\n\r\n  const mergedOptions = {\r\n    ...getDefaultOptions(),\r\n    ...options,\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div \r\n        className={`flex items-center justify-center bg-gray-50 rounded-lg ${className}`}\r\n        style={{ height, width }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\r\n          <p className=\"text-gray-500 text-sm\">Loading chart...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div \r\n        className={`flex items-center justify-center bg-red-50 rounded-lg ${className}`}\r\n        style={{ height, width }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 mb-2\">\r\n            <svg className=\"w-8 h-8 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n            </svg>\r\n          </div>\r\n          <p className=\"text-red-600 text-sm\">{error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className={`relative ${className}`}\r\n      style={{ height, width }}\r\n    >\r\n      <Chart\r\n        ref={chartRef}\r\n        type={type}\r\n        data={data}\r\n        options={mergedOptions}\r\n      />\r\n    </div>\r\n  );\r\n}; ","import { Transaction, Account, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { format, subDays, subWeeks, subMonths, subQuarters, subYears, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, startOfQuarter, endOfQuarter, startOfYear, endOfYear } from 'date-fns';\r\n\r\nexport interface ChartDataPoint {\r\n  label: string;\r\n  value: number;\r\n  date: string;\r\n}\r\n\r\nexport interface ChartDataset {\r\n  label: string;\r\n  data: number[];\r\n  backgroundColor?: string | string[];\r\n  borderColor?: string | string[];\r\n  borderWidth?: number;\r\n  fill?: boolean;\r\n  tension?: number;\r\n}\r\n\r\nexport interface ChartConfig {\r\n  type: 'line' | 'bar' | 'doughnut' | 'pie';\r\n  data: {\r\n    labels: string[];\r\n    datasets: ChartDataset[];\r\n  };\r\n  options: any;\r\n}\r\n\r\n// Color palette for charts\r\nexport const CHART_COLORS = {\r\n  primary: '#3B82F6',\r\n  secondary: '#10B981',\r\n  accent: '#F59E0B',\r\n  danger: '#EF4444',\r\n  warning: '#F97316',\r\n  info: '#06B6D4',\r\n  success: '#22C55E',\r\n  purple: '#8B5CF6',\r\n  pink: '#EC4899',\r\n  gray: '#6B7280',\r\n  lightGray: '#E5E7EB',\r\n  darkGray: '#374151',\r\n  // Additional colors for charts\r\n  blue: '#3B82F6',\r\n  red: '#EF4444',\r\n  orange: '#F97316',\r\n  green: '#22C55E',\r\n};\r\n\r\n// Generate gradient colors for charts\r\nexport const generateGradientColors = (baseColor: string, opacity: number = 0.1): string => {\r\n  return `${baseColor}${Math.floor(opacity * 255).toString(16).padStart(2, '0')}`;\r\n};\r\n\r\n// Process transactions for balance trend chart\r\nexport const processBalanceTrendData = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): ChartDataPoint[] => {\r\n  const dataPointsArray: ChartDataPoint[] = [];\r\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n  \r\n  // Get date range based on period\r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  // Generate data points\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    const currentDate = new Date(startDate);\r\n    currentDate.setDate(startDate.getDate() + i);\r\n    \r\n    // Calculate balance for this date (simplified - in real app, you'd calculate actual balance)\r\n    const balanceChange = transactions\r\n      .filter(t => new Date(t.date) <= currentDate)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const balance = totalBalance + balanceChange;\r\n    \r\n    dataPointsArray.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: balance,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return dataPointsArray;\r\n};\r\n\r\n// Process transactions for income vs expenses chart\r\nexport const processIncomeExpenseData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod,\r\n  dataPoints: number = 12\r\n): { income: ChartDataPoint[], expenses: ChartDataPoint[] } => {\r\n  const incomeData: ChartDataPoint[] = [];\r\n  const expenseData: ChartDataPoint[] = [];\r\n  \r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = subDays(endDate, dataPoints - 1);\r\n      break;\r\n    case 'week':\r\n      startDate = subWeeks(endDate, dataPoints - 1);\r\n      break;\r\n    case 'month':\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n      break;\r\n    case 'quarter':\r\n      startDate = subQuarters(endDate, dataPoints - 1);\r\n      break;\r\n    case 'year':\r\n      startDate = subYears(endDate, dataPoints - 1);\r\n      break;\r\n    default:\r\n      startDate = subMonths(endDate, dataPoints - 1);\r\n  }\r\n\r\n  for (let i = 0; i < dataPoints; i++) {\r\n    const currentDate = new Date(startDate);\r\n    currentDate.setDate(startDate.getDate() + i);\r\n    \r\n    const periodStart = getPeriodStart(currentDate, period);\r\n    const periodEnd = getPeriodEnd(currentDate, period);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      const transactionDate = new Date(t.date);\r\n      return transactionDate >= periodStart && transactionDate <= periodEnd;\r\n    });\r\n    \r\n    const income = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const expenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    incomeData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: income,\r\n      date: currentDate.toISOString(),\r\n    });\r\n    \r\n    expenseData.push({\r\n      label: format(currentDate, getDateFormat(period)),\r\n      value: expenses,\r\n      date: currentDate.toISOString(),\r\n    });\r\n  }\r\n\r\n  return { income: incomeData, expenses: expenseData };\r\n};\r\n\r\n// Process transactions for category spending breakdown\r\nexport const processCategorySpendingData = (\r\n  transactions: Transaction[],\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const categoryMap = new Map<string, number>();\r\n  \r\n  const endDate = new Date();\r\n  let startDate: Date;\r\n  \r\n  switch (period) {\r\n    case 'day':\r\n      startDate = startOfDay(endDate);\r\n      break;\r\n    case 'week':\r\n      startDate = startOfWeek(endDate);\r\n      break;\r\n    case 'month':\r\n      startDate = startOfMonth(endDate);\r\n      break;\r\n    case 'quarter':\r\n      startDate = startOfQuarter(endDate);\r\n      break;\r\n    case 'year':\r\n      startDate = startOfYear(endDate);\r\n      break;\r\n    default:\r\n      startDate = startOfMonth(endDate);\r\n  }\r\n\r\n  // Filter transactions for the period\r\n  const periodTransactions = transactions.filter(t => {\r\n    const transactionDate = new Date(t.date);\r\n    return transactionDate >= startDate && transactionDate <= endDate && t.amount < 0;\r\n  });\r\n\r\n  // Group by category\r\n  periodTransactions.forEach(transaction => {\r\n    const category = transaction.category || 'Uncategorized';\r\n    const amount = Math.abs(transaction.amount);\r\n    categoryMap.set(category, (categoryMap.get(category) || 0) + amount);\r\n  });\r\n\r\n  // Convert to chart data points\r\n  const dataPoints: ChartDataPoint[] = Array.from(categoryMap.entries())\r\n    .map(([category, amount]) => ({\r\n      label: category,\r\n      value: amount,\r\n      date: new Date().toISOString(),\r\n    }))\r\n    .sort((a, b) => b.value - a.value)\r\n    .slice(0, 8); // Top 8 categories\r\n\r\n  return dataPoints;\r\n};\r\n\r\n// Process data for savings rate progress chart\r\nexport const processSavingsRateData = (\r\n  summary: FinancialSummary,\r\n  period: TimePeriod\r\n): ChartDataPoint[] => {\r\n  const currentSavingsRate = summary.savingsRate * 100;\r\n  const targetSavingsRate = 20; // 20% target\r\n  \r\n  return [\r\n    {\r\n      label: 'Current',\r\n      value: currentSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n    {\r\n      label: 'Target',\r\n      value: targetSavingsRate,\r\n      date: new Date().toISOString(),\r\n    },\r\n  ];\r\n};\r\n\r\n// Helper functions\r\nconst getDateFormat = (period: TimePeriod): string => {\r\n  switch (period) {\r\n    case 'day':\r\n      return 'MMM dd';\r\n    case 'week':\r\n      return 'MMM dd';\r\n    case 'month':\r\n      return 'MMM yyyy';\r\n    case 'quarter':\r\n      return 'QQQ yyyy';\r\n    case 'year':\r\n      return 'yyyy';\r\n    default:\r\n      return 'MMM dd';\r\n  }\r\n};\r\n\r\nconst getPeriodStart = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return startOfDay(date);\r\n    case 'week':\r\n      return startOfWeek(date);\r\n    case 'month':\r\n      return startOfMonth(date);\r\n    case 'quarter':\r\n      return startOfQuarter(date);\r\n    case 'year':\r\n      return startOfYear(date);\r\n    default:\r\n      return startOfMonth(date);\r\n  }\r\n};\r\n\r\nconst getPeriodEnd = (date: Date, period: TimePeriod): Date => {\r\n  switch (period) {\r\n    case 'day':\r\n      return endOfDay(date);\r\n    case 'week':\r\n      return endOfWeek(date);\r\n    case 'month':\r\n      return endOfMonth(date);\r\n    case 'quarter':\r\n      return endOfQuarter(date);\r\n    case 'year':\r\n      return endOfYear(date);\r\n    default:\r\n      return endOfMonth(date);\r\n  }\r\n};\r\n\r\n// Default chart options\r\nexport const getDefaultChartOptions = (type: 'line' | 'bar' | 'doughnut' | 'pie') => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(255, 255, 255, 0.1)',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y || context.parsed;\r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  switch (type) {\r\n    case 'line':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n            ticks: {\r\n              maxRotation: 45,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        elements: {\r\n          point: {\r\n            radius: 4,\r\n            hoverRadius: 6,\r\n          },\r\n          line: {\r\n            tension: 0.4,\r\n          },\r\n        },\r\n      };\r\n    case 'bar':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'doughnut':\r\n    case 'pie':\r\n      return {\r\n        ...baseOptions,\r\n        cutout: type === 'doughnut' ? '60%' : undefined,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            ...baseOptions.plugins.legend,\r\n            position: 'right' as const,\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; ","import React, { useMemo } from 'react';\r\nimport { BaseChart } from './BaseChart';\r\nimport { Budget, Transaction, TimePeriod } from '../../types/financial';\r\nimport { CHART_COLORS } from '../../utils/chartUtils';\r\n\r\ninterface BudgetVsActualChartProps {\r\n  budgets: Budget[];\r\n  transactions: Transaction[];\r\n  period: TimePeriod;\r\n  height?: number;\r\n  className?: string;\r\n  onDataPointClick?: (dataPoint: any) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\nexport const BudgetVsActualChart: React.FC<BudgetVsActualChartProps> = ({\r\n  budgets,\r\n  transactions,\r\n  period,\r\n  height = 300,\r\n  className = '',\r\n  onDataPointClick,\r\n  loading = false,\r\n  error = null,\r\n}) => {\r\n  const chartData = useMemo(() => {\r\n    if (!budgets.length) {\r\n      return { labels: [], datasets: [] };\r\n    }\r\n\r\n    // Filter active budgets\r\n    const activeBudgets = budgets.filter(budget => budget.isActive);\r\n    \r\n    // Calculate actual spending for each budget category\r\n    const budgetVsActual = activeBudgets.map(budget => {\r\n      const relevantTransactions = transactions.filter(tx => \r\n        tx.category === budget.category &&\r\n        new Date(tx.date) >= new Date(budget.startDate) &&\r\n        new Date(tx.date) <= new Date(budget.endDate) &&\r\n        tx.amount < 0 // Only expenses\r\n      );\r\n      \r\n      const actualSpending = Math.abs(relevantTransactions.reduce((sum, tx) => sum + tx.amount, 0));\r\n      \r\n      return {\r\n        category: budget.category,\r\n        budgeted: budget.amount,\r\n        actual: actualSpending,\r\n        remaining: budget.amount - actualSpending,\r\n        percentage: (actualSpending / budget.amount) * 100,\r\n      };\r\n    });\r\n\r\n    // Sort by percentage (most over budget first)\r\n    budgetVsActual.sort((a, b) => b.percentage - a.percentage);\r\n\r\n    const labels = budgetVsActual.map(item => item.category);\r\n    const budgetedData = budgetVsActual.map(item => item.budgeted);\r\n    const actualData = budgetVsActual.map(item => item.actual);\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Budgeted',\r\n          data: budgetedData,\r\n          backgroundColor: CHART_COLORS.blue,\r\n          borderColor: CHART_COLORS.blue,\r\n          borderWidth: 2,\r\n          borderRadius: 4,\r\n          borderSkipped: false,\r\n        },\r\n        {\r\n          label: 'Actual',\r\n          data: actualData,\r\n          backgroundColor: budgetVsActual.map(item => \r\n            item.percentage > 100 ? CHART_COLORS.red : \r\n            item.percentage > 80 ? CHART_COLORS.orange : \r\n            CHART_COLORS.green\r\n          ),\r\n          borderColor: budgetVsActual.map(item => \r\n            item.percentage > 100 ? CHART_COLORS.red : \r\n            item.percentage > 80 ? CHART_COLORS.orange : \r\n            CHART_COLORS.green\r\n          ),\r\n          borderWidth: 2,\r\n          borderRadius: 4,\r\n          borderSkipped: false,\r\n        },\r\n      ],\r\n    };\r\n  }, [budgets, transactions, period]);\r\n\r\n  const chartOptions = useMemo(() => ({\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Budget vs Actual Spending',\r\n        font: {\r\n          size: 16,\r\n          weight: 'bold' as const,\r\n        },\r\n        color: '#374151',\r\n        padding: {\r\n          top: 10,\r\n          bottom: 20,\r\n        },\r\n      },\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n          color: '#374151',\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: '#374151',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const label = context.dataset.label || '';\r\n            const value = context.parsed.y;\r\n            const category = context.label;\r\n            \r\n            // Find the budget data for this category\r\n            const budgetData = budgets.find(b => b.category === category);\r\n            if (budgetData && context.datasetIndex === 1) { // Actual spending\r\n              const percentage = (value / budgetData.amount) * 100;\r\n              const status = percentage > 100 ? 'Over Budget' : \r\n                           percentage > 80 ? 'Near Limit' : 'On Track';\r\n              return `${label}: $${value.toLocaleString()} (${percentage.toFixed(1)}% - ${status})`;\r\n            }\r\n            \r\n            return `${label}: $${value.toLocaleString()}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        grid: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          maxRotation: 45,\r\n          minRotation: 0,\r\n        },\r\n      },\r\n      y: {\r\n        beginAtZero: true,\r\n        grid: {\r\n          color: 'rgba(0, 0, 0, 0.1)',\r\n        },\r\n        ticks: {\r\n          callback: function(value: any) {\r\n            return '$' + value.toLocaleString();\r\n          },\r\n        },\r\n      },\r\n    },\r\n    interaction: {\r\n      intersect: false,\r\n      mode: 'index' as const,\r\n    },\r\n  }), [budgets]);\r\n\r\n  const handleChartClick = (event: any, elements: any[]) => {\r\n    if (elements.length > 0 && onDataPointClick) {\r\n      const dataIndex = elements[0].index;\r\n      const datasetIndex = elements[0].datasetIndex;\r\n      const category = chartData.labels[dataIndex];\r\n      \r\n      const budget = budgets.find(b => b.category === category);\r\n      if (budget) {\r\n        onDataPointClick({\r\n          category,\r\n          budgeted: budget.amount,\r\n          actual: chartData.datasets[1].data[dataIndex],\r\n          type: datasetIndex === 0 ? 'budgeted' : 'actual',\r\n          budget,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center text-red-600\">\r\n          <p>Error loading budget chart: {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!budgets.length) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center py-8\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n            Budget vs Actual Spending\r\n          </h3>\r\n          <p className=\"text-gray-500 mb-4\">\r\n            No budgets found. Create budgets to see spending comparisons.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n          Budget vs Actual Spending\r\n        </h3>\r\n        <p className=\"text-sm text-gray-600\">\r\n          Compare your budgeted amounts with actual spending by category\r\n        </p>\r\n      </div>\r\n      \r\n      <BaseChart\r\n        type=\"bar\"\r\n        data={chartData}\r\n        options={chartOptions}\r\n        height={height}\r\n        width=\"100%\"\r\n        onChartClick={handleChartClick}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n      \r\n      {/* Summary Stats */}\r\n      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-blue-600\">\r\n            {budgets.filter(b => b.isActive).length}\r\n          </div>\r\n          <div className=\"text-gray-500\">Active Budgets</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-green-600\">\r\n            {budgets.filter(b => b.isActive && b.spent <= b.amount).length}\r\n          </div>\r\n          <div className=\"text-gray-500\">On Track</div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <div className=\"text-2xl font-bold text-red-600\">\r\n            {budgets.filter(b => b.isActive && b.spent > b.amount).length}\r\n          </div>\r\n          <div className=\"text-gray-500\">Over Budget</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}; ","import React, { useMemo } from 'react';\r\nimport { Transaction, Account, TimePeriod, Budget } from '../../types/financial';\r\nimport { BaseChart } from './BaseChart';\r\nimport { BudgetVsActualChart } from './BudgetVsActualChart';\r\nimport { \r\n  processBalanceTrendData, \r\n  processIncomeExpenseData, \r\n  processCategorySpendingData,\r\n  CHART_COLORS \r\n} from '../../utils/chartUtils';\r\n\r\nexport type ChartType = 'balance' | 'income-expense' | 'category' | 'budget-vs-actual';\r\n\r\nexport interface ChartConfig {\r\n  type: ChartType;\r\n  title: string;\r\n  description: string;\r\n  height?: number;\r\n  width?: string | number;\r\n  className?: string;\r\n  options?: any;\r\n}\r\n\r\nexport interface ChartFactoryProps {\r\n  chartType: ChartType;\r\n  transactions: Transaction[];\r\n  accounts: Account[];\r\n  period: TimePeriod;\r\n  budgets?: Budget[];\r\n  height?: number;\r\n  className?: string;\r\n  onDataPointClick?: (dataPoint: any, chartType: ChartType) => void;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  customOptions?: any;\r\n}\r\n\r\nexport const ChartFactory: React.FC<ChartFactoryProps> = ({\r\n  chartType,\r\n  transactions,\r\n  accounts,\r\n  period,\r\n  budgets = [],\r\n  height = 300,\r\n  className = '',\r\n  onDataPointClick,\r\n  loading = false,\r\n  error = null,\r\n  customOptions = {},\r\n}) => {\r\n  const chartConfig = useMemo(() => getChartConfig(chartType, period), [chartType, period]);\r\n\r\n  const chartData = useMemo(() => {\r\n    switch (chartType) {\r\n      case 'balance': {\r\n        const dataPoints = processBalanceTrendData(transactions, accounts, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Balance',\r\n            data: dataPoints.map(point => point.value),\r\n            borderColor: CHART_COLORS.primary,\r\n            backgroundColor: CHART_COLORS.primary + '20',\r\n            fill: true,\r\n            tension: 0.4,\r\n          }]\r\n        };\r\n      }\r\n      case 'income-expense': {\r\n        const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n        return {\r\n          labels: income.map(point => point.label),\r\n          datasets: [\r\n            {\r\n              label: 'Income',\r\n              data: income.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.success,\r\n              borderColor: CHART_COLORS.success,\r\n            },\r\n            {\r\n              label: 'Expenses',\r\n              data: expenses.map(point => point.value),\r\n              backgroundColor: CHART_COLORS.danger,\r\n              borderColor: CHART_COLORS.danger,\r\n            }\r\n          ]\r\n        };\r\n      }\r\n      case 'category': {\r\n        const dataPoints = processCategorySpendingData(transactions, period);\r\n        return {\r\n          labels: dataPoints.map(point => point.label),\r\n          datasets: [{\r\n            label: 'Spending',\r\n            data: dataPoints.map(point => point.value),\r\n            backgroundColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n            borderColor: dataPoints.map((_, index) => \r\n              Object.values(CHART_COLORS)[index % Object.keys(CHART_COLORS).length]\r\n            ),\r\n          }]\r\n        };\r\n      }\r\n      case 'budget-vs-actual':\r\n        // Budget vs actual is handled by dedicated component\r\n        return { labels: [], datasets: [] };\r\n      default:\r\n        return { labels: [], datasets: [] };\r\n    }\r\n  }, [chartType, transactions, accounts, period]);\r\n\r\n  const chartOptions = useMemo(() => {\r\n    const baseOptions = getBaseOptions(chartType, chartConfig.title);\r\n    return { ...baseOptions, ...customOptions };\r\n  }, [chartType, chartConfig.title, customOptions]);\r\n\r\n  const handleChartClick = (event: any, elements: any[]) => {\r\n    if (elements.length > 0 && onDataPointClick) {\r\n      const dataIndex = elements[0].index;\r\n      const datasetIndex = elements[0].datasetIndex;\r\n      \r\n      // Get the appropriate data point based on chart type\r\n      let dataPoint: any;\r\n      switch (chartType) {\r\n        case 'balance':\r\n          dataPoint = processBalanceTrendData(transactions, accounts, period)[dataIndex];\r\n          break;\r\n        case 'income-expense':\r\n          const { income, expenses } = processIncomeExpenseData(transactions, period);\r\n          dataPoint = datasetIndex === 0 ? income[dataIndex] : expenses[dataIndex];\r\n          dataPoint.type = datasetIndex === 0 ? 'income' : 'expense';\r\n          break;\r\n        case 'category':\r\n          dataPoint = processCategorySpendingData(transactions, period)[dataIndex];\r\n          break;\r\n        default:\r\n          dataPoint = null;\r\n      }\r\n      \r\n      if (dataPoint) {\r\n        onDataPointClick(dataPoint, chartType);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Special handling for budget vs actual chart\r\n  if (chartType === 'budget-vs-actual') {\r\n    return (\r\n      <BudgetVsActualChart\r\n        budgets={budgets}\r\n        transactions={transactions}\r\n        period={period}\r\n        height={height}\r\n        className={className}\r\n        onDataPointClick={(dataPoint) => onDataPointClick?.(dataPoint, chartType)}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\r\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n        <div className=\"text-center text-red-600\">\r\n          <p>Error loading chart: {error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className}`}>\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n          {chartConfig.title}\r\n        </h3>\r\n        <p className=\"text-sm text-gray-600\">\r\n          {chartConfig.description}\r\n        </p>\r\n      </div>\r\n      \r\n      <BaseChart\r\n        type={getChartType(chartType)}\r\n        data={chartData}\r\n        options={chartOptions}\r\n        height={height}\r\n        width=\"100%\"\r\n        onChartClick={handleChartClick}\r\n        loading={loading}\r\n        error={error}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Helper functions\r\nconst getChartConfig = (chartType: ChartType, period: TimePeriod): { title: string; description: string } => {\r\n  const periodText = period.charAt(0).toUpperCase() + period.slice(1);\r\n  \r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        title: 'Balance Trend',\r\n        description: `Shows your account balance over the ${period} period`\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        title: 'Income vs Expenses',\r\n        description: `Compares your income and expenses for the ${period}`\r\n      };\r\n    case 'category':\r\n      return {\r\n        title: 'Spending by Category',\r\n        description: `Breakdown of your spending by category for the ${period}`\r\n      };\r\n    case 'budget-vs-actual':\r\n      return {\r\n        title: 'Budget vs Actual',\r\n        description: `Shows how your spending compares to your budget for the ${period}`\r\n      };\r\n    default:\r\n      return {\r\n        title: 'Chart',\r\n        description: 'Financial data visualization'\r\n      };\r\n  }\r\n};\r\n\r\nconst getChartType = (chartType: ChartType): 'line' | 'bar' | 'doughnut' | 'pie' => {\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return 'line';\r\n    case 'income-expense':\r\n      return 'bar';\r\n    case 'category':\r\n      return 'doughnut';\r\n    case 'budget-vs-actual':\r\n      return 'bar';\r\n    default:\r\n      return 'line';\r\n  }\r\n};\r\n\r\nconst getBaseOptions = (chartType: ChartType, title: string) => {\r\n  const baseOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: title,\r\n        font: {\r\n          size: 16,\r\n          weight: 'bold' as const,\r\n        },\r\n        color: '#374151',\r\n        padding: {\r\n          top: 10,\r\n          bottom: 20,\r\n        },\r\n      },\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n          },\r\n          color: '#374151',\r\n        },\r\n      },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: '#374151',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  // Add chart-specific options\r\n  switch (chartType) {\r\n    case 'balance':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          y: {\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const value = context.parsed.y;\r\n                return `Balance: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'income-expense':\r\n      return {\r\n        ...baseOptions,\r\n        scales: {\r\n          x: {\r\n            grid: {\r\n              display: false,\r\n            },\r\n          },\r\n          y: {\r\n            beginAtZero: true,\r\n            grid: {\r\n              color: 'rgba(0, 0, 0, 0.1)',\r\n            },\r\n            ticks: {\r\n              callback: function(value: any) {\r\n                return '$' + value.toLocaleString();\r\n              },\r\n            },\r\n          },\r\n        },\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.dataset.label || '';\r\n                const value = context.parsed.y;\r\n                return `${label}: $${value.toLocaleString()}`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    case 'category':\r\n      return {\r\n        ...baseOptions,\r\n        plugins: {\r\n          ...baseOptions.plugins,\r\n          legend: {\r\n            position: 'right' as const,\r\n            labels: {\r\n              usePointStyle: true,\r\n              padding: 15,\r\n              font: {\r\n                size: 11,\r\n              },\r\n            },\r\n          },\r\n          tooltip: {\r\n            ...baseOptions.plugins.tooltip,\r\n            callbacks: {\r\n              label: function(context: any) {\r\n                const label = context.label || '';\r\n                const value = context.parsed;\r\n                const total = context.dataset.data.reduce((a: number, b: number) => a + b, 0);\r\n                const percentage = ((value / total) * 100).toFixed(1);\r\n                return `${label}: $${value.toLocaleString()} (${percentage}%)`;\r\n              },\r\n            },\r\n          },\r\n        },\r\n      };\r\n    default:\r\n      return baseOptions;\r\n  }\r\n}; ","import React, { useState } from 'react';\r\nimport { Transaction, Account, TimePeriod, Budget } from '../../types/financial';\r\nimport { ChartFactory, ChartType } from './ChartFactory';\r\nimport { Button } from '../ui/Button';\r\nimport { Download, Maximize2, Minimize2, RefreshCw } from 'lucide-react';\r\n\r\ninterface ChartContainerProps {\r\n  transactions: Transaction[];\r\n  accounts: Account[];\r\n  period: TimePeriod;\r\n  budgets?: Budget[];\r\n  loading?: boolean;\r\n  error?: string | null;\r\n  onExport?: () => void;\r\n  onRefresh?: () => void;\r\n}\r\n\r\nconst CHART_CONFIGS: Array<{\r\n  type: ChartType;\r\n  title: string;\r\n  description: string;\r\n}> = [\r\n  {\r\n    type: 'balance',\r\n    title: 'Balance Trend',\r\n    description: 'Track your account balance over time'\r\n  },\r\n  {\r\n    type: 'income-expense',\r\n    title: 'Income vs Expenses',\r\n    description: 'Compare your income and spending patterns'\r\n  },\r\n  {\r\n    type: 'category',\r\n    title: 'Spending by Category',\r\n    description: 'See where your money is going'\r\n  },\r\n  {\r\n    type: 'budget-vs-actual',\r\n    title: 'Budget vs Actual',\r\n    description: 'Compare your spending to your budgets'\r\n  }\r\n];\r\n\r\nexport const ChartContainer: React.FC<ChartContainerProps> = ({\r\n  transactions,\r\n  accounts,\r\n  period,\r\n  budgets = [],\r\n  loading = false,\r\n  error = null,\r\n  onExport,\r\n  onRefresh,\r\n}) => {\r\n  const [expandedChart, setExpandedChart] = useState<ChartType | null>(null);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  const handleRefresh = async () => {\r\n    if (onRefresh) {\r\n      setIsRefreshing(true);\r\n      try {\r\n        await onRefresh();\r\n      } finally {\r\n        setIsRefreshing(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDataPointClick = (dataPoint: any, chartType: ChartType) => {\r\n    console.log(`${chartType} data point clicked:`, dataPoint);\r\n    // You can implement navigation or detailed view here\r\n  };\r\n\r\n  const toggleChartExpansion = (chartType: ChartType) => {\r\n    setExpandedChart(expandedChart === chartType ? null : chartType);\r\n  };\r\n\r\n  const renderChartCard = (chartConfig: typeof CHART_CONFIGS[0]) => {\r\n    const isExpanded = expandedChart === chartConfig.type;\r\n    \r\n    return (\r\n      <div \r\n        key={chartConfig.type}\r\n        className={`bg-white rounded-lg shadow-sm border transition-all duration-300 ${\r\n          isExpanded ? 'col-span-full' : 'col-span-1'\r\n        }`}\r\n      >\r\n        {/* Chart Header */}\r\n        <div className=\"p-4 border-b border-gray-200\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                {chartConfig.title}\r\n              </h3>\r\n              <p className=\"text-sm text-gray-600\">\r\n                {chartConfig.description}\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center space-x-2\">\r\n              {/* Refresh Button */}\r\n              <Button\r\n                onClick={handleRefresh}\r\n                disabled={isRefreshing}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className=\"flex items-center space-x-1\"\r\n              >\r\n                <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n                <span>Refresh</span>\r\n              </Button>\r\n\r\n              {/* Expand/Collapse Button */}\r\n              <Button\r\n                onClick={() => toggleChartExpansion(chartConfig.type)}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className=\"flex items-center space-x-1\"\r\n              >\r\n                {isExpanded ? (\r\n                  <>\r\n                    <Minimize2 className=\"w-4 h-4\" />\r\n                    <span>Collapse</span>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Maximize2 className=\"w-4 h-4\" />\r\n                    <span>Expand</span>\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Chart Content */}\r\n        <div className=\"p-4\">\r\n          <ChartFactory\r\n            chartType={chartConfig.type}\r\n            transactions={transactions}\r\n            accounts={accounts}\r\n            period={period}\r\n            budgets={budgets}\r\n            height={isExpanded ? 500 : 300}\r\n            loading={loading}\r\n            error={error}\r\n            onDataPointClick={handleDataPointClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-gray-900\">Financial Analytics</h2>\r\n          <p className=\"text-gray-600\">\r\n            Interactive charts and insights for your financial data\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex items-center space-x-3\">\r\n          {/* Export Button */}\r\n          <Button\r\n            onClick={onExport}\r\n            disabled={loading}\r\n            className=\"flex items-center space-x-2\"\r\n          >\r\n            <Download className=\"w-4 h-4\" />\r\n            <span>Export Data</span>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Charts Grid */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6\">\r\n        {CHART_CONFIGS.map(renderChartCard)}\r\n      </div>\r\n\r\n      {/* Loading State */}\r\n      {loading && (\r\n        <div className=\"text-center py-8\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\r\n          <p className=\"text-gray-600 mt-2\">Loading charts...</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Error State */}\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\r\n          <div className=\"flex\">\r\n            <div className=\"flex-shrink-0\">\r\n              <svg\r\n                className=\"h-5 w-5 text-red-400\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                  clipRule=\"evenodd\"\r\n                />\r\n              </svg>\r\n            </div>\r\n            <div className=\"ml-3\">\r\n              <p className=\"text-sm text-red-800\">Error loading charts: {error}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}; ","import { Transaction, FilterOptions } from '../types/financial';\r\nimport { stringify } from 'csv-stringify/sync';\r\n\r\nexport interface ExportOptions {\r\n  format: 'csv' | 'json';\r\n  includeHeaders: boolean;\r\n  dateFormat: string;\r\n  currencyFormat: string;\r\n}\r\n\r\nexport const defaultExportOptions: ExportOptions = {\r\n  format: 'csv',\r\n  includeHeaders: true,\r\n  dateFormat: 'MMM dd, yyyy',\r\n  currencyFormat: 'USD',\r\n};\r\n\r\n// Filter transactions based on export options\r\nexport const filterTransactionsForExport = (\r\n  transactions: Transaction[],\r\n  filters: FilterOptions\r\n): Transaction[] => {\r\n  let filteredTransactions = [...transactions];\r\n\r\n  // Apply date range filter\r\n  if (filters.dateRange) {\r\n    filteredTransactions = filteredTransactions.filter(transaction => {\r\n      const transactionDate = new Date(transaction.date);\r\n      const startDate = new Date(filters.dateRange!.start);\r\n      const endDate = new Date(filters.dateRange!.end);\r\n      return transactionDate >= startDate && transactionDate <= endDate;\r\n    });\r\n  }\r\n\r\n  // Apply amount range filter\r\n  if (filters.amountRange) {\r\n    filteredTransactions = filteredTransactions.filter(transaction => {\r\n      const amount = Math.abs(transaction.amount);\r\n      return amount >= filters.amountRange!.min && amount <= filters.amountRange!.max;\r\n    });\r\n  }\r\n\r\n  // Apply category filter\r\n  if (filters.categories && filters.categories.length > 0) {\r\n    filteredTransactions = filteredTransactions.filter(transaction =>\r\n      filters.categories!.includes(transaction.category)\r\n    );\r\n  }\r\n\r\n  // Apply tag filter\r\n  if (filters.tags && filters.tags.length > 0) {\r\n    filteredTransactions = filteredTransactions.filter(transaction =>\r\n      filters.tags!.some(tag => transaction.tags.includes(tag))\r\n    );\r\n  }\r\n\r\n  // Apply account filter\r\n  if (filters.accountIds && filters.accountIds.length > 0) {\r\n    filteredTransactions = filteredTransactions.filter(transaction =>\r\n      filters.accountIds!.includes(transaction.accountId)\r\n    );\r\n  }\r\n\r\n  // Apply transaction type filter\r\n  if (filters.transactionTypes && filters.transactionTypes.length > 0) {\r\n    filteredTransactions = filteredTransactions.filter(transaction => {\r\n      const isIncome = transaction.amount > 0;\r\n      const isExpense = transaction.amount < 0;\r\n      \r\n      if (filters.transactionTypes!.includes('income') && isIncome) return true;\r\n      if (filters.transactionTypes!.includes('expense') && isExpense) return true;\r\n      return false;\r\n    });\r\n  }\r\n\r\n  // Apply status filter\r\n  if (filters.status && filters.status.length > 0) {\r\n    filteredTransactions = filteredTransactions.filter(transaction => {\r\n      const isPending = transaction.pending;\r\n      const isCleared = !transaction.pending;\r\n      \r\n      if (filters.status!.includes('pending') && isPending) return true;\r\n      if (filters.status!.includes('cleared') && isCleared) return true;\r\n      return false;\r\n    });\r\n  }\r\n\r\n  // Apply search term filter\r\n  if (filters.searchTerm) {\r\n    const searchTerm = filters.searchTerm.toLowerCase();\r\n    filteredTransactions = filteredTransactions.filter(transaction =>\r\n      transaction.description.toLowerCase().includes(searchTerm) ||\r\n      transaction.category.toLowerCase().includes(searchTerm) ||\r\n      transaction.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||\r\n      transaction.cleanMerchant.cleanName.toLowerCase().includes(searchTerm)\r\n    );\r\n  }\r\n\r\n  return filteredTransactions;\r\n};\r\n\r\n// Format transaction data for export\r\nexport const formatTransactionForExport = (\r\n  transaction: Transaction,\r\n  options: ExportOptions = defaultExportOptions\r\n): Record<string, any> => {\r\n  const formatCurrency = (amount: number): string => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: options.currencyFormat,\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string): string => {\r\n    const date = new Date(dateString);\r\n    return date.toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n    });\r\n  };\r\n\r\n  return {\r\n    'Transaction ID': transaction.id,\r\n    'Date': formatDate(transaction.date),\r\n    'Description': transaction.description,\r\n    'Amount': formatCurrency(transaction.amount),\r\n    'Category': transaction.category,\r\n    'Tags': transaction.tags.join(', '),\r\n    'Account ID': transaction.accountId,\r\n    'Merchant': transaction.cleanMerchant.cleanName,\r\n    'Status': transaction.pending ? 'Pending' : 'Cleared',\r\n    'Notes': transaction.notes || '',\r\n    'Created At': formatDate(transaction.createdAt),\r\n    'Updated At': formatDate(transaction.updatedAt),\r\n  };\r\n};\r\n\r\n// Export transactions to CSV\r\nexport const exportTransactionsToCSV = (\r\n  transactions: Transaction[],\r\n  filters: FilterOptions,\r\n  options: ExportOptions = defaultExportOptions\r\n): string => {\r\n  const filteredTransactions = filterTransactionsForExport(transactions, filters);\r\n  \r\n  if (filteredTransactions.length === 0) {\r\n    throw new Error('No transactions found matching the current filters.');\r\n  }\r\n\r\n  const formattedData = filteredTransactions.map(transaction =>\r\n    formatTransactionForExport(transaction, options)\r\n  );\r\n\r\n  const csvString = stringify(formattedData, {\r\n    header: options.includeHeaders,\r\n    columns: Object.keys(formattedData[0]),\r\n  });\r\n\r\n  return csvString;\r\n};\r\n\r\n// Export transactions to JSON\r\nexport const exportTransactionsToJSON = (\r\n  transactions: Transaction[],\r\n  filters: FilterOptions,\r\n  options: ExportOptions = defaultExportOptions\r\n): string => {\r\n  const filteredTransactions = filterTransactionsForExport(transactions, filters);\r\n  \r\n  if (filteredTransactions.length === 0) {\r\n    throw new Error('No transactions found matching the current filters.');\r\n  }\r\n\r\n  const formattedData = filteredTransactions.map(transaction =>\r\n    formatTransactionForExport(transaction, options)\r\n  );\r\n\r\n  return JSON.stringify(formattedData, null, 2);\r\n};\r\n\r\n// Download file function\r\nexport const downloadFile = (content: string, filename: string, mimeType: string): void => {\r\n  const blob = new Blob([content], { type: mimeType });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n};\r\n\r\n// Generate filename with timestamp\r\nexport const generateExportFilename = (\r\n  prefix: string,\r\n  format: 'csv' | 'json',\r\n  includeTimestamp: boolean = true\r\n): string => {\r\n  const timestamp = includeTimestamp \r\n    ? `_${new Date().toISOString().slice(0, 10)}_${new Date().toTimeString().slice(0, 8).replace(/:/g, '-')}`\r\n    : '';\r\n  \r\n  return `${prefix}${timestamp}.${format}`;\r\n};\r\n\r\n// Main export function\r\nexport const exportTransactions = (\r\n  transactions: Transaction[],\r\n  filters: FilterOptions,\r\n  options: ExportOptions = defaultExportOptions\r\n): void => {\r\n  try {\r\n    let content: string;\r\n    let filename: string;\r\n    let mimeType: string;\r\n\r\n    if (options.format === 'csv') {\r\n      content = exportTransactionsToCSV(transactions, filters, options);\r\n      filename = generateExportFilename('transactions', 'csv');\r\n      mimeType = 'text/csv';\r\n    } else {\r\n      content = exportTransactionsToJSON(transactions, filters, options);\r\n      filename = generateExportFilename('transactions', 'json');\r\n      mimeType = 'application/json';\r\n    }\r\n\r\n    downloadFile(content, filename, mimeType);\r\n  } catch (error) {\r\n    console.error('Export failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Export summary statistics\r\nexport const exportSummaryStatistics = (\r\n  transactions: Transaction[],\r\n  filters: FilterOptions,\r\n  options: ExportOptions = defaultExportOptions\r\n): void => {\r\n  const filteredTransactions = filterTransactionsForExport(transactions, filters);\r\n  \r\n  const summary = {\r\n    'Total Transactions': filteredTransactions.length,\r\n    'Total Income': filteredTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0),\r\n    'Total Expenses': Math.abs(filteredTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0)),\r\n    'Net Flow': filteredTransactions.reduce((sum, t) => sum + t.amount, 0),\r\n    'Average Transaction': filteredTransactions.length > 0 \r\n      ? filteredTransactions.reduce((sum, t) => sum + Math.abs(t.amount), 0) / filteredTransactions.length\r\n      : 0,\r\n    'Pending Transactions': filteredTransactions.filter(t => t.pending).length,\r\n    'Cleared Transactions': filteredTransactions.filter(t => !t.pending).length,\r\n  };\r\n\r\n  const formatCurrency = (amount: number): string => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: options.currencyFormat,\r\n    }).format(amount);\r\n  };\r\n\r\n  const formattedSummary = {\r\n    'Total Transactions': summary['Total Transactions'],\r\n    'Total Income': formatCurrency(summary['Total Income']),\r\n    'Total Expenses': formatCurrency(summary['Total Expenses']),\r\n    'Net Flow': formatCurrency(summary['Net Flow']),\r\n    'Average Transaction': formatCurrency(summary['Average Transaction']),\r\n    'Pending Transactions': summary['Pending Transactions'],\r\n    'Cleared Transactions': summary['Cleared Transactions'],\r\n  };\r\n\r\n  let content: string;\r\n  let filename: string;\r\n  let mimeType: string;\r\n\r\n  if (options.format === 'csv') {\r\n    content = stringify([formattedSummary], {\r\n      header: options.includeHeaders,\r\n    });\r\n    filename = generateExportFilename('summary_statistics', 'csv');\r\n    mimeType = 'text/csv';\r\n  } else {\r\n    content = JSON.stringify(formattedSummary, null, 2);\r\n    filename = generateExportFilename('summary_statistics', 'json');\r\n    mimeType = 'application/json';\r\n  }\r\n\r\n  downloadFile(content, filename, mimeType);\r\n}; ","import { useMemo, useState, useCallback } from 'react';\r\nimport { Transaction, Account, TimePeriod, FilterOptions } from '../types/financial';\r\nimport { exportTransactions, exportSummaryStatistics } from '../utils/exportUtils';\r\n\r\nexport interface ChartData {\r\n  balanceTrend: any;\r\n  incomeExpense: any;\r\n  categorySpending: any;\r\n  summary: {\r\n    totalBalance: number;\r\n    totalIncome: number;\r\n    totalExpenses: number;\r\n    netFlow: number;\r\n    savingsRate: number;\r\n    topCategory: string;\r\n    topCategoryAmount: number;\r\n  };\r\n}\r\n\r\nexport const useCharts = (\r\n  transactions: Transaction[],\r\n  accounts: Account[],\r\n  period: TimePeriod,\r\n  filters: FilterOptions\r\n) => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [exportError, setExportError] = useState<string | null>(null);\r\n\r\n  // Calculate summary statistics\r\n  const summary = useMemo(() => {\r\n    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\r\n    \r\n    const periodTransactions = transactions.filter(t => {\r\n      // Apply basic period filtering (you can enhance this)\r\n      const transactionDate = new Date(t.date);\r\n      const now = new Date();\r\n      let startDate: Date;\r\n      \r\n      switch (period) {\r\n        case 'day':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n          break;\r\n        case 'week':\r\n          startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n          break;\r\n        case 'month':\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n          break;\r\n        case 'quarter':\r\n          const quarter = Math.floor(now.getMonth() / 3);\r\n          startDate = new Date(now.getFullYear(), quarter * 3, 1);\r\n          break;\r\n        case 'year':\r\n          startDate = new Date(now.getFullYear(), 0, 1);\r\n          break;\r\n        default:\r\n          startDate = new Date(now.getFullYear(), now.getMonth(), 1);\r\n      }\r\n      \r\n      return transactionDate >= startDate && transactionDate <= now;\r\n    });\r\n\r\n    const totalIncome = periodTransactions\r\n      .filter(t => t.amount > 0)\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n    \r\n    const totalExpenses = Math.abs(periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .reduce((sum, t) => sum + t.amount, 0));\r\n    \r\n    const netFlow = totalIncome - totalExpenses;\r\n    const savingsRate = totalIncome > 0 ? (netFlow / totalIncome) * 100 : 0;\r\n\r\n    // Calculate top category\r\n    const categoryMap = new Map<string, number>();\r\n    periodTransactions\r\n      .filter(t => t.amount < 0)\r\n      .forEach(t => {\r\n        const category = t.category || 'Uncategorized';\r\n        categoryMap.set(category, (categoryMap.get(category) || 0) + Math.abs(t.amount));\r\n      });\r\n\r\n    const topCategory = Array.from(categoryMap.entries())\r\n      .sort(([, a], [, b]) => b - a)[0] || ['None', 0];\r\n\r\n    return {\r\n      totalBalance,\r\n      totalIncome,\r\n      totalExpenses,\r\n      netFlow,\r\n      savingsRate,\r\n      topCategory: topCategory[0],\r\n      topCategoryAmount: topCategory[1],\r\n    };\r\n  }, [transactions, accounts, period]);\r\n\r\n  // Export functionality\r\n  const handleExportTransactions = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      await exportTransactions(transactions, filters);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [transactions, filters]);\r\n\r\n  const handleExportSummary = useCallback(async () => {\r\n    setIsExporting(true);\r\n    setExportError(null);\r\n    \r\n    try {\r\n      await exportSummaryStatistics(transactions, filters);\r\n    } catch (error) {\r\n      setExportError(error instanceof Error ? error.message : 'Export failed');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  }, [transactions, filters]);\r\n\r\n  // Chart data processing\r\n  const chartData = useMemo((): ChartData => {\r\n    return {\r\n      balanceTrend: {\r\n        transactions,\r\n        accounts,\r\n        period,\r\n      },\r\n      incomeExpense: {\r\n        transactions,\r\n        period,\r\n      },\r\n      categorySpending: {\r\n        transactions,\r\n        period,\r\n      },\r\n      summary,\r\n    };\r\n  }, [transactions, accounts, period, summary]);\r\n\r\n  // Refresh functionality\r\n  const refreshCharts = useCallback(() => {\r\n    // This would typically trigger a data refresh\r\n    // For now, we'll just return a promise that resolves immediately\r\n    return Promise.resolve();\r\n  }, []);\r\n\r\n  return {\r\n    chartData,\r\n    summary,\r\n    isExporting,\r\n    exportError,\r\n    handleExportTransactions,\r\n    handleExportSummary,\r\n    refreshCharts,\r\n  };\r\n}; ","import React, { Suspense, useState } from 'react';\r\nimport { useFinancial } from '../../contexts/FinancialContext';\r\nimport { Budget } from '../../types/financial';\r\nimport { DashboardHeader } from './DashboardHeader';\r\nimport { DEFAULT_PERIODS } from '../../constants/financial';\r\nimport { Button } from '../ui/Button';\r\nimport { FullScreenSpinner, InlineSpinner } from '../ui/LoadingSpinner';\r\nimport {\r\n  Building,\r\n  Plus,\r\n  Calculator,\r\n  Target,\r\n  PieChart,\r\n  Upload,\r\n  Download,\r\n} from 'lucide-react';\r\nimport { ChartContainer } from '../charts';\r\nimport { useCharts } from '../../hooks/useCharts';\r\nimport { useDashboardData } from '../../hooks/useDashboardData';\r\nimport { useBudget } from '../../hooks/useBudget';\r\n\r\n// Lazy load components for code splitting\r\nconst AccountDetail = React.lazy(() => import('../accounts/AccountDetail').then(module => ({ default: module.AccountDetail })));\r\nconst KPISection = React.lazy(() => import('./KPISection').then(module => ({ default: module.KPISection })));\r\nconst AccountOverview = React.lazy(() => import('./AccountOverview').then(module => ({ default: module.AccountOverview })));\r\nconst RecentActivity = React.lazy(() => import('./RecentActivity').then(module => ({ default: module.RecentActivity })));\r\nconst BudgetOverview = React.lazy(() => import('../budget/BudgetOverview').then(module => ({ default: module.BudgetOverview })));\r\nconst BudgetForm = React.lazy(() => import('../budget/BudgetForm').then(module => ({ default: module.BudgetForm })));\r\n\r\nexport const Dashboard: React.FC = () => {\r\n  const {\r\n    state,\r\n    totalBalance,\r\n    viewAccountDetail,\r\n    accountFilter,\r\n    changePeriod,\r\n  } = useFinancial();\r\n\r\n  // Budget management state\r\n  const [showBudgetForm, setShowBudgetForm] = useState(false);\r\n  const [selectedBudget, setSelectedBudget] = useState<Budget | null>(null);\r\n\r\n  // Use budget hook\r\n  const { budgets } = useBudget();\r\n\r\n  // Use consolidated dashboard data hook\r\n  const dashboardData = useDashboardData({\r\n    accounts: state.accounts,\r\n    accountFilter,\r\n    selectedPeriod: state.selectedPeriod,\r\n    customDateRange: state.customDateRange,\r\n    isLoading: state.isLoading,\r\n  });\r\n\r\n  const { filteredAccounts, filteredSummary, trendData, allTransactions, hasAccounts } = dashboardData;\r\n  const isLoading = state.isLoading;\r\n\r\n  // Use charts hook\r\n  const {\r\n    chartData,\r\n    summary,\r\n    isExporting,\r\n    exportError,\r\n    handleExportTransactions,\r\n    handleExportSummary,\r\n    refreshCharts,\r\n  } = useCharts(allTransactions, filteredAccounts, state.selectedPeriod, state.filters);\r\n\r\n  // Add routing logic for account-detail screen with lazy loading\r\n  if (state.currentScreen === 'account-detail') {\r\n    return (\r\n      <Suspense fallback={<FullScreenSpinner text=\"Loading Account Details...\" />}>\r\n        <AccountDetail />\r\n      </Suspense>\r\n    );\r\n  }\r\n\r\n  // Loading state\r\n  if (isLoading) {\r\n    return <FullScreenSpinner text=\"Loading your financial data...\" />;\r\n  }\r\n\r\n  // Empty state - no accounts connected\r\n  if (!hasAccounts) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50\">\r\n        <DashboardHeader />\r\n        <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n          <div className=\"text-center py-12\">\r\n            <Building className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">\r\n              Welcome to FinanceApp\r\n            </h2>\r\n            <p className=\"text-gray-600 mb-8 max-w-md mx-auto\">\r\n              Connect your bank accounts to get started with smart financial\r\n              management. We'll help you track spending, categorize\r\n              transactions, and gain insights into your financial health.\r\n            </p>\r\n            <Button onClick={() => alert('Bank connection coming soon!')}>\r\n              Connect Your First Account\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Feature Preview */}\r\n          <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">📊</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Smart Analytics\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Get insights into your spending patterns and financial trends\r\n                with interactive charts and KPIs.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">🎯</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Budget Management\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Set budgets, track spending, and get alerts when you're\r\n                approaching your limits.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\r\n                <span className=\"text-2xl\">🔒</span>\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\r\n                Secure & Private\r\n              </h3>\r\n              <p className=\"text-gray-600\">\r\n                Your data is protected with 256-bit encryption and\r\n                industry-leading security practices.\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Main dashboard with data\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <DashboardHeader />\r\n\r\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        {/* Error Display */}\r\n        {state.error && (\r\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-lg p-4\">\r\n            <div className=\"flex\">\r\n              <div className=\"flex-shrink-0\">\r\n                <svg\r\n                  className=\"h-5 w-5 text-red-400\"\r\n                  viewBox=\"0 0 20 20\"\r\n                  fill=\"currentColor\"\r\n                >\r\n                  <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\"\r\n                    clipRule=\"evenodd\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm text-red-800\">{state.error}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Period Selector - Centered above KPI Section */}\r\n        <div className=\"flex justify-center mb-6\">\r\n          <div className=\"flex items-center space-x-1 bg-gray-100 rounded-lg p-1\">\r\n            {DEFAULT_PERIODS.map((period) => (\r\n              <button\r\n                key={period}\r\n                onClick={() => {\r\n                  if (period === 'custom') {\r\n                    // Handle custom date picker\r\n                    alert('Custom date picker coming soon!');\r\n                  } else {\r\n                    changePeriod(period as any);\r\n                  }\r\n                }}\r\n                className={`px-3 py-1.5 rounded-md text-sm font-medium transition-all ${\r\n                  state.selectedPeriod === period\r\n                    ? 'bg-white shadow-sm text-blue-600'\r\n                    : 'text-gray-600 hover:text-gray-800'\r\n                }`}\r\n              >\r\n                {period === 'day'\r\n                  ? 'D'\r\n                  : period === 'week'\r\n                  ? 'W'\r\n                  : period === 'month'\r\n                  ? 'M'\r\n                  : period === 'quarter'\r\n                  ? 'Q'\r\n                  : period === 'year'\r\n                  ? 'Y'\r\n                  : period === '5year'\r\n                  ? '5Y'\r\n                  : period === 'custom'\r\n                  ? 'Custom'\r\n                  : period}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* KPI Section */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <KPISection\r\n              summary={filteredSummary}\r\n              totalBalance={filteredSummary.totalBalance}\r\n              period={state.selectedPeriod}\r\n              budgets={budgets}\r\n              balanceTrend={trendData?.balance}\r\n              incomeTrend={trendData?.income}\r\n              expenseTrend={trendData?.expenses}\r\n              savingsTrend={trendData?.savings}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Account Overview */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <AccountOverview\r\n              accounts={filteredAccounts}\r\n              onAccountSelect={viewAccountDetail}\r\n              accountFilter={accountFilter}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Charts Section */}\r\n        <div className=\"mb-6\">\r\n          <ChartContainer\r\n            transactions={allTransactions}\r\n            accounts={filteredAccounts}\r\n            period={state.selectedPeriod}\r\n            budgets={budgets}\r\n            loading={isLoading}\r\n            error={state.error}\r\n            onExport={handleExportTransactions}\r\n            onRefresh={refreshCharts}\r\n          />\r\n        </div>\r\n\r\n        {/* Budget Section */}\r\n        <div className=\"mb-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h2 className=\"text-xl font-semibold text-gray-900\">Budget Management</h2>\r\n            <Button\r\n              onClick={() => setShowBudgetForm(true)}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Plus className=\"w-4 h-4\" />\r\n              <span>Add Budget</span>\r\n            </Button>\r\n          </div>\r\n          \r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <BudgetOverview\r\n              onBudgetSelect={setSelectedBudget}\r\n              onCreateBudget={() => setShowBudgetForm(true)}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <div className=\"mb-6\">\r\n          <Suspense fallback={<InlineSpinner />}>\r\n            <RecentActivity\r\n              accounts={filteredAccounts}\r\n              limit={10}\r\n            />\r\n          </Suspense>\r\n        </div>\r\n\r\n        {/* Export Section */}\r\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Export Data</h3>\r\n          <div className=\"flex flex-wrap gap-3\">\r\n            <Button\r\n              onClick={handleExportTransactions}\r\n              disabled={isExporting}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Download className=\"w-4 h-4\" />\r\n              <span>{isExporting ? 'Exporting...' : 'Export Transactions'}</span>\r\n            </Button>\r\n            <Button\r\n              onClick={handleExportSummary}\r\n              disabled={isExporting}\r\n              className=\"flex items-center space-x-2\"\r\n            >\r\n              <Upload className=\"w-4 h-4\" />\r\n              <span>{isExporting ? 'Exporting...' : 'Export Summary'}</span>\r\n            </Button>\r\n          </div>\r\n          {exportError && (\r\n            <p className=\"text-red-600 text-sm mt-2\">{exportError}</p>\r\n          )}\r\n        </div>\r\n      </main>\r\n\r\n      {/* Budget Form Modal */}\r\n      {showBudgetForm && (\r\n        <Suspense fallback={<FullScreenSpinner text=\"Loading Budget Form...\" />}>\r\n          <BudgetForm\r\n            budget={selectedBudget}\r\n            onSave={(budget) => {\r\n              // TODO: Save budget\r\n              setShowBudgetForm(false);\r\n            }}\r\n            onCancel={() => setShowBudgetForm(false)}\r\n            isOpen={showBudgetForm}\r\n          />\r\n        </Suspense>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { useMemo } from 'react';\r\nimport { Account, Transaction, TimePeriod, FinancialSummary } from '../types/financial';\r\nimport { calculateFinancialSummary, generateTrendData } from '../utils/periodCalculations';\r\nimport { filterTransactionsByAccountType } from '../utils/transactionUtils';\r\n\r\nexport interface DashboardData {\r\n  filteredAccounts: Account[];\r\n  filteredTotalBalance: number;\r\n  filteredSummary: FinancialSummary;\r\n  trendData: any;\r\n  allTransactions: Transaction[];\r\n  hasAccounts: boolean;\r\n}\r\n\r\nexport interface UseDashboardDataProps {\r\n  accounts: Account[];\r\n  accountFilter: 'personal' | 'business' | 'both';\r\n  selectedPeriod: TimePeriod;\r\n  customDateRange?: any;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport const useDashboardData = ({\r\n  accounts,\r\n  accountFilter,\r\n  selectedPeriod,\r\n  customDateRange,\r\n  isLoading,\r\n}: UseDashboardDataProps): DashboardData => {\r\n  // Filter accounts based on accountFilter\r\n  const filteredAccounts = useMemo(() => {\r\n    return accounts.filter((account: Account) => {\r\n      if (accountFilter === 'both') return true;\r\n      if (accountFilter === 'personal')\r\n        return !account.type.includes('BUSINESS');\r\n      if (accountFilter === 'business')\r\n        return account.type.includes('BUSINESS');\r\n      return true;\r\n    });\r\n  }, [accounts, accountFilter]);\r\n\r\n  // Calculate filtered total balance\r\n  const filteredTotalBalance = useMemo(() => {\r\n    return filteredAccounts.reduce(\r\n      (sum: number, account: Account) => sum + account.balance,\r\n      0\r\n    );\r\n  }, [filteredAccounts]);\r\n\r\n  // Get all transactions from accounts\r\n  const allTransactions = useMemo(() => {\r\n    return accounts.flatMap(account => account.transactions || []);\r\n  }, [accounts]);\r\n\r\n  // Calculate filtered summary using utility functions\r\n  const filteredSummary = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return calculateFinancialSummary(\r\n      filteredTransactions,\r\n      selectedPeriod,\r\n      customDateRange,\r\n      filteredTotalBalance\r\n    );\r\n  }, [accounts, accountFilter, selectedPeriod, customDateRange, filteredTotalBalance]);\r\n\r\n  // Generate trend data using utility functions\r\n  const trendData = useMemo(() => {\r\n    const filteredTransactions = filterTransactionsByAccountType(accounts, accountFilter);\r\n    return generateTrendData(filteredTransactions, selectedPeriod);\r\n  }, [accounts, accountFilter, selectedPeriod]);\r\n\r\n  const hasAccounts = accounts.length > 0;\r\n\r\n  return {\r\n    filteredAccounts,\r\n    filteredTotalBalance,\r\n    filteredSummary,\r\n    trendData,\r\n    allTransactions,\r\n    hasAccounts,\r\n  };\r\n}; "],"names":["MockBudgetService","constructor","budgets","alerts","this","generateMockBudgets","periods","forEach","category","index","period","length","amount","Math","random","spent","push","id","userId","startDate","Date","toISOString","endDate","now","remaining","isActive","createdAt","updatedAt","createBudget","budgetData","Promise","resolve","setTimeout","budget","getBudgets","filter","getBudget","find","updateBudget","updates","findIndex","Error","deleteBudget","splice","getBudgetProgress","budgetId","b","percentageUsed","isOverBudget","daysRemaining","ceil","getTime","projectedSpending","max","getBudgetSummary","userBudgets","totalBudgeted","reduce","sum","totalSpent","totalRemaining","overBudgetCategories","map","upcomingAlerts","alert","some","triggered","totalBudgets","calculateBudgetSpending","transactions","relevantTransactions","tx","date","abs","createBudgetAlert","alertData","getBudgetAlerts","updateBudgetAlert","alertId","subscribeToBudgets","callback","subscribeToBudgetProgress","async","progress","FirebaseBudgetService","config","getUserBudgetsCollection","collection","db","getBudgetDocRef","doc","convertTimestamp","timestamp","toDate","convertToTimestamp","dateString","Timestamp","fromDate","convertFirestoreToBudget","data","serverTimestamp","budgetsRef","budgetDoc","docRef","addDoc","budgetSnap","getDoc","exists","error","console","getDocs","docs","budgetRef","updatedBudget","updateDoc","deleteDoc","activeBudgets","flatMap","updatedAlerts","budgetWithAlert","updatedAlert","onSnapshot","snapshot","createBudgetService","useMockData","useBudget","arguments","undefined","currentUser","useAuth","setBudgets","useState","budgetSummary","setBudgetSummary","selectedBudget","setSelectedBudget","isLoading","setIsLoading","isCreating","setIsCreating","isUpdating","setIsUpdating","isDeleting","setIsDeleting","setError","budgetService","useMemo","_config$useMockData","useEffect","budgetsData","summaryData","all","err","message","loadBudgets","updatedBudgets","useCallback","newBudget","prev","summary","errorMessage","success","selectBudget","refreshBudgets","clearError","PRESET_RANGES","label","getRange","startOfDay","endOfDay","subDays","getFullYear","getMonth","lastMonth","DateRangePicker","_ref","value","onChange","onClose","className","isOpen","setIsOpen","tempRange","setTempRange","currentMonth","setCurrentMonth","pickerRef","useRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","navigateMonth","direction","newMonth","setMonth","isDateInRange","isDateSelected","format","displayValue","_jsxs","ref","children","Button","variant","onClick","_jsx","Calendar","X","e","stopPropagation","preset","newRange","handlePresetClick","ChevronLeft","ChevronRight","day","year","month","firstDay","daysInMonth","getDate","startingDayOfWeek","getDay","days","i","getDaysInMonth","handleDateClick","size","handleCancel","handleApply","disabled","ThemeToggle","theme","setTheme","savedTheme","localStorage","getItem","applyTheme","newTheme","root","documentElement","classList","remove","add","style","setProperty","setItem","getThemeIcon","themeType","Moon","Eye","Sun","getThemeLabel","themeOption","handleThemeChange","createElement","textContent","head","appendChild","DashboardHeader","state","setCustomDateRange","isPrivacyMode","togglePrivacyMode","accountFilter","setAccountFilter","useFinancial","isDatePickerOpen","setIsDatePickerOpen","accounts","handleRefresh","title","RefreshCw","EyeOff","Bell","customDateRange","range","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Filler","BaseChart","type","options","height","width","onChartClick","loading","chartRef","chartInstance","setChartInstance","handleClick","elements","mergedOptions","getDefaultOptions","baseOptions","responsive","maintainAspectRatio","plugins","legend","position","labels","usePointStyle","padding","font","color","tooltip","backgroundColor","titleColor","bodyColor","borderColor","borderWidth","cornerRadius","displayColors","callbacks","context","dataset","parsed","y","toLocaleString","scales","x","grid","display","ticks","maxRotation","beginAtZero","point","radius","hoverRadius","line","tension","cutout","percentage","a","toFixed","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","Chart","CHART_COLORS","primary","secondary","accent","danger","warning","info","purple","pink","gray","lightGray","darkGray","blue","red","orange","green","processBalanceTrendData","dataPoints","dataPointsArray","totalBalance","account","balance","subWeeks","subMonths","subQuarters","subYears","currentDate","setDate","t","getDateFormat","processIncomeExpenseData","incomeData","expenseData","periodStart","getPeriodStart","periodEnd","getPeriodEnd","periodTransactions","transactionDate","income","expenses","processCategorySpendingData","categoryMap","Map","startOfWeek","startOfMonth","startOfQuarter","startOfYear","transaction","set","get","Array","from","entries","sort","slice","endOfWeek","endOfMonth","endOfQuarter","endOfYear","BudgetVsActualChart","onDataPointClick","chartData","datasets","budgetVsActual","actualSpending","budgeted","actual","item","budgetedData","actualData","borderRadius","borderSkipped","chartOptions","text","weight","top","bottom","datasetIndex","status","minRotation","interaction","intersect","mode","handleChartClick","dataIndex","ChartFactory","chartType","customOptions","chartConfig","getChartConfig","_","Object","values","keys","getBaseOptions","dataPoint","description","getChartType","charAt","toUpperCase","CHART_CONFIGS","ChartContainer","onExport","onRefresh","expandedChart","setExpandedChart","isRefreshing","setIsRefreshing","handleDataPointClick","log","Download","isExpanded","toggleChartExpansion","_Fragment","Minimize2","Maximize2","fillRule","clipRule","defaultExportOptions","includeHeaders","dateFormat","currencyFormat","filterTransactionsForExport","filters","filteredTransactions","dateRange","start","end","amountRange","min","categories","includes","tags","tag","accountIds","accountId","transactionTypes","isIncome","isExpense","isPending","pending","isCleared","searchTerm","toLowerCase","cleanMerchant","cleanName","formatTransactionForExport","formatDate","toLocaleDateString","Intl","NumberFormat","currency","join","notes","downloadFile","content","filename","mimeType","blob","Blob","url","URL","createObjectURL","link","href","download","body","click","removeChild","revokeObjectURL","generateExportFilename","prefix","toTimeString","replace","exportTransactions","formattedData","stringify","header","columns","exportTransactionsToCSV","JSON","exportTransactionsToJSON","useCharts","isExporting","setIsExporting","exportError","setExportError","quarter","floor","totalIncome","totalExpenses","netFlow","savingsRate","topCategory","_ref2","topCategoryAmount","handleExportTransactions","handleExportSummary","formatCurrency","formattedSummary","exportSummaryStatistics","balanceTrend","incomeExpense","categorySpending","refreshCharts","AccountDetail","React","then","module","default","KPISection","AccountOverview","RecentActivity","BudgetOverview","BudgetForm","Dashboard","viewAccountDetail","changePeriod","showBudgetForm","setShowBudgetForm","dashboardData","selectedPeriod","filteredAccounts","filteredTotalBalance","allTransactions","filteredSummary","filterTransactionsByAccountType","calculateFinancialSummary","trendData","generateTrendData","hasAccounts","useDashboardData","currentScreen","Suspense","fallback","FullScreenSpinner","DEFAULT_PERIODS","InlineSpinner","incomeTrend","expenseTrend","savingsTrend","savings","onAccountSelect","Plus","onBudgetSelect","onCreateBudget","limit","Upload","onSave","onCancel","Building"],"sourceRoot":""}